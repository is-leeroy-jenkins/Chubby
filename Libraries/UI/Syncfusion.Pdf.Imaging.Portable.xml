<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Pdf.Imaging.Portable</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Pdf.Graphics.PdfBarcodeExtension">
            <summary>
            Represents the extension for exporting Barcode as image.
            </summary>
            <seealso cref="T:Syncfusion.Pdf.Graphics.PdfBarcodeExtension"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBarcodeExtension.ToImage(Syncfusion.Pdf.Barcode.PdfBidimensionalBarcode)">
            <summary>
            Generates an image for the barcode and returns it as a stream of data.
            <returns>A stream containing the generated barcode image. </returns>
            </summary>
            <example>
            <code lang="C#">
            //Creates a new PDF data matrix barcode.
             PdfDataMatrixBarcode barcode = new PdfDataMatrixBarcode();
            //Set the barcode text.
             barcode.Text = "Test";            
            //Set the dimension of the barcode.
             barcode.XDimension = 5;
            //Export the barcode as image.
             Image img = barcode.ToImage();       
            //Save document to disk.
             img.Save("barcode.png", ImageFormat.Png);
            </code>
            <code lang="VB">
            //Creates a new PDF data matrix barcode.
             Dim barcode As PdfDataMatrixBarcode = New PdfDataMatrixBarcode()
            //Set the barcode text.
             barcode.Text = "Test"          
            //Set the dimension of the barcode.
             barcode.XDimension = 5;
            //Export the barcode as image.
              Dim img As Image = barcode.ToImage()     
            //Save document to disk.
             img.Save("barcode.png", ImageFormat.Png)     
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBarcodeExtension.ToImage(Syncfusion.Pdf.Barcode.PdfBidimensionalBarcode,Syncfusion.Drawing.SizeF)">
            <summary>
            Generates an image for the barcode with the specified size and returns it as a stream of data.
            </summary>
            <param name="size"> The size of the image to generate. </param>
            <returns>A stream containing the generated barcode image. </returns>
            <example>
            <code lang="C#">
            //Creates a new PDF data matrix barcode.
             PdfDataMatrixBarcode barcode = new PdfDataMatrixBarcode();
            //Set the barcode text.
             barcode.Text = "Test";            
            //Set the dimension of the barcode.
             barcode.XDimension = 5;
            //Export the barcode as image.
             Image img = barcode.ToImage(new SizeF(200,200));       
            //Save document to disk.
             img.Save("barcode.png", ImageFormat.Png);
            </code>
            <code lang="VB">
            //Creates a new PDF data matrix barcode.
             Dim barcode As PdfDataMatrixBarcode = New PdfDataMatrixBarcode()
            //Set the barcode text.
             barcode.Text = "Test"          
            //Set the dimension of the barcode.
             barcode.XDimension = 5;
            //Export the barcode as image.
             Dim img As Image = barcode.ToImage(New SizeF(200, 200)) 
            //Save document to disk.
             img.Save("barcode.png", ImageFormat.Png)     
            </code>   
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBarcodeExtension.ToImage(Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode)">
            <summary>
            Generates an image for the barcode and returns it as a stream of data.
            <returns>A stream containing the generated barcode image. </returns>
            </summary>
            <example>
            <code lang = "C#">
            //Creates a new PdfCode11Barcode.
            PdfCode11Barcode barcode = new PdfCode11Barcode();
            //Set the barcode text.
            barcode.Text = "00-74-23-90";
            //Exporting barcode as image
             Image img = barcode.ToImage();
            //Save the image into Disk
            img.Save("barcode.png", ImageFormat.Png);
            </code>      
            <code lang="VB">
            //Creates a new PdfCode11Barcode.
             Dim barcode As PdfCode11Barcode = New PdfCode11Barcode()
            //Set the barcode text.
             barcode.Text = "00-74-23-90"  
            //Exporting barcode as image
             Dim img As Image = barcode.ToImage() 
            //Save document to disk.
             img.Save("barcode.png", ImageFormat.Png)     
            </code>   
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfBarcodeExtension.ToImage(Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode,Syncfusion.Drawing.SizeF)">
            <summary>
            Generates an image for the barcode with the specified size and returns it as a stream of data.
            </summary>
            <param name="size"> The size of the image to generate. </param>
            <returns>A stream containing the generated barcode image. </returns>
            <example>
            <code lang = "C#">
            //Creates a new PdfCode11Barcode.
            PdfCode11Barcode barcode = new PdfCode11Barcode();
            //Set the barcode text.
            barcode.Text = "00-74-23-90";
            //Exporting barcode as image
             Image img = barcode.ToImage(new SizeF(200,200));
            //Save the image into Disk
            img.Save("barcode.png", ImageFormat.Png);
            </code>      
            <code lang="VB">
            //Creates a new PdfCode11Barcode.
             Dim barcode As PdfCode11Barcode = New PdfCode11Barcode()
            //Set the barcode text.
             barcode.Text = "00-74-23-90"  
            //Exporting barcode as image
             Dim img As Image = barcode.ToImage(New SizeF(200,200)) 
            //Save document to disk.
             img.Save("barcode.png", ImageFormat.Png)     
            </code>        
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.PdfGraphicsExtension">
            <summary>
            Represents the extension methods for the <see cref="T:Syncfusion.Pdf.Graphics.PdfGraphics"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfGraphicsExtension.GetImage(Syncfusion.Pdf.Graphics.PdfGraphics,System.IO.Stream)">
            <summary>
            Get the <see cref="T:Syncfusion.Pdf.Graphics.PdfImage"/> from the specified stream.
            </summary>
            <param name="graphics">Current PDF graphics.</param>
            <param name="stream">Image stream.</param>
            <param name="document">PDF document to store the identical images.</param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfImageMask.m_imageMask">
            <summary>
            Holds mask image.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.PdfImageMask.m_softMask">
            <summary>
            Holds mask type flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfImageMask.Mask">
             <summary>
             Gets the image mask for the bitmap (Read only).
             </summary>
             <remarks>This property is not supported in WinRT, Windows Phone, Xamarin, Universal Windows Platform and Silverlight.</remarks>
             <value>The <see cref="T:Syncfusion.Pdf.Graphics.PdfBitmap"/> represents the image mask.</value>
             <example>
             <code lang="CS">
             //Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Add pages to the document
             PdfPage page = doc.Pages.Add();
             //Create PDF graphics for the page
             PdfGraphics graphics = page.Graphics;
             //Load the Tiff image
             PdfBitmap image = new PdfBitmap("image.tif");
             //Create masking image
             PdfImageMask mask = new PdfImageMask(new PdfBitmap("mask.bmp"));
             //Get the mask image.
             PdfBitmap maskedImage = mask.Mask;
             image.Mask = mask;
             //Draw the image
             graphics.DrawImage(image, 0, 0);
             //Saves the document
             doc.Save("Output.pdf");
             //Close the document
             doc.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a PDF document
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Load the Tiff image
            Dim image As New PdfBitmap("image.tif")
            'Create masking image
            Dim mask As New PdfImageMask(New PdfBitmap("mask.bmp"))
            'Get the mask image.
            Dim maskedImage As PdfBitmap = mask.Mask
            image.Mask = mask
            'Draw the image
            graphics.DrawImage(image, 0, 0)
            'Saves the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfImageMask.SoftMask">
             <summary>
             Gets the mask type for the bitmap (Read only).
             </summary>
             <remarks>This property is not supported in WinRT, Windows Phone, Xamarin, Universal Windows Platform and Silverlight.</remarks>
             <value><c>true</c> if soft mask; otherwise, hard mask <c>false</c>.</value>
             <example>
             <code lang="CS">
             //Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Add pages to the document
             PdfPage page = doc.Pages.Add();
             //Create PDF graphics for the page
             PdfGraphics graphics = page.Graphics;
             //Load the Tiff image
             PdfBitmap image = new PdfBitmap("image.tif");
             //Create masking image
             PdfImageMask mask = new PdfImageMask(new PdfBitmap("mask.bmp"));
              //Check soft mask.
              bool isSoftMask = mask.SoftMask;
             image.Mask = mask;
             //Draw the image
             graphics.DrawImage(image, 0, 0);
             //Saves the document
             doc.Save("Output.pdf");
             //Close the document
             doc.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a PDF document
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Load the Tiff image
            Dim image As New PdfBitmap("image.tif")
            'Create masking image
            Dim mask As New PdfImageMask(New PdfBitmap("mask.bmp"))
            'Check soft mask.
            Dim isSoftMask As Boolean = mask.SoftMask
            image.Mask = mask
            'Draw the image
            graphics.DrawImage(image, 0, 0)
            'Saves the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfImageMask.#ctor(Syncfusion.Pdf.Graphics.PdfTiffImage)">
             <summary>
             Initializes a new instance of the PdfImageMask class from the specified <see cref="T:Syncfusion.Pdf.Graphics.PdfBitmap"/>
             </summary>
             <remarks>This property is not supported in WinRT, Windows Phone, Xamarin, Universal Windows Platform and Silverlight.</remarks>
             <param name="imageMask">The PdfBitmap which represents the image</param>
             <example>
             <code lang="CS">
             //Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Add pages to the document
             PdfPage page = doc.Pages.Add();
             //Create PDF graphics for the page
             PdfGraphics graphics = page.Graphics;
             //Load the Tiff image
             PdfBitmap image = new PdfBitmap("image.tif");
             //Create masking image
             PdfImageMask mask = new PdfImageMask(new PdfBitmap("mask.bmp"));
             image.Mask = mask;
             //Draw the image
             graphics.DrawImage(image, 0, 0);
             //Saves the document
             doc.Save("Output.pdf");
             //Close the document
             doc.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a PDF document
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Load the Tiff image
            Dim image As New PdfBitmap("image.tif")
            'Create masking image
            Dim mask As New PdfImageMask(New PdfBitmap("mask.bmp"))
            image.Mask = mask
            'Draw the image
            graphics.DrawImage(image, 0, 0)
            'Saves the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.Graphics.PdfTiffImage" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.Graphics.PdfTiffImage.#ctor(System.IO.Stream)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.Graphics.PdfTiffImage.#ctor(System.IO.Stream,System.Boolean)" -->
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Syncfusion.Pdf.Graphics.PdfTiffImage"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Graphics.PdfTiffImage.FrameCount" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Graphics.PdfTiffImage.Height" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Graphics.PdfTiffImage.Width" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Graphics.PdfTiffImage.ActiveFrame" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Graphics.PdfTiffImage.VerticalResolution" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Graphics.PdfTiffImage.HorizontalResolution" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Graphics.PdfTiffImage.PhysicalDimension" -->
        <member name="P:Syncfusion.Pdf.Graphics.PdfTiffImage.Tiff">
            <summary>
            Get the Tiff image
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTiffImage.SKBitmap">
            <summary>
             Gets the SKBitmap
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.PdfTiffImage.Mask">
             <summary>
             Gets or sets the mask of bitmap.
             </summary>
             <value>New PdfMask represents the mask image.</value>
             <example>
             <code lang="CS">
             //Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Add pages to the document
             PdfPage page = doc.Pages.Add();
             //Create PDF graphics for the page
             PdfGraphics graphics = page.Graphics;
             //Load the TIFF image
             FileStream imageStream = new FileStream("image.tif", FileMode.Open, FileAccess.Read);
             PdfBitmap image = new PdfBitmap(imageStream);
             //Create masking image
             FileStream maskStream = new FileStream("mask.bmp", FileMode.Open, FileAccess.Read);
             PdfImageMask mask = new PdfImageMask(new PdfBitmap(maskStream));
             image.Mask = mask;
             //Draw the image
             graphics.DrawImage(image, 0, 0);
             //Creating the stream object
             MemoryStream stream = new MemoryStream();
             //Save the document as stream
             doc.Save(stream);
             //Close the document
             doc.Close(true);
            </code>
            <code lang="VB.NET">
             'Create a PDF document
             Dim doc As New PdfDocument()
             'Add pages to the document
             Dim page As PdfPage = doc.Pages.Add()
             'Create PDF graphics for the page
             Dim graphics As PdfGraphics = page.Graphics
             'Load the TIFF image
             Dim imageStream As New FileStream("image.tif", FileMode.Open, FileAccess.Read)
             'Load the TIFF image
             Dim image As New PdfTiffImage(imageStream)
             'Load the masking image
             Dim maskStream As New FileStream("mask.bmp", FileMode.Open, FileAccess.Read)
             'Create masking image
             Dim mask As New PdfImageMask(New PdfTiffImage(maskStream))
             image.Mask = mask
             'Draw the image
             graphics.DrawImage(image, 0, 0)
             'Saves the document
             doc.Save("Output.pdf")
             'Close the document
             doc.Close(True)
             </code>
             </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.Graphics.PdfTiffImage.Dispose" -->
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.Dispose(System.Boolean)">
            <summary>
            Disposes the specified disposing.
            </summary>
            <param name="disposing">if it is disposing, set to <c>true</c>.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.Save">
            <summary>
            Saves the image into stream.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.CreateMaskImage(SkiaSharp.SKBitmap)">
            <summary>
            Combine orignal and mask image  
            </summary>
            <param name="kBitmap"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.CreateColorMask">
            <summary>
            Create Color Mask 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.ConvertTifftoPng(BitMiracle.LibTiff.Classic.Tiff)">
            <summary>
            Convert TIFF filter image to PNG Stream
            </summary>
            <param name="tifImg"></param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.GetMetadata">
            <summary>
            Get the metadata from image stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.Clone">
            <summary>
            Gets the PdfImage
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.GetPointSize(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Get the size of the image
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="horizontalResolution"></param>
            <param name="verticalResolution"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.StreamExistance(System.IO.Stream)">
            <summary>
            Check the image stream is valid or not
            </summary>
            <param name="stream"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.UpdateImageResolution(System.IO.Stream)">
            <summary>
            Update the horizontal and vertical resolution from the image
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copy stream from one to another
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.ConvertTifftoPdfStream(BitMiracle.LibTiff.Classic.Tiff,System.Boolean@)">
            <summary>
            Convert to get Original Tiff Image Data to Pdf Image Data
            </summary>
            <param name="originalTiff"></param>
            <param name="success"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.UpdateImageFilter(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Update the image filter
            </summary>
            <param name="imageDictionary"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.GetImageColorSpace(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Updates the image color space
            </summary>
            <param name="imageDictionary"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.GetDeviceColor(Syncfusion.Pdf.Graphics.PdfTiffImage.TiffColorSpace)">
            <summary>
            Gets the device color
            </summary>
            <param name="m_imageColorSpace"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.GetTiffImageSize(BitMiracle.LibTiff.Classic.Tiff)">
            <summary>
            Gets the image size
            </summary>
            <param name="originalTiff"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.GetImagePdfData(BitMiracle.LibTiff.Classic.Tiff,System.Boolean@)">
            <summary>
            Convert the image to pdf image data
            </summary>
            <param name="originalTiff"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.ConvertSamplePlanerSeparatorToContig(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Convert sample planer separator to contig
            </summary>
            <param name="imgData"></param>
            <param name="bufferOffset"></param>
            <param name="samplebuffer"></param>
            <param name="samplebuffersize"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.ConvertToPalette(System.Byte[])">
            <summary>
            Convert to Palette
            </summary>
            <param name="imgData"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.IsJpegStripData(System.Byte[],System.Int32,System.Byte[],System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Is Jpeg Strip Data
            </summary>
            <param name="strip"></param>
            <param name="striplength"></param>
            <param name="imgData"></param>
            <param name="imageOffset"></param>
            <param name="stripCount"></param>
            <param name="no"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.ConvertRgbaToRgb(System.Byte[],System.Int32)">
            <summary>
            Convert Rgba To Rgb
            </summary>
            <param name="data"></param>
            <param name="samplecount"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.ConvertRgbaaToRgb(System.Byte[],System.Int32)">
            <summary>
            Convert Rgbaa To Rgb
            </summary>
            <param name="data"></param>
            <param name="samplecount"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.ConvertAbgrToRgb(System.Byte[],System.Int32)">
            <summary>
            Convert Abgr To Rgb
            </summary>
            <param name="data"></param>
            <param name="samplecount"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PdfTiffImage.ConvertLabSignedToUnsigned(System.Byte[],System.Int32)">
            <summary>
            Convert Lab Signed To Unsigned
            </summary>
            <param name="imgData"></param>
            <param name="samplecount"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Bitmap.MakeTransparent(Syncfusion.Drawing.Color)">
            New Method added
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Bitmap.GetImageFormat(Syncfusion.Drawing.ImageFormat)">
            <summary>
            Gets the equivalent SKEncodedImageFormat for the input ImageFormat.
            </summary>
            <param name="imageFormat">Image format used for encoding image.</param>
            <returns>Equivalent SKEncodedImageFormat for the input ImageFormat.</returns>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.GraphicsPath.PathData">
            New Property
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.GraphicsPath.#ctor">
            New Constructor
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.GraphicsPath.AddBezier(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            New Method
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.GraphicsPath.CloseFigure">
            New Method
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.GraphicsPath.StartFigure">
            New Method
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.PathGradientBrush.UpdatePathGradientBrush">
            <summary>
            Update the PathGradientBrush with updated values
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.FontFamily">
            <summary>
            Specifies the display and layout information for text strings.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.FontFamily.font">
            <summary>
            Font
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.Graphics.FontFamily.#ctor(SkiaSharp.SKTypeface,System.Single)" -->
        <member name="M:Syncfusion.Pdf.Graphics.FontFamily.#ctor(System.String)">
            <summary>
            Create FontFamily with fontName
            </summary>
            <param name="fontName"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FontFamily.#ctor(System.String,System.Single)">
            <summary>
            Create FontFamily with fontName and fontSize
            </summary>
            <param name="fontName"></param>
            <param name="fontSize"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FontFamily.#ctor(SkiaSharp.SKTypeface)">
            <summary>
            Create FontFamily with typeface
            </summary>
            <param name="typeface"></param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.FontFamily.FontFamilyName">
            <summary>
            Gets Font Family Name
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.FontFamily.Name">
            <summary>
            Gets TypeFace Name
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FontFamily.IsStyleAvailable(Syncfusion.Drawing.FontStyle)">
            <summary>
            Check Font Style
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FontFamily.GetEmHeight(Syncfusion.Drawing.FontStyle)">
            <summary>
            Gets Font EM Height
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FontFamily.GetCellAscent(Syncfusion.Drawing.FontStyle)">
            <summary>
            Gets Font Cell Ascent 
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FontFamily.GetCellDescent(Syncfusion.Drawing.FontStyle)">
            <summary>
            Gets Font Cell Descent 
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.FontFamily.GetLineSpacing(Syncfusion.Drawing.FontStyle)">
            <summary>
            Get Font Line Spacing
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Extension">
            <summary>
            Extension Class
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Extension.GetSKMatrix(Syncfusion.Drawing.Matrix)">
            <summary>
            GetSKMatrix
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Extension.GetSKColor(Syncfusion.Drawing.Color)">
            <summary>
            GetSKColor
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Extension.GetColor(SkiaSharp.SKColor)">
            <summary>
            GetColor
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.Brush">
            <summary>
            Brush
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.Brush.m_sKPaint">
            <summary>
            SKPaint
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.Brush.#ctor(Syncfusion.Drawing.Color)">
            <summary>
            Create Brush with Color
            </summary>
            <param name="textColor"></param>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Brush.SKPaint">
            <summary>
            Gets SKPaint
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Brush.StrokeWidth">
            <summary>
            Gets StrokeWidth
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Brush.Shader">
            <summary>
            Gets Shader
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Brush.FilterQuality">
            <summary>
            Gets FilterQuality
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Graphics.Brush.Color">
            <summary>
            Gets Color
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.RenderHelper">
            <summary>
            RenderHelper
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.RenderHelper.PointToPixelScalingFactor">
            <summary>
            PointToPixelScalingFactor
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.RenderHelper.GetGraphics">
            <summary>
            Gets graphics
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.RenderHelper.SKRect(Syncfusion.Drawing.Rectangle)">
            <summary>
            Gets Rectangle
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.RenderHelper.SKRect(Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets Rectangle
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.RenderHelper.SKPath(Syncfusion.Drawing.Rectangle)">
            <summary>
            Gets Path
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.RenderHelper.SKPath(Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets Path
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.RenderHelper.ImageRect(Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets Image Rectangle
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.RenderHelper.ImageRect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gets Image Rectangle
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.RenderHelper.GetClipRectangle(SkiaSharp.SKRect)">
            <summary>
            Gets Clip Rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.GraphicsState">
            <summary>
            GraphicsState
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Graphics.GraphicsState.m_nativeState">
            <summary>
            m_nativeState
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Graphics.GraphicsState.#ctor(System.Int32)">
            <summary>
            Save state
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.BitmapData">
            <summary>
            Bitmap Data
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.ImageHelper">
            <summary>
            Image
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Graphics.ImageLockMode">
            <summary>
            ImageLockMode
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfConformanceExtension.ConvertToPDFA(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.PdfConformanceLevel)">
            <summary>
            Convert the existing PDF document to PDF/A document.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing PDF document
            FileStream docStream = new FileStream(@"Input.pdf", FileMode.Open, FileAccess.Read);
            PdfLoadedDocument doc = new PdfLoadedDocument(docStream);
            //Sample level Font event handling
            doc.SubstituteFont += LoadedDocument_SubstituteFont;
            //Convert the loaded document to PDF/A document
            doc.ConvertToPDFA(PdfConformanceLevel.Pdf_A1B);
            MemoryStream stream = new MemoryStream();
            //Save the document
            doc.Save(stream);
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB">
            'Load an existing PDF document
            Dim docStream As FileStream = New FileStream("Input.pdf", FileMode.Open, FileAccess.Read)
            Dim document As New PdfLoadedDocument(docStream)
            document.SubstituteFont += LoadedDocument_SubstituteFont
            'Convert the loaded document to PDF/A document
            document.ConvertToPDFA(PdfConformanceLevel.Pdf_A1B)
            Dim stream As MemoryStream = New MemoryStream()
            'Save the document
            doc.Save(stream)
            'Close the document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Exporting.ImageExportHelperNet.m_modified">
            <summary>
            Local variable to store if page updated.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Exporting.ImageExportHelperNet.m_imageLengthDict">
            <summary>
            Internal variable to store image count for the page.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Exporting.ImageExportHelperNet.m_resourceLoader">
            <summary>
            Local variable to store resource information
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Exporting.ImageExportHelperNet.m_extractedImagesBounds">
            <summary>
            Local variable to store information about images.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Exporting.ImageExportHelperNet.m_imageinfo">
            <summary>
            Local variable to store image information.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Exporting.ImageExportHelperNet.extractedImages">
            <summary>
            ArrayList to store the extracted images.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Exporting.ImageExportHelperNet.m_imageInfoList">
            <summary>
            List to store the image information.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Exporting.ImageExportHelperNet.m_ImageKey">
            <summary>
            List to store image keys.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Exporting.ImageExportHelperNet.m_currentMatrix">
            <summary>
            Stack to maintain the current matrix.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Exporting.ImageExportHelperNet.ClearImageResources">
            <summary>
            Clear the page resource and record collection
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Exporting.ImageExportHelperNet.ReplaceImage(System.Int32,Syncfusion.Pdf.Graphics.PdfImage,Syncfusion.Pdf.PdfPageBase)">
             <summary>
             Replace the Image at index's Position.
             </summary>
             <param name="index">index of an image</param>
             <param name="image">The New Replace image</param>
            <example>
            <code lang="CS">
             //Load the PDF document
             PdfLoadedDocument doc = new PdfLoadedDocument(@"input.pdf");
             //Create an image instance
             PdfBitmap bmp = new PdfBitmap(@"Autumn Leaves.jpg");
             //Replace the first image in the page.
             doc.Pages[0].ReplaceImage(0, bmp);
             //Save the document
             doc.Save("output.pdf");
             //Close the document
             doc.Close(true);
            </code>
            <code lang="VB.NET">
            'Load the PDF document///Dim doc As New PdfLoadedDocument("input.pdf")
            'Create an image instance
            Dim bmp As New PdfBitmap("Autumn Leaves.jpg")
            'Replace the first image in the page.
            doc.Pages(0).ReplaceImage(0, bmp)
            'Save the document
            doc.Save("output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Exporting.ImageExportHelperNet.ExtractImages(System.Boolean)">
            <summary>
            Extracts image information from the given PDF Page.
            </summary>
            <returns>Returns the extracted image information as PdfImageInfo[].</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Exporting.ImageExportHelperNet.GetXObject(Syncfusion.Pdf.PdfResources)">
            <summary>
            Gets the XObject from the Resource dictionary
            </summary>
            <param name="resources">Page resource</param>
            <returns>XObject</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.Exporting.PdfImageExtractor.GetImagesInfo(Syncfusion.Pdf.PdfPageBase)" -->
        <member name="M:Syncfusion.Pdf.Exporting.PdfImageExtractor.ExtractImages(Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Extracts images from a PDF document and returns an array of images as a stream.
            </summary>
            <returns>An array of streams, each representing an extracted image from the PDF document. </returns>
            <example>
            <code lang="C#">
            //Load PDF document.
            FileStream input = new FileStream("Input.pdf", FileMode.Open, FileAccess.Read);
            PdfLoadedDocument document = new PdfLoadedDocument(input);
            //Gets ImageInfo from the first page.
            Stream[] streams = document.Pages[0].ExtractImages();
            //Gets the Image Boundary location.
            RectangleF imageBounds = imageInfo[0].Bounds;
            //Gets the Image.
            Image image = imageInfo[0].Image;
            //Gets the Image index.
            int imageIndex = imageInfo[0].Index;
            //Closing the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Load PDF document.
            Dim input As New FileStream("Input.pdf", FileMode.Open, FileAccess.Read)
            Dim document As New PdfLoadedDocument(input)
            'Gets ImageInfo from the first page.
            Dim imageInfo As Stream() = document.Pages(0).ExtractImages();
            'Gets the Image Boundary location.
            Dim imageBounds As RectangleF = imageInfo(0).Bounds
            'Gets the Image.
            Dim image As Image = imageInfo(0).Image
            'Gets the Image index.
            Dim imageIndex As Integer = imageInfo(0).Index
            'Closing the PDF document.
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.Pdf.PdfPage"/> Class
        </member>
        <member name="M:Syncfusion.Pdf.Exporting.PdfImageExtractor.ReplaceImage(Syncfusion.Pdf.PdfPageBase,System.Int32,Syncfusion.Pdf.Graphics.PdfImage)">
             <summary>
             Replace the image at the index position.
             </summary>
             <param name="index">index of an image</param>
             <param name="image">The New Replace image</param>
            <example>
            <code lang="CS">
             //Load the PDF document
             FileStream input = new FileStream("Input.pdf", FileMode.Open, FileAccess.Read);
             PdfLoadedDocument doc = new PdfLoadedDocument(input);
             //Create an image instance
             PdfBitmap bmp = new PdfBitmap(new FileStream("Autumn Leaves.jpg", FileMode.Open, FileAccess.Read));
             //Replace the first image in the page.
             doc.Pages[0].ReplaceImage(0, bmp);
             MemoryStream stream = new MemoryStream();
             //Save the document
             doc.Save(stream);
             //Close the document
             doc.Close(true);
            </code>
            <code lang="VB.NET">
             'Load the PDF document
             Dim input As New FileStream("Input.pdf", FileMode.Open, FileAccess.Read)
             Dim doc As New PdfLoadedDocument(input)
             Dim input As New FileStream("Autumn Leaves.jpg", FileMode.Open, FileAccess.Read)
             'Create an image instance
             Dim bmp As New PdfBitmap(input)
             'Replace the first image in the page.
             doc.Pages(0).ReplaceImage(0, bmp)
             Dim stream As New MemoryStream()
             'Save the document
             doc.Save(stream)
             'Close the document
             doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Exporting.PdfImageExtractor.RemoveImage(Syncfusion.Pdf.PdfPageBase,Syncfusion.Pdf.Exporting.PdfImageInfo)">
             <summary>
             Remove the image from the PDF page in the existing PDF document.
             </summary>      
            <example>
            <code lang="CS">
             //Load an existing PDF.
             PdfLoadedDocument loadedDocument = new PdfLoadedDocument(fileName);
             //Load first page.
             PdfPageBase pageBase = loadedDocument.Pages[0];
             //Extract images from first page.        
             PdfImageInfo imageInfo = loadedDocument.Pages[0].ImagesInfo[0];
             //Remove the Image.
            loadedDocument.Pages[0].RemoveImage(imageInfo);
             MemoryStream stream = new MemoryStream();
             //Save the document
             loadedDocument.Save(stream);
             //close the document
            loadedDocument.Close(true);
            </code>
            <code lang="VB.NET">
            'Load an existing PDF
             Dim loadedDocument As PdfLoadedDocument =  New PdfLoadedDocument(fileName) 
             'Load first page.
             Dim pageBase As PdfPageBase = loadedDocument.Pages(0) 
             'Extract images from first page.        
             Dim imageInfo As PdfImageInfo = loadedDocument.Pages(0).ImagesInfo(0) 
             'Remove the Image.
             loadedDocument.Pages(0).RemoveImage(imageInfo)       
             Dim stream As New MemoryStream()
             'Save the document
             loadedDocument.Save(stream)
             'close the document
             loadedDocument.Close(True)        
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Exporting.NamespaceDoc">
            <summary>
            The Syncfusion.Pdf.Exporting namespace contains classes to perform export operations.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.Exporting.PdfImageInfo" -->
        <member name="F:Syncfusion.Pdf.Exporting.PdfImageInfo.m_bounds">
            <summary>
            Local Variable to store the image bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Exporting.PdfImageInfo.m_bitmap">
            <summary>
            Local Variable to store the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Exporting.PdfImageInfo.m_index">
            <summary>
            Local Variable to store the image index.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Exporting.PdfImageInfo.m_name">
            <summary>
            Internal variable to store the image name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Exporting.PdfImageInfo.m_matrix">
            <summary>
            Internal variable to store the matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Exporting.PdfImageInfo.m_maskImage">
            <summary>
            Internal variable to store the image name.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Exporting.PdfImageInfo.m_bisImageExtracted">
            <summary>
            Internal variable , it identifies the image is extracted or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Exporting.PdfImageInfo.m_bDisposed">
            <summary>
            Indicates if the object has been disposed.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Exporting.PdfImageInfo.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:PdfImagesInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Exporting.PdfImageInfo.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Syncfusion.Pdf.Exporting.PdfImageInfo"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Exporting.PdfImageInfo.Bounds">
            <summary>
            Gets the image boundary location.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Exporting.PdfImageInfo.ImageStream" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Exporting.PdfImageInfo.ImageFilter" -->
        <member name="P:Syncfusion.Pdf.Exporting.PdfImageInfo.Image">
            <summary>
            Gets the Image.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Exporting.PdfImageInfo.Index">
            <summary>
            Gets the Image index.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Exporting.PdfImageInfo.Name">
            <summary>
            Gets the image name.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Exporting.PdfImageInfo.Matrix">
            <summary>
            Gets the matrix.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Exporting.PdfImageInfo.MaskImage">
            <summary>
            Gets the matrix.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Exporting.PdfImageInfo.IsSoftMasked">
            <summary>
            Returns true, if soft masking is applied. Set to true when the image is undergone soft masking.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Exporting.PdfImageInfo.IsImageMasked">
            <summary>
            Returns true, if image masking is applied. Set to true when the image is undergone image masking.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Exporting.PdfImageInfo.IsImageInterpolated">
            <summary>
            Returns true, when the image property in the PDF document is set to undergo interpolation.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Exporting.PdfImageInfo.IsImageExtracted">
            <summary>
            Gets or sets the image is extracted or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Exporting.PdfImageInfo.Metadata">
             <summary>
             Gets XMP metadata of the image.
             </summary>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument doc = new PdfDocument();
             //Add a page to the document.
             PdfPage page = doc.Pages.Add();
             //Create PDF graphics for the page
             PdfGraphics graphics = page.Graphics;
             //Load the image from the disk with enable metadata extraction.
             PdfBitmap image = new PdfBitmap(File.OpenRead("Autumn Leaves.jpg"), true);
             //Get image metadata
             XmpMetadata metadata = image.Metadata;
             //Draw the image
             graphics.DrawImage(image, 0, 0);
             //Save the document.
             doc.Save("Output.pdf");
             //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Load the image from the disk with enable metadata extraction.
            Dim image As New PdfBitmap(File.OpenRead("Autumn Leaves.jpg"), true)
            'Get image metadata
             Dim metadata As XmpMetadata = image.Metadata
            'Draw the image
            graphics.DrawImage(image, 0, 0)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Exporting.PdfImageInfo.SaveImage(System.IO.Stream)">
            <summary>
            Save the image to the stream
            </summary>
            <example>
            <code lang="C#">
            //Load PDF document.
            PdfLoadedDocument document = new PdfLoadedDocument("Input.pdf");
            //Gets ImageInfo from the first page.
            PdfImageInfo[] imageInfo = document.Pages[0].ExtractImages();
            //Gets the Image Boundary location.
            RectangleF imageBounds = imageInfo[0].Bounds;
            //Save image into memory stream.
            MemoryStream imageStream = new MemoryStream();
            imageInfo[0].Save(imageStream);
            //Closing the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Load PDF document.
            Dim document As New PdfLoadedDocument("Input.pdf")
            'Gets ImageInfo from the first page.
            Dim imageInfo As PdfImageInfo() = document.Pages(0).ExtractImages()
            'Gets the Image Boundary location.
            Dim imageBounds As RectangleF = imageInfo(0).Bounds
            'Save image into memory stream.
            Dim imageStream As New MemoryStream()
            imageInfo(0).Save(imageStream)
            'Closing the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Exporting.PdfImageInfo.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <example>
            <code lang="C#">
            //Load PDF document.
            PdfLoadedDocument document = new PdfLoadedDocument("Input.pdf");
            //Gets ImageInfo from the first page.
            PdfImageInfo[] imageInfo = document.Pages[0].ExtractImages();
            //Dispose ImageInfo.
            imageInfo[0].Dispose();
            //Closing the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Load PDF document.
            Dim document As New PdfLoadedDocument("Input.pdf")
            'Gets ImageInfo from the first page.
            Dim imageInfo As PdfImageInfo() = document.Pages(0).ExtractImages()
            'Dispose ImageInfo.
            imageInfo(0).Dispose()
            'Closing the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Exporting.PdfImageInfo.Dispose(System.Boolean)">
            <summary>
            Disposes the specified disposing.
            </summary>
            <param name="disposing">if it is disposing, set to <c>true</c>.</param>
        </member>
        <member name="F:Syncfusion.Pdf.ImageStructureNet.m_isImageForExtraction">
            <summary>
            local variable to store the value true if image is used for extraction
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ImageStructureNet.isDeviceN">
            <summary>
            Occurs prior to the rendering of every image in the document
            </summary>
            <param name="sender"></param>
            <param name="args"> ImagePreRenderEventArgs</param>
        </member>
        <member name="F:Syncfusion.Pdf.ImageStructureNet.m_compressPDF">
            <summary>
            Flag to indicate PDF compression image extract
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ImageStructureNet.m_decodedOriginalBitmap">
            <summary>
            Holds origial image stream 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ImageStructureNet.m_decodedMaskBitmap">
            <summary>
            Holds mask image stream
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.ImageStructureNet.IsImageForExtraction">
            <summary>
            Gets or sets "true" when an image is used for Extraction.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.ImageStructureNet.MaskStream">
            <summary>
            Holds the stream of the mask image associated with the original image
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.ImageStructureNet.BitsPerComponent">
            <summary>
            Gets BitsPerComponent value of the original image
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.ConvertIndexCMYKToRGB(System.Byte[])">
            <summary>
            Converts DeviceCMYK colorspace to RGB colourspace
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.ConvertCMYKToRGB(System.Single[])">
            <summary>
            Converts the CMYK values to RGB
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.GetColorSpace">
            <summary>
            Process the ColorSpace property in the Image dictionary
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.ConvertICCBasedStreamToFlat(System.Int32,System.Int32,System.Int32,System.Byte[],System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            To Apply the ICCBased Colorspace in the Image Stream
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.SkipEscapeSequence(System.String)">
            <summary>
            Skips the escape sequence from the given input string
            </summary>
            <param name="text">String with the escape sequence</param>
            <returns>String without escape sequence</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.GetAsciiBytes(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.DecodeASCII85Stream(System.IO.MemoryStream)">
            <summary>
            Decodes the ASCII85 encoded stream
            </summary>
            <param name="encodedStream">Encoded stream</param>
            <returns>Decoded Stream</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.DecodeFlateStream(System.IO.MemoryStream)">
            <summary>
            Decodes the Flate encoded stream
            </summary>
            <param name="encodedStream">Encoded stream</param>
            <returns>Decoded Stream</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.DecodeJBIG2EncodedStream(System.IO.MemoryStream)">
            <summary>
            Decodes JBIG2 encoded input stream 
            </summary>
            <param name="imageStream"> Input image stream</param>
            <returns>Returns the output as image.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.MergeImages(Syncfusion.Pdf.Graphics.Bitmap,System.IO.MemoryStream,System.Boolean)">
            <summary>
            Merges the stream of the two images
            </summary>
            <param name="input">Stream of the original image</param>
            <param name="maskStream">Encoded stream of the mask image</param>
            <returns>Stream of the merged image</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.ConvertToFloat(System.Byte)">
            <summary>
            sRgbToScRgb conversion
            </summary>
            <param name="byteValue">Byte value of the color</param>
            <returns>Equivalent float value</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.ConvertToByte(System.Single)">
            <summary>
            ScRgbTosRgb conversion
            </summary>
            <param name="value">Float value of the color</param>
            <returns>Equivalent byte value</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.DecodeMaskImage(System.IO.MemoryStream)">
            <summary>
            Decodes the stream of the mask image in the PDF document
            </summary>
            <param name="mask">Encoded stream from the PDF document</param>
            <returns>Decoded stream of the image</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.DecodePredictor(System.Int32,System.Int32,System.Int32,System.IO.MemoryStream)">
            <summary>
            Decodes the stream based on the predictor values
            </summary>
            <param name="predictor">Predictor from the decode params</param>
            <param name="colors">Colors from the decode params</param>
            <param name="columns">Columns from the decode params</param>
            <param name="data">Stream the encoded image</param>
            <returns>Decoded stream</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.YCCKtoRGB(System.Byte[])">
            <summary>
            Converts YCCK colorspace to RGB colorspace
            </summary>
            <param name="encodedData">Byte array of YCCK image</param>
            <returns>Byte array of RGB image</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.YCCToRGB(System.Byte[],System.Boolean)">
            <summary>
            Converts YCC colorspace image to RGB image
            </summary>
            <param name="encodedData">Byte array of YCC image</param>
            <returns>Byte array of RGB image</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.RenderRGBPixels(System.Byte[])">
            <summary>
            Render the RGB Pixels from the Image Bytes  
            </summary>
            <param name="encodedData">Image Bytes which converts into Pixels</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.ImageStructureNet.ConvertTifftoPng(System.IO.MemoryStream)">
            <summary>
            Convert TIFF filter image to PNG Stream
            </summary>
            <param name="decodedMemoryStream"></param>
            <returns>Bitmap</returns>
        </member>
        <member name="T:Syncfusion.Pdf.FontStructureHelperBase">
            <exclude/>  
        </member>
        <member name="F:Syncfusion.Pdf.FontStructureHelperNet.m_cffGlyphs">
            <summary>
            Internal variable that holds cff glyphs
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.FontStructureHelperNet.IsHexaDecimalString">
            <summary>
            Gets or sets the value indicating whether the encoded text is hexa decimal string 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.FontStructureHelperNet.FontName">
            <summary>
            Holds the font name associated with the text element
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.FontStructureHelperNet.FontStyle">
            <summary>
            Holds the font style of the text to be decoded.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.FontStructureHelperNet.IsSameFont">
            <summary>
            Gets and sets whether same font is denoted in more than one XObject.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.FontStructureHelperNet.FontEncoding">
            <summary>
            Holds the font encoding associated with the text element
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.Decode(System.String,System.Boolean)">
            <summary>
            Takes in the encoded text, identifies the type of encoding used, decodes the encoded text, returns the decoded text.
            </summary>
            <param name="textToDecode">
            Encoded string from the PDF document.
            </param>
            <param name="isSameFont"></param>
            <returns>
            Decoded string, human readable.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.GetLiteralString(System.String)">
            <summary>
            Decodes the octal text in the encoded text.
            </summary>
            <param name="encodedText">The text encoded from the PDF document</param>
            <returns>Decoded text with replaced octal texts</returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.GetHexaDecimalString(System.String)">
            <summary>
            Decodes the HEX encoded string.
            </summary>
            <param name="hexEncodedText">
            HEX encoded string.
            </param>
            <returns>
            Decoded string.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.GetFontName">
            <summary>
            Extracts the font name associated with the string.
            </summary>
            <returns>
            Font name.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.GetFontStyle">
            <summary>
            Extracts the font style associated with the text string
            </summary>
            <returns>
            Font style.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.GetFontEncoding">
            <summary>
            Extracts the font encoding associated with the text string
            </summary>
            <returns>
            Font style.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.AdobeJapanCidMap(System.IO.StreamReader)">
            <summary>
            Parsing the stream from the Adobe-Japan1-6.cidmap resource to create CIDMapTable
            </summary>
            <param name="reader">CID map table resource</param>
            <returns>Adobe Japan CID map table</returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.AdobeJapanCidMapTableGlyphParser(System.String)">
            <summary>
            Parse the Japanese character where the value is reference to another key in the Adobe Japan Cid Map Table
            </summary>
            <param name="mapValue">mapped value which is a reference to another key</param>
            <returns>Mapped Character present in the Adobe Japan Cid Map table</returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.DecodeASCII85Stream(System.IO.MemoryStream)">
            <summary>
            Decodes the ASCII85 encoded stream
            </summary>
            <param name="encodedStream">Encoded stream</param>
            <returns>Decoded Stream</returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.DecodeFlateStream(System.IO.MemoryStream)">
            <summary>
            Decodes the Flate encoded stream
            </summary>
            <param name="encodedStream">Encoded stream</param>
            <returns>Decoded Stream</returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.GetCharacterMapTable">
            <summary>
            Builds the mapping table that is used to map the decoded text to get the expected text.
            </summary>
            <returns>
            A dictionary with key as the encoded element and value as the value to be mapped to.
            </returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.GetDifferencesDictionary">
            <summary>
            Builds the mapping table that is used to map the decoded text to get the expected text.
            </summary>	
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.GetLatinCharacter(System.String)">
            <summary>
             Gets Latin Character
            </summary>
            <param name="decodedCharacter">The decodedCharacter.</param>        
            <returns>decodedCharacter</returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.GetSpecialCharacter(System.String)">
            <summary>
             Gets Latin Character
            </summary>
            <param name="decodedCharacter">The decodedCharacter.</param>        
            <returns>decodedCharacter</returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.MapCharactersFromTable(System.String)">
            <summary>
            Takes in the decoded text and maps it with its corresponding entry in the CharacterMapTable
            </summary>
            <param name="decodedText">decoded text </param>
            <returns>Expected text string</returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.MapDifferences(System.String)">
            <summary>
            Takes in the decoded text and maps it with its corresponding entry in the CharacterMapTable
            </summary>
            <param name="encodedText">encoded text </param>
            <returns>Expected text string</returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.EscapeSymbols(System.String)">
            <summary>
            Method to remove the new line character
            </summary>
            <param name="text">Text with new line character</param>
            <returns>Text without new line character</returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.GetHexCode(System.String)">
            <summary>
            Organizes the hex string enclosed within the hexa brackets
            </summary>
            <param name="hexCode">Mapping string in the map table of the document</param>
            <returns>list of HEX entries in the string</returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.IsNonPrintableCharacter(System.Char)">
            <summary>
            Checks whether the specified character is Non-Printable character or not.
            </summary>
            <param name="character">The character to be verified as either Non-Printable or not</param>
            <returns>Returns true, if the specified character is Non-Printable character. Otherwise it returns false</returns>
        </member>
        <member name="M:Syncfusion.Pdf.FontStructureHelperNet.Dispose">
            <summary>
            Releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfCompressionExtension.Compress(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.PdfCompressionOptions)">
             <summary>
             Compress PDF documents with compression options applied.
             </summary>
            <example>
            <code lang="CS">
             //Load an existing PDF.
             PdfLoadedDocument loadedDocument = new PdfLoadedDocument(fileName);
             //Create new compression options instance. 
             PdfCompressionOptions options = new PdfCompressionOptions();
             //Set image compression.
             options.CompressImages = true;
             //Set image quality.
             options.ImageQuality = 50;
             //Optimize font.
             options.OptimizeFont = true;
             //Optimize page contents.
             options.OptimizePageContents = true;
             //Remove metadata information.
             options.RemoveMetadata = true;
             //Set compression options.
             loadedDocument.Compress(options);
             //Save the document
             MemoryStream stream = new MemoryStream();
             loadedDocument.Save(stream);
             //close the document
            loadedDocument.Close(true);
            </code>
            <code lang="VB.NET">
            'Load an existing PDF
             Dim loadedDocument As PdfLoadedDocument =  New PdfLoadedDocument(fileName) 
             'Create new compression options instance.
             Dim options As PdfCompressionOptions = New PdfCompressionOptions() 
             'Set image compression.
             options.CompressImages = True
             'Set image quality.
             options.ImageQuality = 50
             'Optimize font.
             options.OptimizeFont = True
             'Optimize page contents.
             options.OptimizePageContents = True
             'Remove metadata information.
             options.RemoveMetadata = True
             'Set compression options.
             loadedDocument.Compress(options)    
             Dim stream As New MemoryStream()
             'Save the document
             loadedDocument.Save(stream)
             'close the document
             loadedDocument.Close(True)        
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Redaction.PdfImageRendererNet">
            <exclude/> 
        </member>
        <member name="M:Syncfusion.Pdf.Redaction.PdfImageRendererNet.SetStrokingColor(Syncfusion.Drawing.Color)">
            <summary>
            Set the Stroking of current graphics state brush
            </summary>
            <param name="color">color value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Redaction.PdfImageRendererNet.SetNonStrokingColor(Syncfusion.Drawing.Color)">
            <summary>
            Set the Non Stroking of current graphics state brush
            </summary>
            <param name="color">color value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Redaction.PdfImageRendererNet.IsValidEmail(System.String)">
            <summary>
            Determining valid email address
            </summary>
            <param name="email">email address to validate</param>
            <returns>true is valid, false if not valid</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Redaction.PdfTextParserNet.GetObject(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Get the object from IPdfPrimitive
            </summary>
            <param name="primitive"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Pdf.Redaction.PdfRedaction">
             <summary>
             Represents a redactor for a loaded page.
             </summary>
             <example>
            <code lang="CS">
             //Load the document.
             PdfLoadedDocument lDoc = new PdfLoadedDocument("input.pdf");
             //Get the first page from the document.
             PdfLoadedPage page = lDoc.Pages[0] as PdfLoadedPage;
             //Create a redaction object
             PdfRedaction redaction = new PdfRedaction(new RectangleF(40, 40, 50, 20));
             //Add redaction object into redaction collection of loaded page
             page.Redactions.Add(redaction);
             //Save and Close the document.
             lDoc.Save("sample.pdf");
             lDoc.Close(true);
             </code>
             <code lang="VB.NET">
             'Load the document.
             Dim lDoc As PdfLoadedDocument = New PdfLoadedDocument("input.pdf")
             //Create a redaction object
             Dim redaction As PdfRedaction = New PdfRedaction(New RectangleF(40, 40, 50, 20))
             //Add redaction object into collection
             page.Redactions.Add(redaction)
             'Save the document.
             lDoc.Save("sample.pdf")
             lDoc.Close(True)
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Pdf.Redaction.PdfRedaction.FillColor">
             <summary>
             Gets or sets the fill color on the redaction bounds (Read only).
             </summary>
             <example>
            <code lang="CS">
             //Load the document.
             PdfLoadedDocument lDoc = new PdfLoadedDocument("input.pdf");
             //Get the first page from the document.
             PdfLoadedPage page = lDoc.Pages[0] as PdfLoadedPage;
             //Create a redaction object
             PdfRedaction redaction = new PdfRedaction(new RectangleF(40, 40, 50, 20));
             //Set fill color for the redaction bounds
             redaction.FillColor = System.Drawing.Color.Green;
             //Add redaction object into redaction collection of loaded page
             page.Redactions.Add(redaction);
             //Save and Close the document.
             lDoc.Save("sample.pdf");
             lDoc.Close(true);
             </code>
             <code lang="VB.NET">
             'Load the document.
             Dim lDoc As PdfLoadedDocument = New PdfLoadedDocument("input.pdf")
             //Create a redaction object
             Dim redaction As PdfRedaction = New PdfRedaction(New RectangleF(40, 40, 50, 20))
             //Set fill color for the redaction bounds
             redaction.FillColor = Color.Green
             //Add redaction object into collection
             page.Redactions.Add(redaction)
             'Save the document.
             lDoc.Save("sample.pdf")
             lDoc.Close(True)
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Pdf.Redaction.PdfRedaction.TextOnly">
             <summary>
             Gets or sets whether only the text within the redaction bounds should be redacted.
             </summary>
             <example>
            <code lang="CS">
             //Load the document.
             PdfLoadedDocument lDoc = new PdfLoadedDocument("input.pdf");
             //Get the first page from the document.
             PdfLoadedPage page = lDoc.Pages[0] as PdfLoadedPage;
             //Create a redaction object
             PdfRedaction redaction = new PdfRedaction(new RectangleF(40, 40, 50, 20));
             //Set to redact text only
             redaction.TextOnly = true;
             //Set fill color for the redaction bounds
             redaction.FillColor = System.Drawing.Color.Green;
             //Add redaction object into redaction collection of loaded page
             page.Redactions.Add(redaction);
             //Save and Close the document.
             lDoc.Save("sample.pdf");
             lDoc.Close(true);
             </code>
             <code lang="VB.NET">
             'Load the document.
             Dim lDoc As PdfLoadedDocument = New PdfLoadedDocument("input.pdf")
             //Create a redaction object
             Dim redaction As PdfRedaction = New PdfRedaction(New RectangleF(40, 40, 50, 20))
             '//Set to redact text only
             redaction.TextOnly = true
             //Set fill color for the redaction bounds
             redaction.FillColor = Color.Green
             //Add redaction object into collection
             page.Redactions.Add(redaction)
             'Save the document.
             lDoc.Save("sample.pdf")
             lDoc.Close(True)
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Pdf.Redaction.PdfRedaction.Appearance">
             <summary>
             Gets or sets the appearance on the redaction bounds (Read only).
             </summary>
             <example>
            <code lang="CS">
             //Load the document.
             PdfLoadedDocument lDoc = new PdfLoadedDocument("input.pdf");
             //Get the first page from the document.
             PdfLoadedPage page = lDoc.Pages[0] as PdfLoadedPage;
             //Create a redaction object
             PdfRedaction redaction = new PdfRedaction(new RectangleF(40, 40, 100, 20));
             //Set appearance on the redaction bounds
             redaction.Appearance.Graphics.DrawString("Redacted", new PdfStandardFont(PdfFontFamily.Helvetica, 10), PdfBrushes.Black, PointF.Empty);
             //Add redaction object into redaction collection of loaded page
             page.Redactions.Add(redaction);
             //Save and Close the document.
             lDoc.Save("sample.pdf");
             lDoc.Close(true);
             </code>
             <code lang="VB.NET">
             'Load the document.
             Dim lDoc As PdfLoadedDocument = New PdfLoadedDocument("input.pdf")
             //Create a redaction object
             Dim redaction As PdfRedaction = New PdfRedaction(New RectangleF(40, 40, 100, 20))
             //Set appearance on the redaction bounds
             redaction.Appearance.Graphics.DrawString("Redacted", New PdfStandardFont(PdfFontFamily.Helvetica, 10), PdfBrushes.Black, PointF.Empty)
             //Add redaction object into collection
             page.Redactions.Add(redaction)
             'Save the document.
             lDoc.Save("sample.pdf")
             lDoc.Close(True)
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Pdf.Redaction.PdfRedaction.#ctor(Syncfusion.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfRedaction"/> class.
            </summary>
            <param name="bounds">The rectangle bounds to be redact.</param>
        </member>
        <member name="M:Syncfusion.Pdf.Redaction.PdfRedaction.#ctor(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfRedaction"/> class.
            </summary>
            <param name="bounds">The rectangle bounds to be redact.</param>
            <param name="fillColor">The fill color on the redaction bounds.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Pdf.Redaction.PdfRedactionResult" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Redaction.PdfRedactionResult.RedactionBounds" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Redaction.PdfRedactionResult.IsRedactionSuccess" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Pdf.Redaction.PdfRedactionResult.PageNumber" -->
        <member name="T:Syncfusion.Pdf.Redaction.PdfRedactionExtension">
            <summary>
            Represents PdfRedactionExtension class
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Redaction.PdfRedactionExtension.m_redactions">
            <summary>
            private variable to store list of redaction objects
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Redaction.PdfRedactionExtension.Redact(Syncfusion.Pdf.Parsing.PdfLoadedDocument)">
            <summary>
            Redact the contents from PDF document. 
            </summary>
            <example>
            <code lang="CS">
            //Load the existing PDF document
            PdfLoadedDocument loadedDocument = new PdfLoadedDocument(docStream);
            //Create a redaction object
            PdfRedaction redaction = new PdfRedaction(new RectangleF(343, 167, 100, 25), Color.Black);
            //Add redaction object into redaction collection of loaded page
            page.AddRedaction(redaction);
            <returns>This method returns a list of redaction results.</returns>
            loadedDocument.Redact();
            //Creating the stream object
            MemoryStream stream = new MemoryStream();
            //Save the document into stream.
            loadedDocument.Save(stream);
            //Close the documents.
            loadedDocument.Close(true);
            </code>
            <code lang="VB.NET">
            'Load the existing PDF document
            Dim loadedDocument As PdfLoadedDocument = New PdfLoadedDocument(docStream)
            'Create a redaction object
            Dim redaction As PdfRedaction = New PdfRedaction(New RectangleF(343, 167, 100, 25), Color.Black)
            'Add redaction object into redaction collection of loaded page
            page.AddRedaction(redaction)
            <returns>'This method returns a list of redaction results.</returns> 
            loadedDocument.Redact()
            'Creating the stream object
            Dim stream As MemoryStream = New MemoryStream()
            'Save the document into stream.
            loadedDocument.Save(stream)
            'Close the document.
            loadedDocument.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Redaction.PdfRedactionExtension.AddRedaction(Syncfusion.Pdf.PdfLoadedPage,Syncfusion.Pdf.Redaction.PdfRedaction)">
            <summary>
            Add redaction to the PDF page. 
            </summary>
            <example>
            <code lang="CS">
            //Load the existing PDF document
            PdfLoadedDocument loadedDocument = new PdfLoadedDocument(docStream);
            //Create a redaction object
            PdfRedaction redaction = new PdfRedaction(new RectangleF(343, 167, 100, 25), Color.Black);
            //Add redaction object into redaction collection of loaded page
            page.AddRedaction(redaction);
            //Redact the contents from PDF document. 
            loadedDocument.Redact();
            //Creating the stream object
            MemoryStream stream = new MemoryStream();
            //Save the document into stream.
            loadedDocument.Save(stream);
            //Close the documents.
            loadedDocument.Close(true);
            </code>
            <code lang="VB.NET">
            'Load the existing PDF document
            Dim loadedDocument As PdfLoadedDocument = New PdfLoadedDocument(docStream)
            'Create a redaction object
            Dim redaction As PdfRedaction = New PdfRedaction(New RectangleF(343, 167, 100, 25), Color.Black)
            'Add redaction object into redaction collection of loaded page
            page.AddRedaction(redaction)
            'Redact the contents from PDF document. 
            loadedDocument.Redact()
            'Creating the stream object
            Dim stream As MemoryStream = New MemoryStream()
            'Save the document into stream.
            loadedDocument.Save(stream)
            'Close the document.
            loadedDocument.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Redaction.PdfRedactionExtension.GetRedactions(Syncfusion.Pdf.PdfLoadedPage)">
            <summary>
            Gets collection of the page redactions. 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfA1BConverter.m_cidByte2Unicode">
            <summary>
            Holds the win-ansi font charcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.PdfA1BConverter.m_charCodeTable">
            <summary>
            WinAnsiEncoding Charcode table
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfA1BConverter.CIDByte2Unicode">
            <summary>
            Gets the CID byte to unicode table.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfA1BConverter.EnsureImageMetadataInfo(Syncfusion.Pdf.Parsing.PdfLoadedDocument)">
            <summary>
            Check and handle Image metadata based on PDF/A conformance standard. 
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfA1BConverter.MapWidthTable(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Mapping complete glyph to width table for inconsistent character width 
            </summary>
            <param name="fontDescriptor"></param>
            <param name="descendantFont"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfA1BConverter.GetCIDByte2Unicode">
            <summary>
            Gets the CID byte to unicode.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PageAnnotation">
            <summary>
            Represents the annotation with associated within a page.
            </summary>
            <exclude/> 
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PageURL">
            <summary>
            Represents the URLS within a page.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PageText">
            <summary>
            Represents the URLS within a page.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.TextMatchRectangle">
            <summary>
            Represents the Rectangle position of the matching text.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.CalGray">
            <exclude/>   
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.CalGray.m_whitePoint">
            <summary>
            Local variable to store the whitepoint value of CalGray colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.CalGray.m_blackPoint">
            <summary>
            Local variable to store the blackpoint value of CalGray colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.CalGray.m_gamma">
            <summary>
            Local variable to store the gamma value of CalGray colorspace.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.CalGray.Components">
            <summary>
            Gets the number of components for the CalGray Colorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.CalGray.WhitePoint">
            <summary>
            Gets or sets the Whitepoint value for the CalGray Colorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.CalGray.BlackPoint">
            <summary>
            Gets or sets the Blackpoint value for the CalGray Colorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.CalGray.Gamma">
            <summary>
            Gets or sets the Gamma value for the CalGray Colorspace. 
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.CalRGB">
            <exclude/>    
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.CalRGB.m_whitePoint">
            <summary>
            Local variable to store the whitepoint value of CalRgb colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.CalRGB.m_blackPoint">
            <summary>
            Local variable to store the blackpoint value of CalRgb colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.CalRGB.m_gamma">
            <summary>
            Local variable to store the gamma value of CalRgb colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.CalRGB.m_matrix">
            <summary>
            Local variable to store the matrix value of CalRgb colorspace.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.CalRGB.Components">
            <summary>
            Gets the number of components for the CalRgb Colorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.CalRGB.WhitePoint">
            <summary>
            Gets or sets the Whitepoint value for the CalRgb Colorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.CalRGB.BlackPoint">
            <summary>
            Gets or sets the Blackpoint value for the CalRgb Colorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.CalRGB.Gamma">
            <summary>
            Gets or sets the Gamma value for the CalRgb Colorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.CalRGB.Matrix">
            <summary>
            Gets or sets the Matrix value for the CalRgb Colorspace. 
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.CIEBasedColorspace">
            <exclude/>   
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.Colorspace">
            <exclude/>   
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.ColorspaceMatrix">
            <exclude/>   
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.DeviceCMYK">
            <exclude/>   
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.DeviceCMYK.Components">
            <summary>
            Gets the number of components for the DeviceCMYK Colorspace. 
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.DeviceGray">
            <exclude/>    
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.DeviceGray.Components">
            <summary>
            Gets the number of components for the DeviceGray Colorspace. 
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.DeviceN">
            <exclude/>   
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.DeviceN.m_alternateColorspace">
            <summary>
            Local variable to store the AlternateColorspace value of DeviceN colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.DeviceN.m_function">
            <summary>
            Local variable to store the function value of DeviceN colorspace.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.DeviceN.Components">
            <summary>
            Gets the number of components for the DeviceN Colorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.DeviceN.AlternateColorspace">
            <summary>
            Gets or set the AlternateColorspace value for DeviceN colorspace 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.DeviceN.Function">
            <summary>
            Gets or set the Function value for DeviceN colorspace 
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.DeviceN.SetValue(Syncfusion.Pdf.Primitives.PdfArray)">
            Set the Colorspace value to local variable from Pdfarray
            <param name="array">ColorspaceArray</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.DeviceN.GetColorspace(Syncfusion.Pdf.Primitives.PdfArray)">
            Get the Colorspace value from Pdfarray
            <param name="array">ColorspaceArray</param>
            <returns>Colorspace</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.DeviceRGB">
            <exclude/>   
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.DeviceRGB.Components">
            <summary>
            Gets the number of components for the DeviceRgb Colorspace. 
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.ICCBased">
            <exclude/>   
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.ICCBased.m_profile">
            <summary>
            Local variable to store the IccProfile value of ICCBased colorspace.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.ICCBased.Profile">
            <summary>
            Gets or sets the IccProfile value for the ICCBased Colorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.ICCBased.Components">
            <summary>
            Gets the Components for the IccBased Alternate Colorspace. 
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.ICCProfile">
            <exclude/>    
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.ICCProfile.m_n">
            <summary>
            Local variable to store the N value of IccProfile.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.ICCProfile.m_alternateColorspace">
            <summary>
            Local variable to store the alternate colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.ICCProfile.m_iccProfileValue">
            <summary>
            Local variable to store the IccProfile value of IccBased colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.ICCProfile.m_alternateColorspaceDictionary">
            <summary>
            Local variable to store the matrix value of CalRgb colorspace.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.ICCProfile.AlternateColorspace">
            <summary>
            Gets the Alternate colorspace of IccBased colorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.ICCProfile.N">
            <summary>
            Gets or sets the N value for the ICCBased Colorspace. 
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.Indexed">
            <exclude/>    
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Indexed.m_baseColorspace">
            <summary>
            Local variable to store the BaseColorspace value of Indexed colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Indexed.m_hiVal">
            <summary>
            Local variable to store the Maximum valid index value of Indexed colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Indexed.m_lookup">
            <summary>
            Local variable to store the Lookup parameter value of Indexed colorspace.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Indexed.Components">
            <summary>
            Gets the number of components for the Indexed Colorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Indexed.DefaultBrush">
            <summary>
            Gets the DefaultBrush value for the Indexed BaseColorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Indexed.BaseColorspace">
            <summary>
            Gets or sets the BaseColorspace value for the Indexed Colorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Indexed.HiVal">
            <summary>
            Gets or sets the Maximum valid index value for the Indexed Colorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Indexed.Lookup">
            <summary>
            Gets or sets the Lookup parameter value for the Indexed Colorspace. 
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Indexed.GetColor(System.Int32)">
            <summary>
            Get the color value of Indexed colorspace
            </summary>
            <param name="index">Index value for color</param>
            <returns>Color</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Indexed.SetValue(Syncfusion.Pdf.Primitives.PdfArray)">
            <summary>
            Set the Indexed colorspace data to local variable
            </summary>
            <param name="array">Index value Array</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Indexed.GetColor(System.String[])">
            <summary>
            Get the Color 
            </summary>
            <param name="pars">Color component</param>
            <returns>Color</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Indexed.GetBaseColorspace(Syncfusion.Pdf.Primitives.PdfArray)">
            <summary>
            Get the Base colorspace of Indexed color space
            </summary>
            <param name="array">Index value Array</param>
            <returns>Colorspace</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Indexed.GetLookupData(Syncfusion.Pdf.Primitives.PdfArray)">
            <summary>
            Get the Lookup data of Indexed colorspace
            </summary>
            <param name="array">Index value Array</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Indexed.GetColorSpace">
            <summary>
            Get the colorspace of Base colorspace
            </summary>
            <returns>Colorspace</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Indexed.GetDecodedStream(Syncfusion.Pdf.Primitives.PdfStream)">
            <summary>
            Get the Decoded stream of Type0 data
            </summary>
            <param name="stream">Type0 stream</param>
            <returns>Decoded Byte</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Indexed.DecodeFlateStream(System.IO.MemoryStream)">
            <summary>
            Decode the FlateDecode stream
            </summary>
            <param name="encodedStream">Type0 encoded stream</param>
            <returns>Memory stream</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.LabColor">
            <exclude/>    
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.LabColor.m_whitePoint">
            <summary>
            Local variable to store the whitepoint value of Labcolorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.LabColor.m_blackPoint">
            <summary>
            Local variable to store the blackpoint value of Labcolorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.LabColor.m_range">
            <summary>
            Local variable to store the range value of Labcolorspace.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.LabColor.Components">
            <summary>
            Gets the number of components for the Labcolorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.LabColor.WhitePoint">
            <summary>
            Gets or sets the Whitepoint value for the Labcolorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.LabColor.BlackPoint">
            <summary>
            Gets or sets the Blackpoint value for the Labcolorspace. 
            </summary> 
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.LabColor.Range">
            <summary>
            Gets or sets the Range value for the Labcolorspace. 
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.LookupParameter">
            <exclude/>    
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.LookupParameter.data">
            <summary>
            Local variable to store the Lookup Data of Indexed colorspace
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.LookupParameter.Data">
            <summary>
            Gets the Lookup Data of Indexed colorspace
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.LookupParameter.Load(Syncfusion.Pdf.Primitives.PdfStream)">
            <summary>
            Load the Lookup stream data of Indexed color space
            </summary>
            <param name="stream">Lookup stream data</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.LookupParameter.Load(Syncfusion.Pdf.Primitives.PdfString)">
            <summary>
            Load the Lookup byte string data of Indexed colorspace
            </summary>
            <param name="str">Byte string</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.LookupParameter.Load(Syncfusion.Pdf.Primitives.PdfReferenceHolder)">
            <summary>
            Load the Lookup data reference of Indexed color space
            </summary>
            <param name="indirectObject">Reference of Lookup data</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.Pattern">
            <exclude/>    
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Pattern.m_patterType">
            <summary>
            Local variable to store the PatternType value of Pattern colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Pattern.m_alternateColorspace">
            <summary>
            Local variable to store the AlternateColorspace value of Pattern colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Pattern.m_patternMatrix">
            <summary>
            Local variable to store the PatternMatrix value of Pattern colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Pattern.m_patternDictioanry">
            <summary>
            Local variable to store the Pattern value of Pattern colorspace.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Pattern.AlternateColorspace">
            <summary>
            Gets or sets the AlternateColorspace value for the Pattern Colorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Pattern.PatternMatrix">
            <summary>
            Gets or sets the PatternMatrix value for the Pattern Colorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Pattern.Type">
            <summary>
            Gets or sets the PatternType value for the Pattern Colorspace. 
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.Separation">
            <exclude/>    
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Separation.m_alternateColorspace">
            <summary>
            Local variable to store the Alternate colorspace value of Seperation colorspace.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Separation.m_function">
            <summary>
            Local variable to store the Function value of Seperation colorspace founction.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Separation.Components">
            <summary>
            Gets the number of components for the Seperation Colorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Separation.AlternateColorspace">
            <summary>
            Gets or sets the Alternate colorspace value for the Seperation Colorspace. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Separation.Function">
            <summary>
            Gets or sets the Function value for the Seperation Colorspace. 
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Separation.GetColor(System.String[])">
            Get the color value from string value
            <param name="pars">string Array</param>
            <returns>Color</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Separation.ToDouble(System.String[])">
            <summary>
            Convert the string array to double array
            </summary>
            <param name="pars">string Array</param>
            <returns>Double array</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Separation.GetColor(System.Byte[],System.Int32)">
            Get the color value from bytes
            <param name="bytes">string Array</param>
            <param name="offset">Offset Value</param>
            <returns>Color</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Separation.SetValue(Syncfusion.Pdf.Primitives.PdfArray)">
            <summary>
            Set the Seperation colorspace data to local variable
            </summary>
            <param name="array">seperation value Array</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Separation.GetColorspace(Syncfusion.Pdf.Primitives.PdfArray)">
            <summary>
            Get the Seperation colorspace Alternate colorspace from array value
            </summary>
            <param name="array">seperation value Array</param>
            <returns>Alternate colorspace</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.DataReader">
            <exclude/> 
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.Function">
            <exclude/> 
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Function.m_domain">
            <summary>
            Local variable to store the Domain value of Function
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Function.m_range">
            <summary>
            Local variable to store the Range value of Function
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Function.m_functionDictionary">
            <summary>
            Local variable to store the dictionary of Function
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Function.Domain">
            <summary>
            Gets or sets the Domain value of Function.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Function.Range">
            <summary>
            Gets or sets the Range value of Function.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Function.CreateFunction(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Create the function type from dictionary 
            </summary>
            <param name="array">Array</param>
            <returns>Function</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Function.ColorTransferFunction(System.Double[])">
            <summary>
            Color transfer function
            </summary>
            <param name="inputValues">Input color component value</param>
            <returns>Double array</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Function.ExtractInputData(System.Double[])">
            <summary>
            Extract the Input Data
            </summary>
            <param name="inputValues">Input data</param>
            <returns>Double array</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Function.ExtractOutputData(System.Double[])">
            <summary>
            Extract the Output Data
            </summary>
            <param name="outputValues">Output data</param>
            <returns>Double array</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Function.FindIntermediateData(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Perform Interpolate function
            </summary>
            <returns>result</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Function.ExtractData(System.Double,System.Double,System.Double)">
            <summary>
            Clip the Data
            </summary>
            <returns>result</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.Type0">
            <exclude/> 
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type0.m_bitsPerSample">
            <summary>
            Local variable to store the BitsPerSample of Type0
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type0.m_order">
            <summary>
            Local variable to store the Order of Type0
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type0.m_size">
            <summary>
            Local variable to store the Size of Type0
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type0.m_encode">
            <summary>
            Local variable to store the Encode value of Type0
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type0.m_decode">
            <summary>
            Local variable to store the Decode value of Type0
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type0.m_sampleValue">
            <summary>
            Local variable to store the sample value of Type0
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type0.outputValuesCount">
            <summary>
            Local variable to store the Output value count of Type0
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type0.m_filter">
            <summary>
            Local variable to store the Filter of Type0 Data
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Type0.BitsPerSample">
            <summary>
            Gets or sets the BitsPerSample value of Type0 function.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Type0.Filter">
            <summary>
            Gets or sets the Filter value of Type0 function.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Type0.Order">
            <summary>
            Gets or sets the Order value of Type0 function.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Type0.Decode">
            <summary>
            Gets or sets the Decode value of Type0 function.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Type0.Encode">
            <summary>
            Gets or sets the Encode value of Type0 function.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Type0.Size">
            <summary>
            Gets or sets the Size value of Type0 function.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Type0.Load(Syncfusion.Pdf.Primitives.PdfStream)">
            <summary>
            Load the Type0 function stream to local variable 
            </summary>
            <param name="stream">Type0 Data</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Type0.PerformFunction(System.Double[])">
            <summary>
            Execute the Type0 function 
            </summary>
            <param name="inputData">Input Data</param>
            <returns>Color values</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Type0.EncodeInputData(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Encode the input data of Type0 
            </summary>
            <returns>EncodedData</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Type0.DecodeOutputData(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Decode the input data of Type0 
            </summary>
            <returns>DecodedData</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Type0.GetIndex(System.Int32[])">
            <summary>
            Get the index of data
            </summary>
            <param name="encodedData">Data</param>
            <returns>Index</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Type0.GetDecodedStream(Syncfusion.Pdf.Primitives.PdfStream)">
            <summary>
            Get the Decoded stream of Type0 data
            </summary>
            <param name="stream">Type0 stream</param>
            <returns>Decoded Byte</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Type0.DecodeFlateStream(System.IO.MemoryStream)">
            <summary>
            Decode the FlateDecode stream
            </summary>
            <param name="encodedStream">Type0 encoded stream</param>
            <returns>Memory stream</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.Type2">
            <exclude/> 
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type2.m_c0">
            <summary>
            Local variable to store the C0 value of Type2 function
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type2.m_c1">
            <summary>
            Local variable to store the C1 value of Type2 function
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type2.m_n">
            <summary>
            Local variable to store the N value of Type2 function
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type2.m_functionResource">
            <summary>
            Local variable to store the Functions resources value of Type2 function
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Type2.FunctionResource">
            <summary>
            Gets or sets the Function resource value of Type2 function.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Type2.C0">
            <summary>
            Gets or sets the C0 value of Type2 function.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Type2.C1">
            <summary>
            Gets or sets the C1 value of Type2 function.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Type2.N">
            <summary>
            Gets or sets the N value of Type2 function.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Type2.ResultantValue">
            <summary>
            Gets the output element length
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Type2.PerformFunction(System.Double[])">
            <summary>
            Perform the Type0 function 
            </summary>
            <param name="inputData">Input Data</param>
            <returns>Color values</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Type2.PerformFunctionSingleValue(System.Double)">
            <summary>
            Perform the Type0 function of Single input data
            </summary>
            <param name="x">Single input data</param>
            <returns>outputData</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Type2.CalculateExponentialInterpolation(System.Double,System.Double,System.Double)">
            <summary>
            Perform the ExponentialInterpolation function 
            </summary>
            <param name="c0">value</param>
            <param name="c1">value</param>
            <param name="x">value</param>
            <returns>result</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.Type3">
            <exclude/> 
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type3.m_encode">
            <summary>
            Local variable to store the Encode value of Type3 function
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type3.m_bounds">
            <summary>
            Local variable to store the Bounds value of Type3 function
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type3.m_pdfFunction">
            <summary>
            Local variable to store the Functions value of Type3 function
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Type3.Encode">
            <summary>
            Gets or sets the Encode value of Type3 function.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Type3.Bounds">
            <summary>
            Gets or sets the Bounds value of Type3 function.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Type3.PdfFunction">
            <summary>
            Gets or sets the Function value of Type4 function.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Type3.PerformFunction(System.Double[])">
            <summary>
            Perform the Type4 function 
            </summary>
            <param name="inputData">Input Data</param>
            <returns>Color values</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.Type4">
            <exclude/> 
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type4.m_stream">
            <summary>
            Local variable to store the Post Script Stream
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type4.m_filter">
            <summary>
            Local variable to store the Filter type of Post Script
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type4.m_stackPointer">
            <summary>
            Stack pointer
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type4.operators">
            <summary>
            List of Post Script Operator
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type4.m_stackValue">
            <summary>
            Stack value of Post Script Data
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type4.m_stackType">
            <summary>
            Operator type array of Post Script Operator
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Parsing.Type4.m_currentType">
            <summary>
            Current operator type value
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Type4.ResultantValue">
            <summary>
            Gets the output element value length
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.Type4.Filter">
            <summary>
            Gets or sets the Filter value of Type4 function stream.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Type4.Load(Syncfusion.Pdf.Primitives.PdfStream)">
            <summary>
            Load the Type4 function stream to local variable 
            </summary>
            <param name="stream">Type4 Data</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Type4.GetDecodedStream(Syncfusion.Pdf.Primitives.PdfStream)">
            <summary>
            Get the Decoded stream of Type4 function
            </summary>
            <param name="stream">Type0 Data</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Type4.PerformFunction(System.Double[])">
            <summary>
            Perform the Type4 function 
            </summary>
            <param name="clippedInputValues">Input Data</param>
            <returns>Color values</returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.Type4.DecodeASCII85Stream(System.IO.MemoryStream)">
            <summary>
            Decodes the ASCII85 encoded stream
            </summary>
            <param name="encodedStream">Encoded stream</param>
            <returns>Decoded Stream</returns>
        </member>
        <member name="T:Syncfusion.Pdf.Parsing.PdfDocumentExtractor">
            <summary>
            The PdfDocumentExtractor class represents a utility class designed to extract images from PDF documents with improved memory consumption and performance.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Parsing.PdfDocumentExtractor.PageCount">
            <summary>
            Gets the number of pages present in the document.
            </summary>
            <example>
            <code lang="C#">
            //Initialize the PDF document extractor
             PdfDocumentExtractor documentExtractor = new PdfDocumentExtractor();
            //Gets the number of pages present in the document
            int pageCount = documentExtractor.PageCount;
            //Loads a PDF document from a Stream.
            documentExtractor.Load(fileStream);
            // Extracts all the images from the PDF document
            Stream[] streams = documentExtractor.ExtractImages();
            //Extracts images from the specified range of pages in the PDF document
            Stream[] stream = documentExtractor.ExtractImages(2, 8);
            // Release all resources used by the PDF document extractor.
            documentExtractor.Dispose();
            </code> 
            <code lang="VB">
            'Initialize the PDF document extractor
            Dim documentExtractor As PdfDocumentExtractor = New PdfDocumentExtractor
            'Gets the number of pages present in the document
            Dim pageCount As Integer = documentExtractor.PageCount
            'Loads a PDF document from a Stream.
            documentExtractor.Load(fileStream)
            ' Extracts all the images from the PDF document
            Dim streams() As Stream = documentExtractor.ExtractImages
            'Extracts images from the specified range of pages in the PDF document
            Dim stream() As Stream = documentExtractor.ExtractImages(2, 8)
            ' Release all resources used by the PDF document extractor.
            documentExtractor.Dispose
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfDocumentExtractor.Load(System.IO.Stream,System.String)">
            <summary>
            Loads a PDF document from a Stream. The method allows you to provide a password as a string parameter to decrypt the document if it is password-protected.
            </summary>
            <param name="stream">The stream containing the PDF document to load</param>
            <param name="password">The password (user or owner) of the encrypted document. </param>
            <example>
            <code lang="C#">
            //Initialize the PDF document extractor
             PdfDocumentExtractor documentExtractor = new PdfDocumentExtractor();
            //Gets the number of pages present in the document
            int pageCount = documentExtractor.PageCount;
            //Loads a PDF document from a Stream.
            documentExtractor.Load(fileStream);
            // Extracts all the images from the PDF document
            Stream[] streams = documentExtractor.ExtractImages();
            //Extracts images from the specified range of pages in the PDF document
            Stream[] stream = documentExtractor.ExtractImages(2, 8);
            // Release all resources used by the PDF document extractor.
            documentExtractor.Dispose();
            </code> 
            <code lang="VB">
            'Initialize the PDF document extractor
            Dim documentExtractor As PdfDocumentExtractor = New PdfDocumentExtractor
            'Gets the number of pages present in the document
            Dim pageCount As Integer = documentExtractor.PageCount
            'Loads a PDF document from a Stream.
            documentExtractor.Load(fileStream)
            ' Extracts all the images from the PDF document
            Dim streams() As Stream = documentExtractor.ExtractImages
            'Extracts images from the specified range of pages in the PDF document
            Dim stream() As Stream = documentExtractor.ExtractImages(2, 8)
            ' Release all resources used by the PDF document extractor.
            documentExtractor.Dispose
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfDocumentExtractor.ExtractImages">
            <summary>
            Extracts all the images from the PDF document and returns an array of Stream objects representing the image data.
            </summary>
            <returns>Returns the array of image streams</returns>
            <example>
            <code lang="C#">
            //Initialize the PDF document extractor
             PdfDocumentExtractor documentExtractor = new PdfDocumentExtractor();
            //Gets the number of pages present in the document
            int pageCount = documentExtractor.PageCount;
            //Loads a PDF document from a Stream.
            documentExtractor.Load(fileStream);
            // Extracts all the images from the PDF document
            Stream[] streams = documentExtractor.ExtractImages();
            //Extracts images from the specified range of pages in the PDF document
            Stream[] stream = documentExtractor.ExtractImages(2, 8);
            // Release all resources used by the PDF document extractor.
            documentExtractor.Dispose();
            </code> 
            <code lang="VB">
            'Initialize the PDF document extractor
            Dim documentExtractor As PdfDocumentExtractor = New PdfDocumentExtractor
            'Gets the number of pages present in the document
            Dim pageCount As Integer = documentExtractor.PageCount
            'Loads a PDF document from a Stream.
            documentExtractor.Load(fileStream)
            ' Extracts all the images from the PDF document
            Dim streams() As Stream = documentExtractor.ExtractImages
            'Extracts images from the specified range of pages in the PDF document
            Dim stream() As Stream = documentExtractor.ExtractImages(2, 8)
            ' Release all resources used by the PDF document extractor.
            documentExtractor.Dispose
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfDocumentExtractor.ExtractImages(System.Int32,System.Int32)">
            <summary>
            Extracts images from the specified range of pages in the PDF document and returns an array of Stream objects representing the image data.
            </summary>
            <param name=" startPageIndex">An integer representing the starting page index from which to extract images. </param>
            <param name=" endPageIndex ">An integer representing the ending page index up to which images should be extracted. </param>
            <returns> Returns the array of image streams </returns>
            <example>
            <code lang="C#">
            //Initialize the PDF document extractor
             PdfDocumentExtractor documentExtractor = new PdfDocumentExtractor();
            //Gets the number of pages present in the document
            int pageCount = documentExtractor.PageCount;
            //Loads a PDF document from a Stream.
            documentExtractor.Load(fileStream);
            // Extracts all the images from the PDF document
            Stream[] streams = documentExtractor.ExtractImages();
            //Extracts images from the specified range of pages in the PDF document
            Stream[] stream = documentExtractor.ExtractImages(2, 8);
            // Release all resources used by the PDF document extractor.
            documentExtractor.Dispose();
            </code> 
            <code lang="VB">
            'Initialize the PDF document extractor
            Dim documentExtractor As PdfDocumentExtractor = New PdfDocumentExtractor
            'Gets the number of pages present in the document
            Dim pageCount As Integer = documentExtractor.PageCount
            'Loads a PDF document from a Stream.
            documentExtractor.Load(fileStream)
            ' Extracts all the images from the PDF document
            Dim streams() As Stream = documentExtractor.ExtractImages
            'Extracts images from the specified range of pages in the PDF document
            Dim stream() As Stream = documentExtractor.ExtractImages(2, 8)
            ' Release all resources used by the PDF document extractor.
            documentExtractor.Dispose
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfDocumentExtractor.Dispose">
            <summary>
            Release all resources used by the PDF document extractor.
            </summary>
            <example>
            <code lang="C#">
            //Initialize the PDF document extractor
             PdfDocumentExtractor documentExtractor = new PdfDocumentExtractor();
            //Gets the number of pages present in the document
            int pageCount = documentExtractor.PageCount;
            //Loads a PDF document from a Stream.
            documentExtractor.Load(fileStream);
            // Extracts all the images from the PDF document
            Stream[] streams = documentExtractor.ExtractImages();
            //Extracts images from the specified range of pages in the PDF document
            Stream[] stream = documentExtractor.ExtractImages(2, 8);
            // Release all resources used by the PDF document extractor.
            documentExtractor.Dispose();
            </code> 
            <code lang="VB">
            'Initialize the PDF document extractor
            Dim documentExtractor As PdfDocumentExtractor = New PdfDocumentExtractor
            'Gets the number of pages present in the document
            Dim pageCount As Integer = documentExtractor.PageCount
            'Loads a PDF document from a Stream.
            documentExtractor.Load(fileStream)
            ' Extracts all the images from the PDF document
            Dim streams() As Stream = documentExtractor.ExtractImages
            'Extracts images from the specified range of pages in the PDF document
            Dim stream() As Stream = documentExtractor.ExtractImages(2, 8)
            ' Release all resources used by the PDF document extractor.
            documentExtractor.Dispose
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfDocumentExtractor.GetResources(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            The GetResources API method retrieves the resources associated with a given PDF dictionary.
            </summary>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfDocumentExtractor.ParseResources(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            The ParseResources API method parses and extracts the resources associated with a given PDF dictionary.
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfDocumentExtractor.ParseTemplate(Syncfusion.Pdf.Primitives.PdfReferenceHolder,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            The ParseTemplate API method parses and extracts the content of a PDF template.
            </summary>
            <param name="reference"></param>
            <param name="xObjectChildItem"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfDocumentExtractor.ParseImage(Syncfusion.Pdf.Primitives.PdfReferenceHolder,Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            The ParseImage API method parses and extracts the content of a PDF image
            </summary>
            <param name="reference"></param>
            <param name="xObjectChildItem"></param>
        </member>
        <member name="M:Syncfusion.Pdf.Parsing.PdfDocumentExtractor.UpdateSMaskReference(System.Collections.Generic.Dictionary{Syncfusion.Pdf.Primitives.PdfName,Syncfusion.Pdf.Primitives.IPdfPrimitive})">
            <summary>
            Updating SMask image reference by parsing xObject dictionary
            </summary>
            <param name="xObjectChilds"></param>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfEan8BarcodeHelper">
            <summary>
            Represents the PdfEan8 barcode.
            </summary>
            <example>
            <code lang = "CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfEan8Barcode.
            PdfEan8Barcode barcode = new PdfEan8Barcode();
            //Set the barcode text.
            barcode.Text = "1234567";
            barcode.Location = new PointF(100,100);
            //Draw a barcode in the new Page.
            barcode.Draw(page);
            //Save the  document to disk.
            document.Save("Ean8Barcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfEan8Barcode.
            Dim barcode As PdfEan8Barcode = New PdfEan8Barcode()
            'Set the barcode text.
            barcode.Text = "1234567"
            barcode.Location = new PointF(100,100);
            'Draw a barcode in the new Page.
            barcode.Draw(page)
            'Save the  document to disk.
            document.Save("Ean8Barcode.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfEan8BarcodeHelper.m_barcode">
            <summary>
            Holds the barcode Information.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfEan8BarcodeHelper.#ctor(Syncfusion.Pdf.Barcode.PdfEan8Barcode)">
            <summary>
            Initializes the new instance of <see cref="T:Syncfusion.Pdf.Barcode.PdfEan8BarcodeHelper"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfEan8BarcodeHelper.ToImage">
            <summary>
            Generates an image for the barcode and returns it as a stream of data.
            <returns>A stream containing the generated barcode image. </returns>
            </summary>
            <example>
            <code lang = "CS">
            //Creates a new PdfEan8Barcode.
            PdfEan8Barcode barcode = new PdfEan8Barcode();
            //Set the barcode text.
            barcode.Text = "1234567";
            //Get the image for PdfEan8Barcode.
            Image image= barcode.ToImage();
            //Save the image into Disk
            image.Save("PdfEan8.png", ImageFormat.Png);
            </code>
            <code lang="VB">
            'Creates a new PdfEan8Barcode.
            Dim barcode As PdfEan8Barcode = New PdfEan8Barcode()
            'Set the barcode text.
            barcode.Text = "1234567"
            'Get the image for PdfEan8Barcode.
            Dim image As Image = barcode.ToImage()
            'Save the image into Disk
            image.Save("PdfEan8.png", ImageFormat.Png)
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.Barcode.PdfEan8BarcodeHelper.ToImage(Syncfusion.Drawing.SizeF)" -->
        <member name="M:Syncfusion.Pdf.Barcode.PdfEan8BarcodeHelper.GetEncoding">
            <summary>
            Encode the raw data using the EAN-8 algorithm.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfEan13BarcodeHelper">
            <summary>
            Represents the PdfEan13 barcode.
            </summary>
            <example>
            <code lang = "CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new PdfEan13Barcode.
            PdfEan13Barcode barcode = new PdfEan13Barcode();
            //Set the barcode text.
            barcode.Text = "4006381333931";
            barcode.Location = new PointF(100,100);
            //Draw a barcode in the new Page.
            barcode.Draw(page);
            //Save the  document to disk.
            document.Save("Ean13Barcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new PdfEan13Barcode.
            Dim barcode As PdfEan13Barcode = New PdfEan13Barcode()
            'Set the barcode text.
            barcode.Text = "4006381333931"
            barcode.Location = new PointF(100,100);
            'Draw a barcode in the new Page.
            barcode.Draw(page)
            'Save the  document to disk.
            document.Save("Ean13Barcode.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfEan13BarcodeHelper.m_barcode">
            <summary>
            Holds the barcode Information.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfEan13BarcodeHelper.#ctor(Syncfusion.Pdf.Barcode.PdfEan13Barcode)">
            <summary>
            Initializes the new instance of <see cref="T:Syncfusion.Pdf.Barcode.PdfEan13BarcodeHelper"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfEan13BarcodeHelper.ToImage">
            <summary>
            Generates an image for the barcode and returns it as a stream of data.
            <returns>A stream containing the generated barcode image. </returns>
            </summary>
            <example>
            <code lang = "CS">
            //Creates a new PdfEan13Barcode.
            PdfEan13Barcode barcode = new PdfEan13Barcode();
            //Set the barcode text.
            barcode.Text = "4006381333931";
            //Get the image for PdfEan13Barcode.
            Image image= barcode.ToImage();
            //Save the image into Disk
            image.Save("PdfEan13.png", ImageFormat.Png);
            </code>
            <code lang="VB">
            'Creates a new PdfEan13Barcode.
            Dim barcode As PdfEan13Barcode = New PdfEan13Barcode()
            'Set the barcode text.
            barcode.Text = "4006381333931"
            'Get the image for PdfEan13Barcode.
            Dim image As Image = barcode.ToImage()
            'Save the image into Disk
            image.Save("PdfEan13.png", ImageFormat.Png)
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.Barcode.PdfEan13BarcodeHelper.ToImage(Syncfusion.Drawing.SizeF)" -->
        <member name="T:Syncfusion.Pdf.Barcode.Pdf417BarcodeHelper">
            <summary>
            Represents the Pdf417 barcode.
            </summary>
            <example>
            <code lang = "CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Creates a new Pdf417Barcode.
            Pdf417Barcode pdf417Barcode = new Pdf417Barcode();
            //Set the barcode text.
            pdf417Barcode.Text = "012345678";
            pdf417Barcode.Location = new PointF(100,100);
            //Draw a barcode in the new Page.
            pdf417Barcode.Draw(page);
            //Save the  document to disk.
            document.Save("417Barcode.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new Pdf417Barcode.
            Dim pdf417Barcode As Pdf417Barcode = New Pdf417Barcode()
            'Set the barcode text.
            pdf417Barcode.Text = "012345678"
            pdf417Barcode.Location = new PointF(100,100);
            'Draw a barcode in the new Page.
            pdf417Barcode.Draw(page)
            'Save the  document to disk.
            document.Save("417Barcode.pdf")
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.Pdf417BarcodeHelper.m_barcode">
            <summary>
            Holds the barcode Information.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.Pdf417BarcodeHelper.Size">
            <summary>
            Gets or set the size of the barcode.
            </summary>      
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.Pdf417BarcodeHelper.ErrorCorrectionLevel">
            <summary>
            Gets or sets the error correction level.
            </summary>
            <example>
            <code lang="CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new Pdf417Barcode.
            Pdf417Barcode pdf417Barcode = new Pdf417Barcode();
            //Set text.
            pdf417Barcode.Text = "012345678";
            //Set barcode size.
            pdf417Barcode.Size = new SizeF(200, 200);
            //Set the error correction level.
            pdf417Barcode.ErrorCorrectionLevel = Pdf417ErrorCorrectionLevel.Auto;
            //Set the dimention of the barcode.
            pdf417Barcode.XDimension = 3;
            //Set the barcode location.
            pdf417Barcode.Location = new PointF(100, 100);
            //Draw the barcode to PDF page.
            pdf417Barcode.Draw(page);
            //Save document to disk.
            document.Save("output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Creates a new Pdf417Barcode.
            Dim pdf417Barcode As New Pdf417Barcode()
            'Set text.
            pdf417Barcode.Text = "012345678"
            'Set barcode size.
            pdf417Barcode.Size = New SizeF(200, 200)
            'Set the error correction level.
            pdf417Barcode.ErrorCorrectionLevel = PdfErrorCorrectionLevel.High
            'Set the dimention of the barcode.
            pdf417Barcode.XDimension = 5
            'Set the barcode location.
            pdf417Barcode.Location = New PointF(100, 100)
            'Draw the barcode to PDF page.
            pdf417Barcode.Draw(page)
            'Save document to disk.
            document.Save("output.pdf")
            'Close the document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.Pdf417BarcodeHelper.ToImage">
            <summary>
            Generates an image for the barcode and returns it as a stream of data.
            <returns>A stream containing the generated barcode image. </returns>
            </summary>
            <example>
            <code lang = "CS">
            //Creates a new Pdf417Barcode.
            Pdf417Barcode pdf417Barcode = new Pdf417Barcode();
            //Set the barcode text.
            pdf417Barcode.Text = "012345678";
            //Get the image for Pdf417Barcode.
            Image image= pdf417Barcode.ToImage();
            //Save the image into Disk
            image.Save("Pdf417.png", ImageFormat.Png);
            </code>
            <code lang="VB">
            'Creates a new Pdf417Barcode.
            Dim pdf417Barcode As Pdf417Barcode = New Pdf417Barcode()
            'Set the barcode text.
            pdf417Barcode.Text = "012345678"
            'Get the image for Pdf417Barcode.
            Dim image As Image = pdf417Barcode.ToImage()
            'Save the image into Disk
            image.Save("Pdf417.png", ImageFormat.Png)
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.Barcode.Pdf417BarcodeHelper.ToImage(Syncfusion.Drawing.SizeF)" -->
        <member name="F:Syncfusion.Pdf.Barcode.PdfDataMatricBarcodeHelper.m_barcode">
            <summary>
            Holds the encoding.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatricBarcodeHelper.#ctor(Syncfusion.Pdf.Barcode.PdfDataMatrixBarcode)">
            <summary>
            Initialize a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfDataMatricBarcodeHelper"/> class. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.Barcode.PdfDataMatricBarcodeHelper.FindDataMatrixSize(System.Int32,System.Int32)" -->
        <member name="M:Syncfusion.Pdf.Barcode.PdfDataMatricBarcodeHelper.ToImage(Syncfusion.Drawing.SizeF)">
            <summary>
            Generates an image for the barcode with the specified size and returns it as a stream of data.
            </summary>
            <param name="size"> The size of the image to generate. </param>
            <returns>A stream containing the generated barcode image. </returns>
            <example>
            <code lang="C#">
            PdfDataMatrixBarcode datamatrix = new PdfDataMatrixBarcode();
            //Sets the barcode text.
            datamatrix.Text = "Test";            
            //Set the dimention of the barcode.
            datamatrix.XDimension = 5;
            //Set the barcode location.
            datamatrix.Location = new PointF(100, 100);
            //Get the barcode as image.
            Stream img = datamatrix.ToImage(new SizeF(200,200));
            </code>
            <code lang="VB">
            'Creates a new PDF datamatrix barcode.
            Dim datamatrix As New PdfDataMatrixBarcode()
            'Sets the barcode text.
            datamatrix.Text = "Test"
            'Set the dimention of the barcode.
            datamatrix.XDimension = 5
            'Set the barcode location.
            datamatrix.Location = New PointF(100, 100)
            'Get the barcode as image.
            Dim img As Stream = datamatrix.ToImage(New SizeF(200,200))
            </code> 
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Barcode.PdfDataMatrixSymbolAttribute">
            <summary>
            Symbol attribute structure for the DataMatrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfQRBarcodeHelper.m_barcode">
            <summary>
            Holds the barcode Information.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfQRBarcodeHelper.#ctor(Syncfusion.Pdf.Barcode.PdfQRBarcode)">
            <summary>
            Initialize a new instance of the <see cref="T:Syncfusion.Pdf.Barcode.PdfQRBarcodeHelper"/> class. 
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfQRBarcodeHelper.Size">
            <summary>
            Gets or set the size of the barcode.
            </summary>      
        </member>
        <member name="P:Syncfusion.Pdf.Barcode.PdfQRBarcodeHelper.Logo">
            <summary>
            Gets or sets the logo image that will be displayed in the center of the QR barcode.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Creates a new PDF QR barcode.
            PdfQRBarcode qrBarcode = new PdfQRBarcode();
            //Set text.
            qrBarcode.Text = "012345678";
            //Set barcode size.
            qrBarcode.Size = new SizeF(200, 200);
            //Set the logo image to QR barcode. 
            FileStream imageStream = new FileStream("logo.png", FileMode.Open, FileAccess.Read);
            //Create QR Barcode logo.
            QRCodeLogo qRCodeLogo = new QRCodeLogo(imageStream);
            //Set the QR barcode logo.
            qrBarcode.Logo = qRCodeLogo;
            //Set the dimention of the barcode.
            qrBarcode.XDimension = 5;
            //Set the barcode location.
            qrBarcode.Location = new PointF(100, 100);
            //Draw the barcode to PDF page.
            qrBarcode.Draw(page);
            //Save document to disk.
            document.Save("output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Pdf.Barcode.PdfQRBarcodeHelper.ToImage(Syncfusion.Drawing.SizeF)" -->
        <member name="T:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcodeHelper">
            <summary>
            Represents the Base class for all the Single dimensional barcodes
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcodeHelper.UpcBarWidth">
            <summary>
            Default bar width value.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcodeHelper.barcodeSpaceCount">
            <summary>
            Space count for barcode
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcodeHelper.m_barcode">
            <summary>
            Hold the barcode details
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcodeHelper.#ctor(Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode)">
            <summary>
            Initializes the new instance of <see cref="T:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcodeHelper"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcodeHelper.ToImage">
            <summary>
            Generates an image for the barcode and returns it as a stream of data.
            <returns>A stream containing the generated barcode image. </returns>       
            </summary>
            <example>
            <code lang = "C#">
            //Creates a new PdfCode11Barcode.
            PdfCode11Barcode code11 = new PdfCode11Barcode();
            //Set the barcode text.
            code11.Text = "012345678";
            //Get the image for Code32 Barcode.
            Image image= code32.ToImage();
            //Save the image into Disk
            image.Save("Code32.png", ImageFormat.Png);
            </code>
            <code lang="VB">
            'Creates a new PdfCode11Barcode.
            Dim code11 As PdfCode11Barcode = New PdfCode11Barcode()
            'Set the barcode text.
            code11.Text = "012345678"
            'Get the image for Code32 Barcode.
            Image image= code32.ToImage()
            'Save the image into Disk
            image.Save("Code32.png", ImageFormat.Png)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcodeHelper.ToImage(Syncfusion.Drawing.SizeF)">
            <summary>
            Generates an image for the barcode with the specified size and returns it as a stream of data.
            </summary>
            <param name="size"> The size of the image to generate. </param>
            <returns>A stream containing the generated barcode image. </returns>
            <example>
            <code lang = "C#">
            //Creates a new PdfCode11Barcode.
            PdfCode11Barcode code11 = new PdfCode11Barcode();
            //Set the barcode text.
            code11.Text = "012345678";
            //Get the image for Code32 Barcode.
            Image image= code32.ToImage(new SizeF(200,200));
            //Save the image into Disk
            image.Save("Code32.png", ImageFormat.Png);
            </code>
            <code lang="VB">
            'Creates a new PdfCode11Barcode.
            Dim code11 As PdfCode11Barcode = New PdfCode11Barcode()
            'Set the barcode text.
            code11.Text = "012345678"
            'Get the image for Code32 Barcode.
            Image image= code32.ToImage(New SizeF(200,200))
            'Save the image into Disk
            image.Save("Code32.png", ImageFormat.Png)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcodeHelper.PaintToImage(Syncfusion.Pdf.Graphics.GraphicsHelper@,Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Barcode.PdfUnidimensionalBarcode)">
            <summary>
            Internal method used to paint bars on the image.
            </summary>
            <param name="g">The graphics to draw.</param>
            <param name="barRect">The Rectangle.</param>
            <returns>Returns the right margin.</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PageResourceLoader.GetPageResources(Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Extracts the pageResource from the page
            </summary>
            <param name="page">Page whose resouce is needed</param>
            <returns>pageResource of the given page</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PageResourceLoader.GetExtendedGraphicResources(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Collects all the ExtendedGraphicsSatate elements in the pdf document
            </summary>
            <param name="resourceDictionary">containing all the resources of the document</param>
            <returns>dictionary of ExtGState elements</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PageResourceLoader.GetFontResources(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Collects all the fonts in the page in a dictionary
            </summary>
            <param name="resourceDictionary">dictionary containing all the resources in the Xobjects</param>
            <returns>dictionary containing font name and the font</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PageResourceLoader.GetFontResources(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Collects all the fonts in the page in a dictionary
            </summary>
            <param name="resourceDictionary">dictionary containing all the resources in the page</param>
            <param name="page">page in which text is to be extracted</param>
            <returns>dictionary containing font name and the font</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PageResourceLoader.GetImageResources(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.PdfPageBase,System.Collections.Generic.Dictionary{System.String,Syncfusion.Pdf.IO.PdfMatrix}@)">
            <summary>
            Collects all the images in the pdf document
            </summary>
            <param name="resourceDictionary">containing all the resources of the document</param>
            <returns>dictionary of images</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PageResourceLoader.UpdatePageResources(Syncfusion.Pdf.PdfPageResourcesHelper,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates the resources in the page
            </summary>
            <param name="pageResources">Existing page resources</param>
            <param name="objects">Dictionary items to the updated</param>
            <returns>Updated page resource</returns>
        </member>
        <member name="T:Syncfusion.Pdf.PdfPageResourcesHelper">
            <summary>
            The class provides methods and properties to access the PDF page resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageResourcesHelper.Resources">
            <summary>
            Gets the PDF page resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfPageResourcesHelper.Item(System.String)">
            <summary>
            Gets or sets the value associated with the key.
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageResourcesHelper.isSameFont">
            <summary>
            Returns if the FontCollection has same font face.
            </summary>
            <returns>if font present true, else false</returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageResourcesHelper.#ctor">
            <summary>
            Initializes the new instance of the class <see cref="T:Syncfusion.Pdf.PdfPageResources"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageResourcesHelper.Add(System.String,System.Object)">
            <summary>
            Adds the resource with the specified name.
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="resource">Resource to add</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfPageResourcesHelper.ContainsKey(System.String)">
            <summary>
            Returns if the key already exists.
            </summary>
            <returns>if key present true,else false</returns>
        </member>
        <member name="T:Syncfusion.Pdf.PdfCompressionOptions">
            <summary>
            Represents the compression options of the loaded document.
            </summary>
            <remarks>
            To know more about refer this <see href="https://help.syncfusion.com/file-formats/pdf/working-with-compression">link </see>.
            </remarks>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument ldoc = new PdfLoadedDocument("input.pdf");
            //Initialize new instance of PdfCompressionOptions class.
            PdfCompressionOptions options = new PdfCompressionOptions();
            //set the compress images based on the image quality. 
            options.CompressImages = true;
            //set the image quality.
            options.ImageQuality = 50;
            //set the optimize font.
            options.OptimizeFont = true;
            //set the optimize page contents.
            options.OptimizePageContents = true;
            //set the remove metadata informations.
            options.RemoveMetadata = true;
            ldoc.CompressionOptions = options;
            //Save and close the document.
            ldoc.Save("Output.pdf");
            ldoc.Close(true);
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim ldoc As PdfLoadedDocument = New PdfLoadedDocument("input.pdf")
            'Initialize new instance of PdfCompressionOptions class.
            Dim options As PdfCompressionOptions = New PdfCompressionOptions()
            'set the compress images based on the image quality. 
            options.CompressImages = True
            'set the image quality.
            options.ImageQuality = 50
            'set the optimize font.
            options.OptimizeFont = True
            'set the optimize page contents.
            options.OptimizePageContents = True
            'set the remove metadata informations.
            options.RemoveMetadata = True
            ldoc.CompressionOptions = options
            'Save and Close the document.
            ldoc.Save("Output.pdf")
            ldoc.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCompressionOptions.m_removeMetadata">
            <summary>
            Indicates whether remove metadata.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCompressionOptions.m_compressImages">
            <summary>
            Indicates compress the image objects based on the image quality.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCompressionOptions.m_imageQuality">
            <summary>
            Represents the image quality.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCompressionOptions.m_optimizePageContents">
            <summary>
            Indicates optimize the page content streams.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfCompressionOptions.m_optimizeFont">
            <summary>
            Indicates optimize the font data.
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCompressionOptions.RemoveMetadata">
            <summary>
            Gets or sets whether to remove metadata information.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument ldoc = new PdfLoadedDocument("input.pdf");
            //Initialize new instance of PdfCompressionOptions class.
            PdfCompressionOptions options = new PdfCompressionOptions();
            //set the compress images based on the image quality. 
            options.CompressImages = true;
            //set the image quality.
            options.ImageQuality = 50;
            //set the optimize font.
            options.OptimizeFont = true;
            //set the optimize page contents.
            options.OptimizePageContents = true;
            //set the remove metadata informations.
            options.RemoveMetadata = true;
            ldoc.CompressionOptions = options;
            //Save and close the document.
            ldoc.Save("Output.pdf");
            ldoc.Close(true);
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim ldoc As PdfLoadedDocument = New PdfLoadedDocument("input.pdf")
            'Initialize new instance of PdfCompressionOptions class.
            Dim options As PdfCompressionOptions = New PdfCompressionOptions()
            'set the compress images based on the image quality. 
            options.CompressImages = True
            'set the image quality.
            options.ImageQuality = 50
            'set the optimize font.
            options.OptimizeFont = True
            'set the optimize page contents.
            options.OptimizePageContents = True
            'set the remove metadata informations.
            options.RemoveMetadata = True
            ldoc.CompressionOptions = options
            'Save and Close the document.
            ldoc.Save("Output.pdf")
            ldoc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Pdf.PdfCompressionOptions.CompressImages">
            <summary>
            Gets or sets whether to compress images based on the image quality.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument ldoc = new PdfLoadedDocument("input.pdf");
            //Initialize new instance of PdfCompressionOptions class.
            PdfCompressionOptions options = new PdfCompressionOptions();
            //set the compress images based on the image quality. 
            options.CompressImages = true;
            //set the image quality.
            options.ImageQuality = 50;
            //set the optimize font.
            options.OptimizeFont = true;
            //set the optimize page contents.
            options.OptimizePageContents = true;
            //set the remove metadata informations.
            options.RemoveMetadata = true;
            ldoc.CompressionOptions = options;
            //Save and close the document.
            ldoc.Save("Output.pdf");
            ldoc.Close(true);
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim ldoc As PdfLoadedDocument = New PdfLoadedDocument("input.pdf")
            'Initialize new instance of PdfCompressionOptions class.
            Dim options As PdfCompressionOptions = New PdfCompressionOptions()
            'set the compress images based on the image quality. 
            options.CompressImages = True
            'set the image quality.
            options.ImageQuality = 50
            'set the optimize font.
            options.OptimizeFont = True
            'set the optimize page contents.
            options.OptimizePageContents = True
            'set the remove metadata informations.
            options.RemoveMetadata = True
            ldoc.CompressionOptions = options
            'Save and Close the document.
            ldoc.Save("Output.pdf")
            ldoc.Close(True)
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.PdfCompressionOptions.ImageQuality">
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument ldoc = new PdfLoadedDocument("input.pdf");
            //Initialize new instance of PdfCompressionOptions class.
            PdfCompressionOptions options = new PdfCompressionOptions();
            //set the compress images based on the image quality. 
            options.CompressImages = true;
            //set the image quality.
            options.ImageQuality = 50;
            //set the optimize font.
            options.OptimizeFont = true;
            //set the optimize page contents.
            options.OptimizePageContents = true;
            //set the remove metadata informations.
            options.RemoveMetadata = true;
            ldoc.CompressionOptions = options;
            //Save and close the document.
            ldoc.Save("Output.pdf");
            ldoc.Close(true);
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim ldoc As PdfLoadedDocument = New PdfLoadedDocument("input.pdf")
            'Initialize new instance of PdfCompressionOptions class.
            Dim options As PdfCompressionOptions = New PdfCompressionOptions()
            'set the compress images based on the image quality. 
            options.CompressImages = True
            'set the image quality.
            options.ImageQuality = 50
            'set the optimize font.
            options.OptimizeFont = True
            'set the optimize page contents.
            options.OptimizePageContents = True
            'set the remove metadata informations.
            options.RemoveMetadata = True
            ldoc.CompressionOptions = options
            'Save and Close the document.
            ldoc.Save("Output.pdf")
            ldoc.Close(True)
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.PdfCompressionOptions.OptimizePageContents">
            <summary>
            Gets or sets whether to optimize page contents.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument ldoc = new PdfLoadedDocument("input.pdf");
            //Initialize new instance of PdfCompressionOptions class.
            PdfCompressionOptions options = new PdfCompressionOptions();
            //set the compress images based on the image quality. 
            options.CompressImages = true;
            //set the image quality.
            options.ImageQuality = 50;
            //set the optimize font.
            options.OptimizeFont = true;
            //set the optimize page contents.
            options.OptimizePageContents = true;
            //set the remove metadata informations.
            options.RemoveMetadata = true;
            ldoc.CompressionOptions = options;
            //Save and close the document.
            ldoc.Save("Output.pdf");
            ldoc.Close(true);
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim ldoc As PdfLoadedDocument = New PdfLoadedDocument("input.pdf")
            'Initialize new instance of PdfCompressionOptions class.
            Dim options As PdfCompressionOptions = New PdfCompressionOptions()
            'set the compress images based on the image quality. 
            options.CompressImages = True
            'set the image quality.
            options.ImageQuality = 50
            'set the optimize font.
            options.OptimizeFont = True
            'set the optimize page contents.
            options.OptimizePageContents = True
            'set the remove metadata informations.
            options.RemoveMetadata = True
            ldoc.CompressionOptions = options
            'Save and Close the document.
            ldoc.Save("Output.pdf")
            ldoc.Close(True)
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Pdf.PdfCompressionOptions.OptimizeFont">
            <summary>
            Gets or sets whether to optimize font data.
            </summary>
            <example>
            <code lang="C#">
            //Load an existing document.
            PdfLoadedDocument ldoc = new PdfLoadedDocument("input.pdf");
            //Initialize new instance of PdfCompressionOptions class.
            PdfCompressionOptions options = new PdfCompressionOptions();
            //set the compress images based on the image quality. 
            options.CompressImages = true;
            //set the image quality.
            options.ImageQuality = 50;
            //set the optimize font.
            options.OptimizeFont = true;
            //set the optimize page contents.
            options.OptimizePageContents = true;
            //set the remove metadata informations.
            options.RemoveMetadata = true;
            ldoc.CompressionOptions = options;
            //Save and close the document.
            ldoc.Save("Output.pdf");
            ldoc.Close(true);
            </code>
            <code lang="VB">
            'Load an existing document.
            Dim ldoc As PdfLoadedDocument = New PdfLoadedDocument("input.pdf")
            'Initialize new instance of PdfCompressionOptions class.
            Dim options As PdfCompressionOptions = New PdfCompressionOptions()
            'set the compress images based on the image quality. 
            options.CompressImages = True
            'set the image quality.
            options.ImageQuality = 50
            'set the optimize font.
            options.OptimizeFont = True
            'set the optimize page contents.
            options.OptimizePageContents = True
            'set the remove metadata informations.
            options.RemoveMetadata = True
            ldoc.CompressionOptions = options
            'Save and Close the document.
            ldoc.Save("Output.pdf")
            ldoc.Close(True)
            </code>
            </example> 
        </member>
        <member name="T:Syncfusion.Pdf.PdfOptimizer">
            <summary>
            Represernts the PDF optimizer.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfOptimizer.m_options">
            <summary>
            Indicates the optimization options.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfOptimizer.m_fontReferenceCollection">
            <summary>
            Indicates the font references.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfOptimizer.m_imageReferenceCollecction">
            <summary>
            Indicates the image references.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfOptimizer.TtTableList">
            <summary>
            Indicates the TTF font common table list
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfOptimizer.m_usedFontList">
            <summary>
            Collection holds used fonts in a page 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.PdfOptimizer.m_resourceCollection">
            <summary>
            The variable used to store the Optimized dictionary collection 
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.#ctor(Syncfusion.Pdf.Parsing.PdfLoadedDocument,Syncfusion.Pdf.PdfCompressionOptions)">
            <summary>
            Initialize the new instance of the <see cref="T:Syncfusion.Pdf.PdfOptimizer"/> class with input file name.
            </summary>
            <param name="fileName">Input file name.</param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.Optimize(Syncfusion.Pdf.Parsing.PdfLoadedDocument)">
            <summary>
            Optimize the PDF document
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.Close">
            <summary>
            Close the optimizer
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.OptimizeAnnotations(Syncfusion.Pdf.PdfLoadedPage)">
            <summary>
            Optimze the annotations content streams.
            </summary>
            <param name="lPage"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.FindIdenticalResoucres(Syncfusion.Pdf.Parsing.PdfLoadedDocument)">
            <summary>
            Check page resoucres contains identical resoucres
            </summary>
            <param name="pdfLoaded"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.OptimizeApperance(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            optimize the Apperance dictionary.
            </summary>
            <param name="widgetDictionary"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.OptimizePageResources(Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Optimize the page resources (font, image, xobject contents).
            </summary>
            <param name="lPage"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.OptimizePageContent(Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Optimize the page content.
            </summary>
            <param name="lPage"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.OptimizeContent(Syncfusion.Pdf.Primitives.PdfStream,System.Boolean)">
            <summary>
            Optimize the content stream.
            </summary>
            <param name="contentStream"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.TrimOperand(System.String)">
            <summary>
            Trim the operand if contains .00
            </summary>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.RemoveMetaData(Syncfusion.Pdf.PdfCatalog)">
            <summary>
            Remove the meta data entry
            </summary>
            <param name="catalog"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.OptimizeResources(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Optimize all the PDF resources
            </summary>
            <param name="resource"></param>
            <param name="lPage"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.OptimizeFont(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.PdfPageBase)">
            <summary>
            Optimize the font data
            </summary>
            <param name="resource"></param>
            <param name="lPage"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.OptimizeXObect(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.PdfPageBase)">
            <summary>
            optimize the image
            </summary>
            <param name="resource"></param>
            <param name="lPage"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.UpdateFontStream(System.String,Syncfusion.Pdf.Primitives.PdfReferenceHolder,Syncfusion.Pdf.Graphics.TtfReader)">
            <summary>
            Create a font stream by using used characters
            </summary>
            <param name="fontKey"></param>
            <param name="fontList"></param>
            <param name="ttfReader"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.AddUsedFontText(System.String,Syncfusion.Pdf.PdfRecord)">
            <summary>
            Add font used text in a collection
            </summary>
            <param name="currentFont"></param>
            <param name="record"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.ImageInterpolated(Syncfusion.Pdf.Primitives.PdfDictionary)">
            <summary>
            Get the image interpolation.
            </summary>
            <param name="imageDictionary"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.OptimizeTrueTypeFont(Syncfusion.Pdf.FontFile2)">
            <summary>
            Optimize the PDF true type font
            </summary>
            <param name="f2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.OptimizeType0Font(System.String,Syncfusion.Pdf.FontFile2,Syncfusion.Pdf.Primitives.PdfStream,Syncfusion.Pdf.Primitives.PdfReferenceHolder)">
            <summary>
            optimize the type 0 font
            </summary>
            <param name="ff2"></param>
            <param name="fontFile2"></param>
            <param name="fontList"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.GetLocalTableGlyph(Syncfusion.Pdf.Primitives.PdfReferenceHolder,Syncfusion.Pdf.Graphics.TtfReader,System.Int32@)">
            <summary>
            Get the local table last index
            </summary>
            <param name="fontList"></param>
            <param name="ttfReader"></param>
            <param name="missedGlyphs"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.OptimizeType0Font(System.IO.MemoryStream,System.Collections.Generic.Dictionary{System.Char,System.Char})">
            <summary>
            Optimize type0 font
            </summary>
            <param name="fontData"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.UpdateFontData(System.IO.MemoryStream,Syncfusion.Pdf.Primitives.PdfStream)">
            <summary>
            Update the existing font data
            </summary>
            <param name="fontStream"></param>
            <param name="fontFile2"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.ResetFontTables(Syncfusion.Pdf.FontFile2,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Set the font tables.
            </summary>
            <param name="f2"></param>
            <param name="isSymbol"></param>
            <param name="localTableLength"></param>
            <param name="bIsLocaShort"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.UpdateFontName(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Graphics.TtfReader)">
            <summary>
            Update the embedded subset font Name based on the PDF specification.
            </summary>
            <param name="fontDic"></param>
            <param name="ttfReader"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.GetObject(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Primitives.PdfName)">
            <summary>
            Get the object from parent dictionary
            </summary>
            <param name="parent"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.GetObject(Syncfusion.Pdf.Primitives.IPdfPrimitive)">
            <summary>
            Get the object from IPdfPrimitive
            </summary>
            <param name="primitive"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.CalculateCheckSum(System.Byte[])">
            <summary>
            Calulates the check sum value.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.GetTableEntry(System.String,System.Byte[])">
            <summary>
            Get the font table entry.
            </summary>
            <param name="tableName"></param>
            <param name="tableData"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.CalculateLocalTableLength(Syncfusion.Pdf.FontFile2,System.Boolean,System.Int32,System.Int32@,System.Boolean@)">
            <summary>
            calculate the local and hmtx table length.
            </summary>
            <param name="f2"></param>
            <param name="bIsLocaShort"></param>
            <param name="localTableLength"></param>
            <param name="isSkip"></param>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.CompareStream(System.IO.MemoryStream,System.String@)">
            <summary>
            Create hash from the current stream and returns true if present in the collection
            </summary>
            <param name="stream"></param>
            <param name="page"></param>
            <param name="hashValue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.CreateHashFromStream(System.Byte[])">
            <summary>
            Create hash value from the current stream
            </summary>
            <param name="streamBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.PdfOptimizer.IsOptimizeUsedCharacters(Syncfusion.Pdf.Primitives.PdfDictionary,Syncfusion.Pdf.Primitives.PdfStream)">
            <summary>
            Find Adobe standard Latin characters
            </summary>
            <param name="fontDictionary"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Pdf.GraphicsStateData">
            <summary>
            The class represents the graphics state data.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.ImageToPdfConverter">
            <summary>
            Represents the image to PDF converter
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ImageToPdfConverter.m_imagePosition">
            <summary>
            Default positon of the image
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ImageToPdfConverter.m_size">
            <summary>
            Default size of the page
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.ImageToPdfConverter.m_margins">
            <summary>
            Holds that margin of the page
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.ImageToPdfConverter.ImagePosition">
            <summary>
            Gets or sets the position of the image
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.ImageToPdfConverter.PageSize">
            <summary>
            Gets or sets the size of the PDF page
            </summary>
        </member>
        <member name="P:Syncfusion.Pdf.ImageToPdfConverter.Margin">
            <summary>
            Gets or sets the margin of the PDF page
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ImageToPdfConverter.#ctor">
            <summary>
            Initializes the new instance of the image to PDF converter class
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.ImageToPdfConverter.GetPage(Syncfusion.Pdf.PdfDocument,Syncfusion.Pdf.Graphics.PdfTiffImage)">
            <summary>
            Get the page to draw the image
            </summary>
            <param name="document">PDF document</param>
            <param name="image">The image</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Pdf.ImageToPdfConverter.DrawImage(Syncfusion.Pdf.Graphics.PdfTiffImage,Syncfusion.Pdf.PdfPage)">
            <summary>
            Draw the image using position of the page
            </summary>
            <param name="image">The image</param>
            <param name="page">The page</param>
        </member>
        <member name="M:Syncfusion.Pdf.ImageToPdfConverter.Convert(System.IO.Stream)">
            <summary>
            Convert image to PDF document
            </summary>
            <param name="image">The image stream</param>
            <returns>PDF document</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ImageToPdfConverter.Convert(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
             Convert images to PDF Document
            </summary>
            <param name="images">Collection of image streams</param>
            <returns>PDF document</returns>
        </member>
        <member name="T:Syncfusion.Pdf.TiffDecode">
            <summary>
            Decodes the image stream in the PDF document into an image
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.TiffDecode.SetField(System.Int32,System.Int32,Syncfusion.Pdf.TiffTag,Syncfusion.Pdf.TiffType)">
            <summary>
            Sets the fields associated with the TIFF image
            </summary>
            <param name="count">Number of fields</param>
            <param name="offset">Value of the field</param>
            <param name="tag">Name of the TIFF tag</param>
            <param name="type">Type of the tag value</param>
        </member>
        <member name="M:Syncfusion.Pdf.TiffDecode.WriteHeader(Syncfusion.Pdf.TiffHeader)">
            <summary>
            Writes the header to the TIFF image
            </summary>
            <param name="header">Specifies the header of the TIFF image</param>
        </member>
        <member name="M:Syncfusion.Pdf.TiffDecode.WriteDirEntry(System.Collections.Generic.List{Syncfusion.Pdf.TiffDirectoryEntry})">
            <summary>
            Writes the list of fields associated with the TIFF image
            </summary>
            <param name="entries">List of TIFF fields</param>
        </member>
        <member name="M:Syncfusion.Pdf.TiffDecode.WriteShort(System.Int16)">
            <summary>
            Writes short value into the TIFF stream
            </summary>
            <param name="value">Short value to be written</param>
        </member>
        <member name="M:Syncfusion.Pdf.TiffDecode.WriteInt(System.Int32)">
            <summary>
            Writes integer value into the TIFF stream
            </summary>
            <param name="value">Integer value to be written</param>
        </member>
        <member name="T:Syncfusion.Pdf.TiffHeader">
            <summary>
            Structure of the TIFF header
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TiffHeader.m_byteOrder">
            <summary>
            Size of the byte order of the tiff image
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TiffHeader.m_version">
            <summary>
            TIFF version number
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TiffHeader.m_dirOffset">
            <summary>
            byte offset to first directory
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.TiffDirectoryEntry">
            <summary>
            Tag entry to the TIFF stream
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TiffDirectoryEntry.DirectoryTag">
            <summary>
            Represents the TIFF tag
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TiffDirectoryEntry.DirectoryType">
            <summary>
            Represents the type of the TIFF tag
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TiffDirectoryEntry.DirectoryCount">
            <summary>
            number of items; length in spec
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TiffDirectoryEntry.DirectoryOffset">
            <summary>
            byte offset to field data
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TiffTag.ImageWidth">
            <summary>
            Width of the image in pixels
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TiffTag.ImageLength">
            <summary>
            Height of the image in pixels
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TiffTag.BitsPerSample">
            <summary>
            Bits per channel (sample).
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TiffTag.Compression">
            <summary>
            Compression technique
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TiffTag.Photometric">
            <summary>
            Photometric interpretation.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TiffTag.StripOffset">
            <summary>
            Offsets to data strips.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TiffTag.SamplesPerPixel">
            <summary>
            Samples per pixel.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TiffTag.StripByteCounts">
            <summary>
            Bytes counts for strips.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TiffType.Short">
            <summary>
            16-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.TiffType.Long">
            <summary>
            32-bit unsigned integer.
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.StringSpec">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ModuleSpec">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.IntegerSpec">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.WTFilterSpec">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.WTDecompSpec">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.WaveletTransform">
            <exclude/>   
        </member>
        <member name="T:Syncfusion.Pdf.WaveletFilter">
            <exclude/>   
        </member>
        <member name="T:Syncfusion.Pdf.Subband">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.WaveletTransformInverse">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.SynWTFilterSpec">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.SynWTFilterIntLift5x3">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.SynWTFilterInt">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.SynWTFilterFloatLift9x7">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.SynWTFilterFloat">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.SynWTFilter">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.SubbandSyn">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.MultiResImgDataAdapter">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.MultiResImgData">
            <exclude/>   
        </member>
        <member name="T:Syncfusion.Pdf.InvWTFull">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.InvWTData">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.InvWTAdapter">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.InvWT">
            <exclude/>   
        </member>
        <member name="T:Syncfusion.Pdf.CBlkWTDataSrcDec">
            <exclude/>   
        </member>
        <member name="T:Syncfusion.Pdf.AnWTFilter">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.AnWTFilterFloat">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.AnWTFilterFloatLift9x7">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.AnWTFilterInt">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.AnWTFilterIntLift5x3">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.AnWTFilterSpec">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.CBlkWTData">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.CBlkWTDataFloat">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.CBlkWTDataInt">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.CBlkWTDataSrc">
            <exclude/>    
        </member>
        <member name="T:Syncfusion.Pdf.ForwardWT">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ForwWT">
            <exclude/>    
        </member>
        <member name="T:Syncfusion.Pdf.ForwWTDataProps">
            <exclude/>  
        </member>
        <member name="T:Syncfusion.Pdf.ForwWTFull">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.SubbandAn">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.MathUtil">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.JPXParameters">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ArrayUtil">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.DeScalerROI">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.MaxShiftSpec">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ArbROIMaskGenerator">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.RectROIMaskGenerator">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ROI">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ROIMaskGenerator">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ROIScaler">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.SubbandRectROIMask">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.SubbandROIMask">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.QuantTypeSpec">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.QuantStepSizeSpec">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.GuardBitsSpec">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.CBlkQuantDataSrcEnc">
            <exclude/>    
        </member>
        <member name="T:Syncfusion.Pdf.Quantizer">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.StdQuantizer">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.StdDequantizerParams">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.StdDequantizer">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.DequantizerParams">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.Dequantizer">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.CBlkQuantDataSrcDec">
            <exclude/>   
        </member>
        <member name="T:Syncfusion.Pdf.BinaryDataOutput">
            <exclude/> 
        </member>
        <member name="T:Syncfusion.Pdf.BinaryDataInput">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.JPXRandomAccessStream">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.Tiler">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.JPXImageCoordinates">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ImgDataJoiner">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ImgDataAdapter">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ImageDataConverter">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ImageData">
            <exclude/>  
        </member>
        <member name="T:Syncfusion.Pdf.DataBlockInt">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.DataBlockFloat">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.DataBlock">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.CompTransfSpec">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.BlockImageDataSource">
            <exclude/>  
        </member>
        <member name="T:Syncfusion.Pdf.ImgWriterPGX">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ImgWriterPGM">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ImgWriter">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.InverseComponetTransformation">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ImgReaderPGM">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ImgReader">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ForwCompTransfSpec">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ForwCompTransf">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.JPXFormatReader">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.CBlkSizeSpec">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.PrecinctSizeSpec">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.Progression">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ProgressionSpec">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.StdEntropyDecoder">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.MQDecoder">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.EntropyDecoder">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.DecLyrdCBlk">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.CodedCBlkDataSrcDec">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ByteToBitInput">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.ByteInputBuffer">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.EncoderSpecs">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.DecodeHelper">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.CBlkCoordInfo">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.CoordInfo">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.HeaderInformation">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Pdf.HeaderInformation.COD.ToString">
            <summary>Display information found in this COD marker segment </summary>
        </member>
        <member name="M:Syncfusion.Pdf.HeaderInformation.COC.ToString">
            <summary>Display information found in this COC marker segment </summary>
        </member>
        <member name="M:Syncfusion.Pdf.HeaderInformation.RGN.ToString">
            <summary>Display information found in this RGN marker segment </summary>
        </member>
        <member name="T:Syncfusion.Pdf.PrecInfo">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.BitstreamReader">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.CBlkInfo">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.FileBitstreamReaderAgent">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.HeaderDecoder">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.PktDecoder">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.PktHeaderBitReader">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.PktInfo">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.TagTreeDecoder">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Pdf.ASCII85.decode(System.Byte[])">
            <summary>
            Decodes the ASCII85 encoded byte[]
            </summary>
            <param name="encodedData">encoded byte[]</param>
            <returns>decoded byte[]</returns>
        </member>
        <member name="M:Syncfusion.Pdf.ASCIIHex.Decode(System.Byte[])">
            <summary>
            asciihexdecode using our own implementation
            </summary>
        </member>
        <member name="T:Syncfusion.Pdf.GenericRegionFlags">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.JBIG2BaseFlags">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Pdf.MMRDecoder.m_whiteTable1">
            <summary>
            white run lengths </summary>
        </member>
        <member name="F:Syncfusion.Pdf.MMRDecoder.m_blackTable1">
            <summary>
            black run lengths </summary>
        </member>
        <member name="T:Syncfusion.Pdf.RefinementRegionFlags">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.RegionFlags">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotationExtension">
            <summary>
            Represents the extension class for rubber stamp annotation.
            </summary>
            <example>
            <code lang="C#">
            //Load the existing PDF file.
            FileStream fileStream = new FileStream("input.pdf", FileMode.Open);
            PdfLoadedDocument ldoc = new PdfLoadedDocument(fileStream);
            //Get the existing PDF page.
            PdfLoadedPage lpage = ldoc.Pages[0] as PdfLoadedPage;
            //Get the rubber stamp annotation.
            PdfLoadedRubberStampAnnotation rubberStampAnnotation = lpage.Annotations[0] as PdfLoadedRubberStampAnnotation;
            //Get the custom image streams.
            Stream[] imageStreams = rubberStampAnnotation.GetImages();
            //Close the PDF document.
            ldoc.Close(true);
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotationExtension.GetImages(Syncfusion.Pdf.Interactive.PdfLoadedRubberStampAnnotation)">
            <summary>
            Returns an array of Stream objects that represent the images associated with the rubber stamp annotation.
            </summary>
            <param name="annotation">Rubber stamp annotation to get custom images.</param>
            <returns>An array of Stream objects that represent the images associated with the rubber stamp annotation.</returns>
            <example>
            <code lang="C#">
            //Load the existing PDF file.
            FileStream fileStream = new FileStream("input.pdf", FileMode.Open);
            PdfLoadedDocument ldoc = new PdfLoadedDocument(fileStream);
            //Get the existing PDF page.
            PdfLoadedPage lpage = ldoc.Pages[0] as PdfLoadedPage;
            //Get the rubber stamp annotation.
            PdfLoadedRubberStampAnnotation rubberStampAnnotation = lpage.Annotations[0] as PdfLoadedRubberStampAnnotation;
            //Get the custom image streams.
            Stream[] imageStreams = rubberStampAnnotation.GetImages();
            //Close the PDF document.
            ldoc.Close(true);
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Pdf.Interactive.PdfLoadedSignatureFieldExtension">
            <summary>
            Represents the extension class for loaded signature field.
            </summary>
            <example>
            <code lang="C#">
            //Load the existing PDF file.
            FileStream fileStream = new FileStream("input.pdf", FileMode.Open);
            PdfLoadedDocument ldoc = new PdfLoadedDocument(fileStream);
            //Get the existing signed signature field.
            PdfLoadedSignatureField loadedSignature = ldoc.Forms.Fields[0] as PdfLoadedSignatureField;
            //Get the image streams.
            Stream[] imageStreams = loadedSignature.GetImages();
            //Close the PDF document.
            ldoc.Close(true);
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Pdf.Interactive.PdfLoadedSignatureFieldExtension.GetImages(Syncfusion.Pdf.Parsing.PdfLoadedSignatureField)">
            <summary>
            Returns an array of Stream objects that represent the images associated with the signature field.
            </summary>
            <param name="signatureField">Signature field to get custom images.</param>
            <returns>An array of Stream objects that represent the images associated with the signature field.</returns>
            <example>
            <code lang="C#">
            //Load the existing PDF file.
            FileStream fileStream = new FileStream("input.pdf", FileMode.Open);
            PdfLoadedDocument ldoc = new PdfLoadedDocument(fileStream);
            //Get the existing signed signature field.
            PdfLoadedSignatureField loadedSignature = ldoc.Forms.Fields[0] as PdfLoadedSignatureField;
            //Get the image streams.
            Stream[] imageStreams = loadedSignature.GetImages();
            //Close the PDF document.
            ldoc.Close(true);
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Pdf.FontFile.c1">
            <summary>
            constant used in eexec and charset decode 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.FontFile.c2">
            <summary>
            constant used in eexec and charset decode
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.FontFile.m_skipBytes">
            <summary>
            Represents the number of random bytes in stream to ignore
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.FontFile.m_glyphs">
            <summary>
             Variable to hold the glyph string and its glyph shapes 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.FontFile.m_differenceEncoding">
            <summary>
             Variable to hold the character code and character
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.FontFile.m_fontMatrix">
            <summary>
             Variable to hold the font matrix
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.FontFile.m_cffGlyphs">
            <summary>
             Variable to cff glyphs 
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.FontFile.Type1">
            <summary>
            needed so CIDFOnt0 can extend 
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.FontFile.ParseDifferenceEncoding(System.IO.StreamReader)">
            <summary>
            Parse the difference encoding
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.FontFile.ParseType1FontFile(System.Byte[])">
            <summary>
            Handle encoding for type1 fonts 
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.FontFile.ParseEncodedContent(System.Byte[])">
            <summary>
            parse the encoded part from a type 1 font
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.FontFile.ExtractSubroutineData(System.Int32,System.Byte[],System.Int32,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            extract the subroutine data
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.FontFile.ExtractFontData(System.Int32,System.Byte[],System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Extract Font Data
            </summary>
        </member>
        <member name="M:Syncfusion.Pdf.FontFile.GetStream(System.Int32,System.Int32,System.Int32,System.Byte[])">
             <summary>
            extract bytestream with char data
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.FontFile3.m_fontMatrix">
            <summary>
             Variable to hold the font matrix
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.FontFile3.m_cffGlyphs">
            <summary>
             Variable to cff glyphs 
            </summary>
        </member>
        <member name="F:Syncfusion.Pdf.FontFile3.type1CStdStrings">
            lookup table for names for type 1C glyphs 
        </member>
        <member name="F:Syncfusion.Pdf.FontFile3.ISOAdobeCharset">
            Lookup table to map values 
        </member>
        <member name="F:Syncfusion.Pdf.FontFile3.ExpertCharset">
            lookup data to convert Expert values 
        </member>
        <member name="T:Syncfusion.Drawing.TiffImageConverter">
            <summary>
            Represents a class that can be used to convert Tiff image to another image format.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.TiffImageConverter.ConvertToPng(System.IO.Stream)">
            <summary>
            Converts Tiff image stream to Png image stream.
            </summary>
            <param name="tiffStream">Represents the Tiff stream to be converted.</param>
            <returns>Returns the converted Png stream.</returns>
        </member>
        <member name="T:Syncfusion.PdfViewer.Base.PdfElementsRendererNet">
            <exclude/>  
        </member>
        <member name="T:Syncfusion.PdfViewer.Base.GraphicObjectDataHelperNet">
            <exclude/> 
        </member>
        <member name="P:Syncfusion.PdfViewer.Base.GraphicObjectDataHelperNet.StrokingColorspace">
            <summary>
            Gets or sets a value of the StrokingColorspace
            </summary>
        </member>
        <member name="P:Syncfusion.PdfViewer.Base.GraphicObjectDataHelperNet.NonStrokingColorspace">
            <summary>
            Gets or sets a value of the NonStrokingColorspace
            </summary>
        </member>
        <member name="P:Syncfusion.PdfViewer.Base.GraphicObjectDataHelperNet.StrokingBrush">
            <summary>
            Gets or sets a value of the StrokingBrush
            </summary>
        </member>
        <member name="P:Syncfusion.PdfViewer.Base.GraphicObjectDataHelperNet.NonStrokingBrush">
            <summary>
            Gets or sets a value of the NonStrokingBrush
            </summary>
        </member>
        <member name="P:Syncfusion.PdfViewer.Base.TextElementHelperNet.IsExtractTextData">
            <summary>
            Gets or sets the value that indicating the extracting of text data.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfViewer.Base.TextElementHelperNet.Render(Syncfusion.Pdf.Graphics.GraphicsHelper,Syncfusion.Drawing.PointF,System.Double,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Double,System.Collections.Generic.Dictionary{System.Int32,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.String},Syncfusion.PdfViewer.Base.Matrix@)">
            <summary>
            Renders the Text to the panel
            </summary>
            <param name="g">graphics element</param>
            <param name="currentLocation">location in which the graphics is to be drawn</param>
        </member>
        <member name="M:Syncfusion.PdfViewer.Base.TextElementHelperNet.SkipEscapeSequence(System.String)">
            <summary>
            Removes the escape sequence characters in the given text
            </summary>
            <param name="text">text with the escape sequence</param>
            <returns>Text without escape sequence</returns>
        </member>
    </members>
</doc>
