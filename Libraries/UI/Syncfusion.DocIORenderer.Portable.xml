<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.DocIORenderer.Portable</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.DocIORenderer.DocIORenderer" -->
        <member name="F:Syncfusion.DocIORenderer.DocIORenderer.m_chartToImageconverter">
            <summary>
            Holds the ChartToImageConverter instance.
            </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORenderer.m_settings">
            <summary>
            converter settings to the document
            </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORenderer.m_flag">
            <summary>
            The m_flag
            </summary>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORenderer.ChartToImageconverter">
            <summary>
            Gets the ChartToImageConverter instance.
            </summary>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORenderer.PageSettings">
            <summary>
            Gets the page settings.
            </summary>
            <value>The page settings.</value>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORenderer.Settings">
            <summary>
            Gets or sets <see cref="!:Syncfusion.DocIORenderer.DocToPDFConverterSettings"/> instance that represents the converter settings which need to be considered while performing Word to PDF conversion.
            </summary>
            <example>
            This example converts the specified Word Document in to PDF Document with converter settings.
            <code lang="C#">
            	//Creates a new Word document
            	WordDocument wordDocument = new WordDocument();
            	//Add a section into the word document
            	IWSection section = wordDocument.AddSection();
            	//Add a paragraph into the section
            	IWParagraph paragraph = section.AddParagraph();
            	//Add a text into the paragraph
            	paragraph.AppendText("First Chapter1");
            	//Apply style for the text
            	paragraph.ApplyStyle(BuiltinStyle.Heading1);
            	paragraph.AppendText("First Chapter2");
            	paragraph.ApplyStyle(BuiltinStyle.Heading2);
            	paragraph.AppendText("First Chapter3");
            	paragraph.ApplyStyle(BuiltinStyle.Heading3);
            	//Instantiation of DocIORenderer for Word to PDF conversion  
            	DocIORenderer render = new DocIORenderer();  
            	//Sets ExportBookmarks for preserving Word document headings as PDF bookmarks
            	render.Settings.ExportBookmarks = Syncfusion.DocIO.ExportBookmarkType.Headings; 
            	//Converts Word document into PDF document  
            	PdfDocument pdfDocument = render.ConvertToPDF(wordDocument);
            	//Saves the PDF file  
            	MemoryStream outputStream = new MemoryStream();  
            	pdfDocument.Save(outputStream);  
            	//Releases all resources used by the object.  
            	render.Dispose();  
            	//Closes the instance of document objects  
            	pdfDocument.Close();  
            	wordDocument.Close();                                                                                   
            </code>   
            </example>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORenderer.IsCanceled">
            <summary>
            Gets a value indicating whether this conversion has been canceled.
            </summary>
            <value>
            <c>true</c> if this conversion is canceled; otherwise, <c>false</c>.
            </value>        
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORenderer.IsTrial">
            <summary>
            Gets or sets a value indicating whether the PDF document was generated using web service.
            </summary>
            <value>
            <c>true</c> if the PDF document was generated using web service; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:DocToPDFConverter"/> class.
            </summary>
            <remarks>This constructor is supported on Windows Forms, WPF, ASP.NET and ASP.NET MVC platforms only. </remarks>
             <example>
            This example converts the specified Word Document in to PDF Document.
            <code lang="C#">
                //Loads an existing Word document
                WordDocument wordDocument = new WordDocument("Template.docx", FormatType.Docx);
                //Instantiation of DocToPDFConverter for Word to PDF conversion
                DocToPDFConverter converter = new DocToPDFConverter();
                //Converts Word document into PDF document
                PdfDocument pdfDocument = converter.ConvertToPDF(wordDocument);
               //Saves the PDF file
                pdfDocument.Save("WordtoPDF.pdf");
                //Releases all resources used by the object.
                converter.Dispose();
                //Closes the instance of document objects
                pdfDocument.Close(true);
                wordDocument.Close();
            </code>
            <code lang="VB">
                'Loads an existing Word document
                Dim wordDocument As New WordDocument("Template.docx", FormatType.Docx)
                'Instantiation of DocToPDFConverter for Word to PDF conversion
                Dim converter As New DocToPDFConverter()
               'Converts Word document into PDF document
                Dim pdfDocument As PdfDocument = converter.ConvertToPDF(wordDocument)
               'Saves the PDF file
                pdfDocument.Save("WordtoPDF.pdf");
                'Releases all resources used by the object.
                converter.Dispose();
                'Closes the instance of document objects
                pdfDocument.Close(true);
                wordDocument.Close();
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.Close">
            <summary>
            Release the resources occupied by this <see cref="!:DocToPDFConverter"/> instance.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.DocIORenderer.DocIORenderer.Dispose" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.DocIORenderer.DocIORenderer.SaveChartAsImage(Syncfusion.OfficeChart.IOfficeChart,System.IO.Stream)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.DocIORenderer.DocIORenderer.ConvertToPDF(Syncfusion.DocIO.DLS.WordDocument)" -->
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.UpdateTrackChangesBalloonsCount(Syncfusion.DocIO.DLS.Rendering.DocumentLayouter)">
            <summary>
            Check and set balloon count for track changes.
            </summary>
            <param name="layouter"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.DocIORenderer.DocIORenderer.ConvertToPDF(System.IO.Stream)" -->
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.CreateDocument">
            <summary>
            Creates the PDF document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.AddSection(Syncfusion.DocIO.DLS.WPageSetup)">
            <summary>
            Adds the section.
            </summary>
            <param name="pageSetup">The page setup.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.InitPagesSettings(Syncfusion.DocIO.DLS.Rendering.DocumentLayouter)">
            <summary>
            Sets the pages settings.
            </summary>
            <param name="layouter">The layouter.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.AddDocumentProperties(Syncfusion.DocIO.DLS.BuiltinDocumentProperties)">
            <summary>
            Adds the document properties.
            </summary>
            <param name="docProperties">The doc properties.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.AddHyperLinks(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,Syncfusion.Drawing.RectangleF}})">
            <summary>
            Adds the hyper links.
            </summary>
            <param name="hyperlinks">The hyperlinks.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.AddBookmarks(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,Syncfusion.DocIO.DLS.Rendering.DocumentLayouter.BookmarkHyperlink}})">
            <summary>
            Converts the TOC into Bookmark.
            </summary>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.HasParentNode(System.Int32@,System.Int32[],System.Int32)">
            <summary>
            Getting Parent Node for the levels of the Bookmarks
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.DrawDirectWordToPDF(Syncfusion.DocIO.DLS.Rendering.DocumentLayouter)">
            <summary>
            Draw To PDF
            </summary>
            <param name="layouter">The DocumentLayouter</param>
            <returns>PdfDocument</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.ShowWarnings">
            <summary>
            Shows the warnings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.CreateWarningElmentNames">
            <summary>
            Create warning element names into the list
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.DocIORenderer.Extensions">
            <summary>
            Implemented alternative method to perform autofit for table
            </summary>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.AutoFit(Syncfusion.DocIO.DLS.WTable,Syncfusion.DocIO.DLS.AutoFitType)">
            <summary>
            Resizes the table based on the specified <see cref="T:Syncfusion.DocIO.DLS.AutoFitType"/>.
            </summary>
            <param name="autoFitType">The <see cref="T:Syncfusion.DocIO.DLS.AutoFitType"/> member that specifies the type of auto fit layout of table.</param>
            <remarks>DocIO can resize the table based on the content of the table cells or the width of the document window. 
            You can also use this method to turn off AutoFit so that the table size is fixed, regardless of cell contents or window width.
            Setting the AutoFit behavior to FitToContent or FitToWindow sets the <see cref="P:Syncfusion.DocIO.DLS.RowFormat.IsAutoResized"/> property to True if it's currently False. 
            Likewise, setting the AutoFit behavior to FixedColumnWidth sets the <see cref="P:Syncfusion.DocIO.DLS.RowFormat.IsAutoResized"/> property to False if it's currently True.</remarks>
            <example>The following example illustrates how to append html text to the paragraph.
            <code language = "C#">
            //Loads the template document
            WordDocument document = new WordDocument("Sample.docx");
            //Accesses the instance of the first section in the Word document 
            WSection section = document.Sections[0];
            //Accesses the instance of the first table in the section 
            WTable table = section.Tables[0] as WTable;
            //Auto fits the table with respect to window.
            table.AutoFit(AutoFitType.FitToWindow);
            //Saves and closes the document instance
            document.Save("TableAutoFit.docx");
            document.Close();
            </code>
            <code language = "VB">
            Private Sub SurroundingSub()
            Dim document As WordDocument = New WordDocument("Sample.docx")
            Dim section As WSection = document.Sections(0)
            Dim table As WTable = TryCast(section.Tables(0), WTable)
            table.AutoFit(AutoFitType.FitToWindow)
            document.Save("TableAutoFit.docx")
            document.Close()
            End Sub
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.UpdateTableOfContents(Syncfusion.DocIO.DLS.WordDocument)">
            <summary>
            Update Table of contents in the document.
            </summary>
            <remarks>
            <para>Updating TOC makes use of our Word to PDF layouting engine which may lead to the updation of incorrect page number due to its limitations. Also use of WOrd to PDF layout engine may lead to take some considerable amount of performance to update the page numbers.</para>
            </remarks>
            <example>
            <para>The following code example demonstrates how to update a TOC in an existing word document.</para>
            <code lang="C#">
              //Open an input word template
              WordDocument document = new WordDocument(@"Template.docx");
              //Update the table of contents.
              document.UpdateTableOfContents();
              //Save and close the Word document instance.
              document.Save("Sample.docx", FormatType.Docx);
              document.Close();
            </code>
            <code lang="VB">
              'Open an input word template
              Dim document As New WordDocument("Template.docx")
              'Update the table of contents.
              document.UpdateTableOfContents()
              'Save and close the Word document instance.
              document.Save("Sample.docx", FormatType.Docx)
              document.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.UpdateWordCount(Syncfusion.DocIO.DLS.WordDocument,System.Boolean)">
            <summary>
            Updates Paragraphs count, Word count and Character count. Updates page count if performLayout set to true using Word to PDF layout engine.
            </summary> 
            <param name="performLayout">Set to <b>true</b> to update the page count of the document using Word to PDF layout engine; otherwise, <b>false</b>.</param>
            <example>
            <para>The following code example demonstrates how to update Page count, Paragraphs count, Word count and Character count in the document.</para>
            <code lang="C#">
                //Open an input word template from stream through constructor of `WordDocument` class
                FileStream inputStream = new FileStream(@"Template.docx", FileMode.Open, FileAccess.Read);
                WordDocument document = new WordDocument(inputStream, FormatType.Automatic);
                //Update the Page count, Paragraphs count, Word count and Character count in the document
                document.UpdateWordCount(true);
                FileStream outputStream = new FileStream(@"Sample.docx", FileMode.Create);
                //Save and close the Word document instance.
                document.Save(outputStream, FormatType.Docx);
                document.Close();
            </code>
            <code lang="VB">
                'Open an input word template
                Dim inputStream As FileStream = New FileStream("Template.docx", FileMode.Open, FileAccess.Read)
                Dim document As WordDocument = New WordDocument(inputStream, FormatType.Automatic)
                'Update the Page count, Paragraphs count, Word count and Character count in the document.
                document.UpdateWordCount(True)
                Dim outputStream As FileStream = New FileStream("Sample.docx", FileMode.Create)
                'Save and close the Word document instance.
                document.Save(outputStream, FormatType.Docx)
                document.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.UpdateDocumentFields(Syncfusion.DocIO.DLS.WordDocument,System.Boolean)">
            <summary>
            Updates fields present in the Word document.
            </summary>
            <param name="performLayout">Set to <b>true</b> to update the Page, NumPage and PageRef fields in the Word document using Word to PDF layouting engine; otherwise, <b>false</b>.</param>
            <remarks>
            <para>Updating of NUMPAGES field and Cross Reference field with Page number and Paragraph number options are not supported in Silverlight, WinRT, Universal and Windows Phone platforms.</para>
            <para>Currently group shapes, drawing canvas, and table auto resizing are not supported in Word to PDF lay outing, and this may lead to update incorrect page number and total number of pages.</para>
            <para>While updating NUMPAGES field and Cross Reference field with Page number and Paragraph number options uses makes use of our Word to PDF layouting engine which may lead to take some considerable amount of performance to update the above mentioned fields.</para>
            </remarks>
            <example>
            <para>The following code example demonstrates how to update the fields present in Word document.</para>
            <code lang="C#">
              //Load an existing Word document into DocIO instance 
              WordDocument document = new WordDocument("Input.docx", FormatType.Docx);
              //Updates the fields present in a document.
              document.UpdateDocumentFields(true);
              document.Save("Result.docx", FormatType.Docx);
              document.Close();
            </code>
            <code lang="VB">
              'Load an existing Word document into DocIO instance 
              Dim document As New WordDocument("Input.docx", FormatType.Docx)
              'Updates the fields present in a document.
              document.UpdateDocumentFields(True)
              document.Save("Result.docx", FormatType.Docx)
              document.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.SaveAsImage(Syncfusion.DocIO.DLS.WChart)">
            <summary>
            Save the chart as image.
            </summary>
            <returns> An <see cref="T:System.IO.Stream"/> that represent specified chart as image.</returns>
            <example>
            <code lang="CS">
            //Open the file as Stream.
            using (FileStream docStream = new FileStream("Template.docx", FileMode.Open))
            {
                 //Load file stream into Word document.
                 using (WordDocument wordDocument = new WordDocument(docStream, Syncfusion.DocIO.FormatType.Automatic))
                 {
                     //Get the first paragraph from the section. 
                     WParagraph paragraph = wordDocument.LastSection.Paragraphs[0];
                     //Get the chart element from the paragraph.
                     WChart chart = paragraph.ChildEntities[0] as WChart;
                     //Create an instance of DocIORenderer.
                     using (DocIORenderer renderer = new DocIORenderer())
                     {
                        //Convert chart to an image.
                        using (Stream stream = chart.SaveAsImage())
                        {
                            //Create the output image file stream. 
                            using (FileStream fileStreamOutput = File.Create("ChartToImage.jpeg"))
                            {
                                //Copies the converted image stream into created output stream.
                                stream.CopyTo(fileStreamOutput);
                            }
                        }
                     }
                 }
            }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.AutoFit(Syncfusion.DocIO.DLS.IWTable,Syncfusion.DocIO.DLS.AutoFitType)">
            <summary>
            Resizes the table based on the specified <see cref="T:Syncfusion.DocIO.DLS.AutoFitType"/>.
            </summary>
            <param name="autoFitType">The <see cref="T:Syncfusion.DocIO.DLS.AutoFitType"/> member that specifies the type of auto fit layout of table.</param>
            <remarks>DocIO can resize the table based on the content of the table cells or the width of the document window. 
            You can also use this method to turn off AutoFit so that the table size is fixed, regardless of cell contents or window width.
            Setting the AutoFit behavior to FitToContent or FitToWindow sets the <see cref="P:Syncfusion.DocIO.DLS.RowFormat.IsAutoResized"/> property to True if it's currently False. 
            Likewise, setting the AutoFit behavior to FixedColumnWidth sets the <see cref="P:Syncfusion.DocIO.DLS.RowFormat.IsAutoResized"/> property to False if it's currently True.</remarks>
            <example>The following example illustrates how to append html text to the paragraph.
            <code language = "C#">
            //Loads the template document
            WordDocument document = new WordDocument("Sample.docx");
            //Accesses the instance of the first section in the Word document 
            WSection section = document.Sections[0];
            //Accesses the instance of the first table in the section 
            IWTable table = section.Tables[0];
            //Auto fits the table with respect to window.
            table.AutoFit(AutoFitType.FitToWindow);
            //Saves and closes the document instance
            document.Save("TableAutoFit.docx");
            document.Close();
            </code>
            <code language = "VB">
            Private Sub SurroundingSub()
            Dim document As WordDocument = New WordDocument("Sample.docx")
            Dim section As WSection = document.Sections(0)
            Dim table As IWTable = section.Tables(0)
            table.AutoFit(AutoFitType.FitToWindow)
            document.Save("TableAutoFit.docx")
            document.Close()
            End Sub
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.UpdateTableOfContents(Syncfusion.DocIO.DLS.IWordDocument)">
            <summary>
            Update Table of contents in the document.
            </summary>
            <remarks>
            <para>Updating TOC makes use of our Word to PDF layouting engine which may lead to the updation of incorrect page number due to its limitations. Also use of WOrd to PDF layout engine may lead to take some considerable amount of performance to update the page numbers.</para>
            </remarks>
            <example>
            <para>The following code example demonstrates how to update a TOC in an existing word document.</para>
            <code lang="C#">
              //Open an input word template
              IWordDocument document = new WordDocument(@"Template.docx");
              //Update the table of contents.
              document.UpdateTableOfContents();
              //Save and close the Word document instance.
              document.Save("Sample.docx", FormatType.Docx);
              document.Close();
            </code>
            <code lang="VB">
              'Open an input word template
              Dim document As IWordDocument = New WordDocument("Template.docx")
              'Update the table of contents.
              document.UpdateTableOfContents()
              'Save and close the Word document instance.
              document.Save("Sample.docx", FormatType.Docx)
              document.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.UpdateWordCount(Syncfusion.DocIO.DLS.IWordDocument,System.Boolean)">
            <summary>
            Updates Paragraphs count, Word count and Character count. Updates page count if performLayout set to true using Word to PDF layout engine.
            </summary> 
            <param name="performLayout">Set to <b>true</b> to update the page count of the document using Word to PDF layout engine; otherwise, <b>false</b>.</param>
            <example>
            <para>The following code example demonstrates how to update Page count, Paragraphs count, Word count and Character count in the document.</para>
            <code lang="C#">
                //Open an input word template from stream through constructor of `WordDocument` class
                FileStream inputStream = new FileStream(@"Template.docx", FileMode.Open, FileAccess.Read);
                IWordDocument document = new WordDocument(inputStream, FormatType.Automatic);
                //Update the Page count, Paragraphs count, Word count and Character count in the document
                document.UpdateWordCount(true);
                FileStream outputStream = new FileStream(@"Sample.docx", FileMode.Create);
                //Save and close the Word document instance.
                document.Save(outputStream, FormatType.Docx);
                document.Close();
            </code>
            <code lang="VB">
                'Open an input word template
                Dim inputStream As FileStream = New FileStream("Template.docx", FileMode.Open, FileAccess.Read)
                Dim document As IWordDocument = New WordDocument(inputStream, FormatType.Automatic)
                'Update the Page count, Paragraphs count, Word count and Character count in the document.
                document.UpdateWordCount(True)
                Dim outputStream As FileStream = New FileStream("Sample.docx", FileMode.Create)
                'Save and close the Word document instance.
                document.Save(outputStream, FormatType.Docx)
                document.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.UpdateDocumentFields(Syncfusion.DocIO.DLS.IWordDocument,System.Boolean)">
            <summary>
            Updates fields present in the document.
            </summary>
            <param name="performLayout">Set to <b>true</b> to update the Page, NumPage and PageRef fields in the Word document using Word to PDF layouting engine; otherwise, <b>false</b>.</param> 
            <remarks>
            <para>Updating of NUMPAGES field and Cross Reference field with Page number and Paragraph number options are not supported in Silverlight, WinRT, Universal and Windows Phone platforms.</para>
            <para>Currently group shapes, drawing canvas, and table auto resizing are not supported in Word to PDF lay outing, and this may lead to update incorrect page number and total number of pages.</para>
            <para>While updating NUMPAGES field and Cross Reference field with Page number and Paragraph number options uses makes use of our Word to PDF layouting engine which may lead to take some considerable amount of performance to update the above mentioned fields.</para>
            </remarks>
            <example>
            <para>The following code example demonstrates how to update the fields present in Word document.</para>
            <code lang="C#">
              //Load an existing Word document into DocIO instance 
              IWordDocument document = new WordDocument("Input.docx", FormatType.Docx);
              //Updates the fields present in a document.
              document.UpdateDocumentFields(true);
              document.Save("Result.docx", FormatType.Docx);
              document.Close();
            </code>
            <code lang="VB">
              'Load an existing Word document into DocIO instance 
              Dim document As IWordDocument = New WordDocument("Input.docx", FormatType.Docx)
              'Updates the fields present in a document.
              document.UpdateDocumentFields(True)
              document.Save("Result.docx", FormatType.Docx)
              document.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.DocIORenderer.RenderHelper.IsPdfConversion">
            <summary>
            Check whether current conversion is To PDF or not.
            </summary>
            <remarks>Returns true, if current conversion is To PDF; Otherwise false.</remarks>
        </member>
        <member name="P:Syncfusion.DocIORenderer.RenderHelper.EmbedFonts">
            <summary>
            Gets or sets a value indicating whether to embed fonts to converted PDF in Word to PDF conversion.
            </summary>
        </member>
        <member name="P:Syncfusion.DocIORenderer.RenderHelper.EmbedCompleteFonts">
            <summary>
            Gets or sets a value indicating whether to embed the complete font information in the resultant PDF document.
            </summary>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.CreateFont(System.IO.Stream,System.String,System.Single,Syncfusion.Drawing.FontStyle)">
            <summary>
            We are using this method to add the stream to the FontExtension typeFaceCache
            </summary>
            <param name="stream"></param>
            <param name="fontName"></param>
            <param name="fontSize"></param>
            <param name="fontStyle"></param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetFontFamily(System.String,System.Single)">
            <summary>
            Gets a new FontFamily object with specified name and font size.
            </summary>
            <param name="name">Represent a name of FontFamily.</param>
            <param name="fontSize">Represent a font size of FontFamily.</param>
            <returns>Returns a newly created FontFamily object.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetFontName(System.String,System.Single,Syncfusion.Drawing.FontStyle,Syncfusion.Office.FontScriptType,System.Boolean@)">
            <summary>
            Get the font name.
            </summary>
            <param name="fontName">Represent a font name.</param>
            <param name="fontSize">Represent a font size.</param>
            <param name="fontStyle">Represent a font style.</param>
            <param name="scriptType">Represent a script type.</param>
            <param name="hasStylesAndWeights">Represent whether created font (SkTypeFace) has proper style and weight.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetFallbackFont(Syncfusion.Drawing.Font,System.String,Syncfusion.Office.FontScriptType,System.Collections.Generic.List{Syncfusion.Office.FallbackFont},System.Collections.Generic.Dictionary{System.String,System.IO.Stream})">
            <summary>
            Gets fall back font to preserve the text in converted PDF document.
            </summary>
            <param name="font">Represent original font.</param>
            <param name="text">Represent a input text.</param>
            <param name="scriptType">Represent the scriptType of a input text.</param>
            <param name="fallbackFonts">Represent the fallback fonts list.</param>
            <param name="fontStreams">Represent the substituted or Embedded fonts collection.</param>
            <returns>Returns fallback font if it has; otherwise returns original font.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetFallbackFontExt(System.String,Syncfusion.Drawing.SkiaSharpHelper.FontExtension,Syncfusion.Drawing.Font,Syncfusion.Office.FontScriptType,System.Collections.Generic.List{Syncfusion.Office.FallbackFont},System.Collections.Generic.Dictionary{System.String,System.IO.Stream})">
            <summary>
            Gets fallback font extension to preserve the text in converted Image.
            </summary>
            <param name="inputText">Represent a input text.</param>
            <param name="originalFontExt">Represent original font extension.</param>
            <param name="systemFont">Represent original System font.</param>
            <param name="scriptType">Represent the script type of a input text.</param>
            <param name="fallbackFonts">Represent the fallback fonts list.</param>
            <param name="fontStreams">Represent the substituted or Embedded fonts collection.</param>
            <returns>Returns a fallback font extension instance, if it has; otherwise returns original font extension.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetFallBackFontFromSubstitutionOrEmbedded(System.String,Syncfusion.Office.FontScriptType,Syncfusion.Drawing.Font,System.Collections.Generic.Dictionary{System.String,System.IO.Stream})">
            <summary>
            Get fallback font from substituted or embedded font collection.
            </summary>
            <param name="fallbackFontName">Represent a fallback font name.</param>
            <param name="scriptType">Represent the script type of a input text.</param>
            <param name="systemFont">Represent original System font.</param>
            <param name="fontStreams">Represent substituted or embedded font stream.</param>
            <returns>Returns a fallback font extension, if it exists in the substituted or embedded font stream collection; otherwise returns null.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetUnicodeFamilyName(System.String,System.String)">
            <summary>
            Get the font name of the unicode text.
            </summary>
            <param name="text">Represent a Unicode text.</param>
            <param name="fontName">Represent a font name.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetBitmap">
            <summary>
            Gets a new Bitmap object.
            </summary>
            <returns>Returns a new Bitmap object.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetBitmap(System.Int32,System.Int32)">
            <summary>
            Gets a new Bitmap object with specified width and height.
            </summary>
            <param name="width">Represents a width of Bitmap.</param>
            <param name="height">Represents a height of Bitmap.</param>
            <returns>Returns a new Bitmap object with specified width and height.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetGraphics(Syncfusion.Drawing.DocIOHelper.IImage)">
            <summary>
            Gets a Graphics of with specified image.
            </summary>
            <param name="image">Represents a image that we need to gets a graphics.</param>
            <returns>Returns a Graphics of with specified image.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetSolidBrush(Syncfusion.Drawing.Color)">
            <summary>
            Gets a new SolidBrush object with specified color.
            </summary>
            <param name="color">Represents a color of SolidBrush.</param>
            <returns>Returns a new SolidBrush object with specified color.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetTextureBrush(Syncfusion.Drawing.DocIOHelper.IImage,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.DocIOHelper.IImageAttributes)">
            <summary>
            Gets a new TextureBrush obejact with specified image.
            </summary>
            <param name="image">Represents an image which specified in TextureBrush</param>
            <param name="bounds">Represents rectangle bounds</param>
            <param name="imageAttributes">Represents image attributes</param>
            <returns>Returs a new TextureBrush object with specified Image</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetHatchBrush(Syncfusion.Drawing.HatchStyle,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color)">
            <summary>
            Gets a new HatchBrush object with specified HatchStyle and color.
            </summary>
            <param name="hatchstyle">Represents a HatchStyle of HatchBrush.</param>
            <param name="foreColor">Represents a fore color of HatchBrush.</param>
            <param name="backColor">Represents a back color of HatchBrush.</param>
            <returns>Returns a new HatchBrush object with specified HatchStyle and color.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetGraphicsPath">
            <summary>
            Gets a new GraphicsPath object.
            </summary>
            <returns>Returns a new GraphicsPath object.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetPen(Syncfusion.Drawing.Color)">
            <summary>
            Gets a new Pen object with specified color.
            </summary>
            <param name="color">Represents a color of Pen.</param>
            <returns>Returns a new Pen object with specified color.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetPen(Syncfusion.Drawing.Color,System.Single)">
            <summary>
            Gets a new Pen object with specified color and width.
            </summary>
            <param name="color">Represents a color of Pen.</param>
            <param name="width">Represents a width of Pen.</param>
            <returns>Returns a new Pen object with specified color and width.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.ApplyScale(Syncfusion.Drawing.Matrix,System.Single,System.Single)">
            <summary>
            Applies the specified scale vector to provided Matrix by prepending the scale vector.
            </summary>
            <param name="matrix">Represents a Matrix that we need to scale.</param>
            <param name="x">The value by which to scale this Matrix in the x-axis direction.</param>
            <param name="y">The value by which to scale this Matrix in the y-axis direction.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.MultiplyMatrix(Syncfusion.Drawing.Matrix,Syncfusion.Drawing.Matrix,Syncfusion.Drawing.MatrixOrder)">
            <summary>
            Multiplies this Matrix by the specified Matrix by prepending the specified Matrix.
            </summary>
            <param name="srcMatrix">Represents a Matrix to apply.</param>
            <param name="matrix">The Matrix by which this Matrix is to be multiplied.</param>
            <param name="order">The MatrixOrder that represents the order of the multiplication.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.TranslateMatrix(Syncfusion.Drawing.Matrix,System.Single,System.Single,Syncfusion.Drawing.MatrixOrder)">
            <summary>
            Applies the specified translation vector to this Matrix by prepending the translation vector.
            </summary>
            <param name="matrix">Represents a Matrix to apply.</param>
            <param name="offsetX">The x value by which to translate this Matrix.</param>
            <param name="offsetY">The y value by which to translate this Matrix.</param>
            <param name="order">A MatrixOrder that specifies the order (append or prepend) in which the translation is applied to this Matrix.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.RotateMatrix(Syncfusion.Drawing.Matrix,System.Single,Syncfusion.Drawing.PointF,Syncfusion.Drawing.MatrixOrder)">
            <summary>
            Applies a clockwise rotation about the specified point to this Matrix by prepending the rotation.
            </summary>
            <param name="matrix">Represents a Matrix to apply.</param>
            <param name="angle">The angle of the rotation, in degrees.</param>
            <param name="point">A PointF that represents the center of the rotation.</param>
            <param name="order">A MatrixOrder that specifies the order (append or prepend) in which the rotation is applied.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetImageAttributes">
            <summary>
            Gets a new ImageAttributes object.
            </summary>
            <returns>Returns a new ImageAttributes object.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetColorMatrix(System.Single[][])">
            <summary>
            Gets a new ColorMatrix object with specified color matrix.
            </summary>
            <param name="newColorMatrix">Represents a color of matrix.</param>
            <returns>Returns new ColorMatrix object with specified color matrix.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetColorMatrix">
            <summary>
            Gets a new ColorMatrix object.
            </summary>
            <returns>Returns new ColorMatrix object.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.CreateImageFromStream(System.IO.MemoryStream)">
            <summary>
            Create a Image from specified image stream.
            </summary>
            <param name="stream">Represent a image stream.</param>
            <returns>Returns a Image from specified image stream.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.HasBitmap(Syncfusion.Drawing.DocIOHelper.IImage)">
            <summary>
            Check whether specified image has Bitmap or not.
            </summary>
            <param name="image">Represents a image to check.</param>
            <returns>Returns true, if it has a Bitmap; Otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.ConvertTiffToPng(System.Byte[])">
            <summary>
            Convert the TIFF image to PNG Image and returns the byte array of PNG.
            </summary>
            <param name="imageBytes">Represents a Tiff imageBytes.</param>
            <returns>Returns the converted PNG image bytes.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.ConvertChartAsImage(Syncfusion.OfficeChart.IOfficeChart,System.IO.Stream,Syncfusion.OfficeChart.ChartRenderingOptions)">
            <summary>
            Convert a chart as image with specified ChartRenderingOptions.
            </summary>
            <param name="officeChart">Represents a IOfficeChart instance to convert.</param>
            <param name="imageAsStream">Represent a output image stream.</param>
            <param name="imageOptions">Represents a ChartRenderingOptions.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetFontExtension(System.String,System.Single,Syncfusion.Drawing.FontStyle,Syncfusion.Drawing.GraphicsUnit,Syncfusion.Office.FontScriptType)">
            <summary>
            Create a FontExtension object with specified font name, size and style.
            </summary>
            <param name="fontName">Represent a font name.</param>
            <param name="fontSize">Represent a font size.</param>
            <param name="fontStyle">Represent a font style.</param>
            <param name="graphicsUnit">Represent a graphics unit.</param>
            <returns>Returns a FontExtension object with specified font name, size and style.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.IsValidFontStream(System.IO.Stream)">
            <summary>
            Check whether the font stream is valid
            ToDo : Need to implement similar method for Word to Image
            </summary>
            <param name="fontStream">Stream from which font instance will be created.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetFontExtension(System.String,System.Single,Syncfusion.Drawing.FontStyle,Syncfusion.Office.FontScriptType,System.Boolean@)">
            <summary>
            Create a FontExtension object with specified font name, size and style.
            </summary>
            <param name="fontName">Represent a font name.</param>
            <param name="fontSize">Represent a font size.</param>
            <param name="fontStyle">Represent a font style.</param>
            <param name="scriptType">Represent a script type.</param>
            <param name="hasStylesAndWeights">Represent whether created font (SkTypeFace) has proper style and weight.</param>
        </member>
        <member name="T:Syncfusion.DocIORenderer.DocIORendererSettings">
            <summary>
            Represent class with setting of Word to PDF conversion.
            </summary>
            <seealso cref="T:Syncfusion.DocIO.DLS.WordDocument"/>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/>
            <example>
            This example converts the specified Word Document in to PDF Document with converter settings.
            <code lang="C#">
            	//Creates a new Word document
            	WordDocument wordDocument = new WordDocument();
            	//Add a section into the word document
            	IWSection section = wordDocument.AddSection();
            	//Add a paragraph into the section
            	IWParagraph paragraph = section.AddParagraph();
            	//Add a text into the paragraph
            	paragraph.AppendText("First Chapter1");
            	//Apply style for the text
            	paragraph.ApplyStyle(BuiltinStyle.Heading1);
            	paragraph.AppendText("First Chapter2");
            	paragraph.ApplyStyle(BuiltinStyle.Heading2);
            	paragraph.AppendText("First Chapter3");
            	paragraph.ApplyStyle(BuiltinStyle.Heading3);
            	//Instantiation of DocIORenderer for Word to PDF conversion  
            	DocIORenderer render = new DocIORenderer();  
            	//Sets ExportBookmarks for preserving Word document headings as PDF bookmarks
            	render.Settings.ExportBookmarks = Syncfusion.DocIO.ExportBookmarkType.Headings; 
            	//Converts Word document into PDF document  
            	PdfDocument pdfDocument = render.ConvertToPDF(wordDocument);
            	//Saves the PDF file  
            	MemoryStream outputStream = new MemoryStream();  
            	pdfDocument.Save(outputStream);  
            	//Releases all resources used by the object.  
            	render.Dispose();  
            	//Closes the instance of document objects  
            	pdfDocument.Close();  
            	wordDocument.Close();                                                                                   
            </code>   
            </example>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORendererSettings.m_autoDetectComplexScript">
            <summary>
            Need to enable to preserve complex scripts.
            </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORendererSettings.m_enableAlternateChunks">
            <summary>
            Need to enable the Alternate chunks element
            </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORendererSettings.m_updateDocumentFields">
            <summary>
            Need to update the fields present in the document.
            </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORendererSettings.m_imageQuality">
            <summary>
            Indicates the quality of the image.
            </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORendererSettings.m_imageResolution">
            <summary>
            Indicates the Image resolution
            </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORendererSettings.m_preserveFormFields">
             <summary>
            Indicates whether to preserve the Word document form fields as PDF document form fields
             </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORendererSettings.m_warning">
            <summary>
            The m_warning
            </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORendererSettings.m_chartRenderingOptions">
            <summary>
            Holds the Chart Rendering Options instance.
            </summary>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.AutoDetectComplexScript">
            <summary>
            Gets or sets a value indicates to automatically detect the complex script text present in the Word document during PDF conversion. Default value is <b>false</b>.
            </summary>
            <value><b>True</b>if it is necessary to automatically detect the complex script text present in the Word document during PDF conversion; otherwise, <b>false</b>.</value>
            <remarks>Set this property to true, only if you have complex script text that is not marked as complex script type (CharacterFormat.ComplexScript is false) in the Word document.
            You can mark a text as complex script by enabling the WTextRange.CharacterFormat.ComplexScript property.
            Since automatic detection of complex script text involves validation of all the text in the document and may impact proportionally in Word to PDF conversion performance.</remarks>
            <example>This example illustrates AutoDetectComplexScript property of DocIORenderer settings.        
            <code lang = "C#">
                FileStream fileStream = new FileStream("Template.docx", FileMode.Open);
                //Loads an existing Word document
                WordDocument wordDocument = new WordDocument(fileStream, FormatType.Docx);
                //Instantiates DocIORenderer instance for Word to PDF conversion
                DocIORenderer renderer = new DocIORenderer();
                //Sets AutoDetectComplexScript property as true, to detect the complex scripts automatically.
                renderer.Settings.AutoDetectComplexScript = true;
                //Converts Word document into PDF document
                PdfDocument pdfDocument = renderer.ConvertToPDF(wordDocument);
                //Closes the instance of Word document object
                wordDocument.Close();
                //Releases the resources occupied by DocIORenderer instance
                renderer.Dispose();
                //Saves the PDF file  
                MemoryStream outputStream = new MemoryStream();
                pdfDocument.Save(outputStream);
                //Closes the instance of PDF document object
                pdfDocument.Close();
            </code>
            <code lang = "VB">
                Dim fileStream As FileStream = New FileStream("Template.docx", FileMode.Open)
                'Loads an existing Word document
                Dim wordDocument As WordDocument = New WordDocument(fileStream, FormatType.Docx)
                'Instantiates DocIORenderer instance for Word to PDF conversion
                Dim renderer As DocIORenderer = New DocIORenderer
                'Sets AutoDetectComplexScript property as true, to detect the complex scripts automatically.
                renderer.Settings.AutoDetectComplexScript = True
                'Converts Word document into PDF document
                Dim pdfDocument As PdfDocument = renderer.ConvertToPDF(wordDocument)
                'Closes the instance of Word document object
                wordDocument.Close()
                'Releases the resources occupied by DocIORenderer instance
                renderer.Dispose()
                'Saves the PDF file  
                Dim outputStream As MemoryStream = New MemoryStream
                pdfDocument.Save(outputStream)
                'Closes the instance of PDF document object
                pdfDocument.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.EnableAlternateChunks">
             <summary>
             Gets or sets a value indicates to enable the Alternate chunks present in the Word document . Default value is <b>True</b>.
             </summary>
             <value><b>True</b> if need to enable the Alternate chunks; otherwise, <b>false</b>.</value>         
             <example>This example illustrates EnableAlternateChunks property of DocIORenderer settings.  
             <code lang = "C#">
                 FileStream fileStream = new FileStream("Template.docx", FileMode.Open);
                 //Loads an existing Word document
                 WordDocument wordDocument = new WordDocument(fileStream, FormatType.Docx);
                 //Instantiates DocIORenderer instance for Word to PDF conversion
                 DocIORenderer renderer = new DocIORenderer();
                 //Sets EnableAlternateChunks property as true, to enable the Alternate chunks in the document
                 renderer.Settings.EnableAlternateChunks = true;
                 //Converts Word document into PDF document
                 PdfDocument pdfDocument = renderer.ConvertToPDF(wordDocument);
                 //Closes the instance of Word document object
                 wordDocument.Close();
                 //Releases the resources occupied by DocIORenderer instance
                 renderer.Dispose();
                 //Saves the PDF file  
                 MemoryStream outputStream = new MemoryStream();
                 pdfDocument.Save(outputStream);
                 //Closes the instance of PDF document object
                 pdfDocument.Close();
             </code>
             <code lang = "VB">
                 Dim fileStream As FileStream = New FileStream("Template.docx", FileMode.Open)
                 'Loads an existing Word document
                 Dim wordDocument As WordDocument = New WordDocument(fileStream, FormatType.Docx)
                 'Instantiates DocIORenderer instance for Word to PDF conversion
                 Dim renderer As DocIORenderer = New DocIORenderer
                 'Sets EnableAlternateChunks property as true, to enable the Alternate chunks in the document
                 renderer.Settings.EnableAlternateChunks = True
                 'Converts Word document into PDF document
                 Dim pdfDocument As PdfDocument = renderer.ConvertToPDF(wordDocument)
                 'Closes the instance of Word document object
                 wordDocument.Close()
                 'Releases the resources occupied by DocIORenderer instance
                 renderer.Dispose()
                 'Saves the PDF file  
                 Dim outputStream As MemoryStream = New MemoryStream
                 pdfDocument.Save(outputStream)
                 'Closes the instance of PDF document object
                 pdfDocument.Close()
             </code>
            </example>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.ImageQuality">
            <summary>
            Gets or sets the quality. The value indicates in percentage, max value represents best quality and min value represents best compression.
            </summary>
            <remarks>
            The value indicates in percentage, max value represents best quality and min value represents best compression        
            </remarks>       
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.DocIORenderer.DocIORendererSettings.PreserveFormFields" -->
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.ImageResolution">
            <summary>
            Sets the image resolution to the image, which are Embedded
            in the Word document
            </summary>      
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.DocIORenderer.DocIORendererSettings.Warning" -->
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.OptimizeIdenticalImages">
            <summary>
            Gets or Sets a value indicating whether to optimize the memory usage for the identical (duplicate) images in Word to PDF conversion.
            </summary>      
            <value>
            <b>True:</b> if need to optimize the identical (duplicate) images in Word to PDF conversion; otherwise, <b>False</b>.
            </value>
            <remarks> This property is supported to optimize the memory usage for the identical (duplicate) images only.</remarks>      
            <example>This example illustrates OptimizeIdenticalImages property of DocIORenderer settings.        
            <code lang = "C#">
                FileStream fileStream = new FileStream("Template.docx", FileMode.Open);
                //Loads an existing Word document
                WordDocument wordDocument = new WordDocument(fileStream, FormatType.Docx);
                //Instantiates DocIORenderer instance for Word to PDF conversion
                DocIORenderer renderer = new DocIORenderer();
                //Sets true to optimize the memory usage for identical images
                renderer.Settings.OptimizeIdenticalImages = true;
                //Converts Word document into PDF document
                PdfDocument pdfDocument = renderer.ConvertToPDF(wordDocument);
                //Closes the instance of Word document object
                wordDocument.Close();
                //Releases the resources occupied by DocIORenderer instance
                renderer.Dispose();
                //Saves the PDF file  
                MemoryStream outputStream = new MemoryStream();
                pdfDocument.Save(outputStream);
                //Closes the instance of PDF document object
                pdfDocument.Close();
            </code>
            <code lang = "VB">
                Dim fileStream As FileStream = New FileStream("Template.docx", FileMode.Open)
                'Loads an existing Word document
                Dim wordDocument As WordDocument = New WordDocument(fileStream, FormatType.Docx)
                'Instantiates DocIORenderer instance for Word to PDF conversion
                Dim renderer As DocIORenderer = New DocIORenderer
                'Sets true to optimize the memory usage for identical images
                renderer.Settings.OptimizeIdenticalImages = True
                'Converts Word document into PDF document
                Dim pdfDocument As PdfDocument = renderer.ConvertToPDF(wordDocument)
                'Closes the instance of Word document object
                wordDocument.Close()
                'Releases the resources occupied by DocIORenderer instance
                renderer.Dispose()
                'Saves the PDF file  
                Dim outputStream As MemoryStream = New MemoryStream
                pdfDocument.Save(outputStream)
                'Closes the instance of PDF document object
                pdfDocument.Close()
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.DocIORenderer.DocIORendererSettings.PdfConformanceLevel" -->
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.EmbedFonts">
            <summary>
            Gets or sets a value indicating whether to embed fonts in the converted PDF document. Default value is <b>false</b>
            </summary>
            <value>
            <b>True:</b> if need to embed fonts in the converted PDF document; otherwise, <b>False</b>.
            </value>
            <remarks> This property is supported to embed TrueType fonts only.</remarks>      
            <example>This example illustrates EmbedFonts property of DocIORenderer settings.        
            <code lang = "C#">
                FileStream fileStream = new FileStream("Template.docx", FileMode.Open);
                //Loads an existing Word document
                WordDocument wordDocument = new WordDocument(fileStream, FormatType.Docx);
                //Instantiates DocIORenderer instance for Word to PDF conversion
                DocIORenderer renderer = new DocIORenderer();
                //Sets EmbedFonts property as true, to embed fonts in resultant PDF
                renderer.Settings.EmbedFonts = true;
                //Converts Word document into PDF document
                PdfDocument pdfDocument = renderer.ConvertToPDF(wordDocument);
                //Closes the instance of Word document object
                wordDocument.Close();
                //Releases the resources occupied by DocIORenderer instance
                renderer.Dispose();
                //Saves the PDF file  
                MemoryStream outputStream = new MemoryStream();
                pdfDocument.Save(outputStream);
                //Closes the instance of PDF document object
                pdfDocument.Close();
            </code>
            <code lang = "VB">
                Dim fileStream As FileStream = New FileStream("Template.docx", FileMode.Open)
                'Loads an existing Word document
                Dim wordDocument As WordDocument = New WordDocument(fileStream, FormatType.Docx)
                'Instantiates DocIORenderer instance for Word to PDF conversion
                Dim renderer As DocIORenderer = New DocIORenderer
                'Sets EmbedFonts property as true, to embed fonts in resultant PDF
                renderer.Settings.EmbedFonts = True
                'Converts Word document into PDF document
                Dim pdfDocument As PdfDocument = renderer.ConvertToPDF(wordDocument)
                'Closes the instance of Word document object
                wordDocument.Close()
                'Releases the resources occupied by DocIORenderer instance
                renderer.Dispose()
                'Saves the PDF file  
                Dim outputStream As MemoryStream = New MemoryStream
                pdfDocument.Save(outputStream)
                'Closes the instance of PDF document object
                pdfDocument.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.EmbedCompleteFonts">
            <summary>
            Gets or sets a value indicating whether to embed the complete font information in the converted PDF document. Default value is <b>false</b>
            </summary>
            <value>
            <b>True:</b> if need to embed the complete font information in the converted PDF document; otherwise, <b>False</b>.
            </value>
            <remarks>        
            <list type="bullet">
            <item>This property is used to indicate whether the complete font information of 
            the characters in the resultant PDF document to embedded or not.</item>
            <item>This property is supported to embed TrueType fonts only.</item>        
            </list>
            </remarks> 
            <example>This example illustrates EmbedCompleteFonts property of DocIORenderer settings.        
            <code lang = "C#">
                FileStream fileStream = new FileStream("Template.docx", FileMode.Open);
                //Loads an existing Word document
                WordDocument wordDocument = new WordDocument(fileStream, FormatType.Docx);
                //Instantiates DocIORenderer instance for Word to PDF conversion
                DocIORenderer renderer = new DocIORenderer();
                //Sets the embed complete font information in converted PDF
                renderer.Settings.EmbedCompleteFonts = true;
                //Converts Word document into PDF document
                PdfDocument pdfDocument = renderer.ConvertToPDF(wordDocument);
                //Closes the instance of Word document object
                wordDocument.Close();
                //Releases the resources occupied by DocIORenderer instance
                renderer.Dispose();
                //Saves the PDF file  
                MemoryStream outputStream = new MemoryStream();
                pdfDocument.Save(outputStream);
                //Closes the instance of PDF document object
                pdfDocument.Close();
            </code>
            <code lang = "VB">
                Dim fileStream As FileStream = New FileStream("Template.docx", FileMode.Open)
                'Loads an existing Word document
                Dim wordDocument As WordDocument = New WordDocument(fileStream, FormatType.Docx)
                'Instantiates DocIORenderer instance for Word to PDF conversion
                Dim renderer As DocIORenderer = New DocIORenderer
                'Sets the embed complete font information in converted PDF
                renderer.Settings.EmbedCompleteFonts = True
                'Converts Word document into PDF document
                Dim pdfDocument As PdfDocument = renderer.ConvertToPDF(wordDocument)
                'Closes the instance of Word document object
                wordDocument.Close()
                'Releases the resources occupied by DocIORenderer instance
                renderer.Dispose()
                'Saves the PDF file  
                Dim outputStream As MemoryStream = New MemoryStream
                pdfDocument.Save(outputStream)
                'Closes the instance of PDF document object
                pdfDocument.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.AutoTag">
            <summary>
             Gets or sets a value indicates whether the converted PDF document is tagged or not.  Default value is <b>false</b>
            </summary>
            <value>
             <b>True:</b> if need to preserve the accessible structure tags from Word document to the converted PDF; otherwise, <b>False</b>.
            </value>
            <remarks>        
            <list type="bullet">
            <remarks> Set this property as true, to preserve the accessible structure tags from Word document to the converted PDF. Using this property Word documents can be converted to PDF with 508 compliance.
            </remarks>.
            <item>This property will set the title and description for images, diagrams and other objects in the generated PDF document. This information is useful for people with vision or cognitive impairments who may not able to see or understand the object </item>        
            <item>This property is only applicable while converting the Word document as PDF document.</item>
            </list>
            </remarks> 
            <example>This example illustrates how to convert an Word document to PDF with AutoTag property.        
            <code lang = "C#">
                FileStream fileStream = new FileStream("Template.docx", FileMode.Open);
                //Loads an existing Word document
                WordDocument wordDocument = new WordDocument(fileStream, FormatType.Docx);
                //Instantiates DocIORenderer instance for Word to PDF conversion
                DocIORenderer renderer = new DocIORenderer();
                //Sets the accessible structure tags in converted PDF
                renderer.Settings.AutoTag = true;
                //Converts Word document into PDF document
                PdfDocument pdfDocument = renderer.ConvertToPDF(wordDocument);
                //Closes the instance of Word document object
                wordDocument.Close();
                //Releases the resources occupied by DocIORenderer instance
                renderer.Dispose();
                //Saves the PDF file  
                MemoryStream outputStream = new MemoryStream();
                pdfDocument.Save(outputStream);
                //Closes the instance of PDF document object
                pdfDocument.Close();
            </code>     
            <code lang="VB">
                Dim fileStream As FileStream = New FileStream("Template.docx", FileMode.Open)
                'Loads an existing Word document
                Dim wordDocument As WordDocument = New WordDocument(fileStream, FormatType.Docx)
                'Instantiates DocIORenderer instance for Word to PDF conversion
                Dim renderer As DocIORenderer = New DocIORenderer
                'Sets the accessible structure tags in converted PDF
                renderer.Settings.AutoTag = True
                'Converts Word document into PDF document
                Dim pdfDocument As PdfDocument = renderer.ConvertToPDF(wordDocument)
                'Closes the instance of Word document object
                wordDocument.Close()
                'Releases the resources occupied by DocIORenderer instance
                renderer.Dispose()
                'Saves the PDF file  
                Dim outputStream As MemoryStream = New MemoryStream
                pdfDocument.Save(outputStream)
                'Closes the instance of PDF document object
                pdfDocument.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.ExportBookmarks">
            <summary>
             Gets or sets a value indicates whether to export Word document headings or bookmarks as PDF bookmarks while performing Word to PDF conversion. Default value is <b>ExportBookmarkType.Bookmarks<see cref="F:Syncfusion.DocIO.ExportBookmarkType.Bookmarks"/></b>
            </summary>
            <value>
            The <see cref="T:Syncfusion.DocIO.ExportBookmarkType"/> member specifies whether Word headings or bookmarks need to be considered in Word to PDF conversion.
            </value>
            <remarks>
            <list>
            <item>The <see cref="F:Syncfusion.DocIO.ExportBookmarkType.Headings"/> will consider only headings within the main document and text boxes not within headers, footers, endnotes, footnotes, or comments.</item>
            <item>This property is only applicable while converting the Word document as PDF document.</item>
            </list>
            </remarks> 
            <example>This example illustrates how to convert an Word document headings to PDF Bookmarks with the help of ExportBookmark property.        
            <code lang = "C#">	
                //Creates a new Word document
                WordDocument wordDocument = new WordDocument();
                //Adds a section into the word document
                IWSection section = wordDocument.AddSection();
                //Adds a paragraph into the section
                IWParagraph paragraph = section.AddParagraph();
                //Adds a text into the paragraph
                paragraph.AppendText("First Chapter1");
                //Applies style for the text
                paragraph.ApplyStyle(BuiltinStyle.Heading1);
                paragraph.AppendText("First Chapter2");
                paragraph.ApplyStyle(BuiltinStyle.Heading2);
                paragraph.AppendText("First Chapter3");
                paragraph.ApplyStyle(BuiltinStyle.Heading3);
                //Instantiates DocIORenderer instance for Word to PDF conversion
                DocIORenderer renderer = new DocIORenderer();
                //Sets ExportBookmarks for preserving Word document headings as PDF bookmarks
                renderer.Settings.ExportBookmarks = Syncfusion.DocIO.ExportBookmarkType.Headings;
                //Converts Word document into PDF document
                PdfDocument pdfDocument = renderer.ConvertToPDF(wordDocument);
                //Closes the instance of Word document object
                wordDocument.Close();
                //Releases the resources occupied by DocIORenderer instance
                renderer.Dispose();
                //Saves the PDF file  
                MemoryStream outputStream = new MemoryStream();
                pdfDocument.Save(outputStream);
                //Closes the instance of PDF document object
                pdfDocument.Close();  
            </code>
            <code lang="VB">
                'Creates a new Word document
                Dim wordDocument As WordDocument = New WordDocument
                'Adds a section into the word document
                Dim section As IWSection = wordDocument.AddSection
                'Adds a paragraph into the section
                Dim paragraph As IWParagraph = section.AddParagraph
                'Adds a text into the paragraph
                paragraph.AppendText("First Chapter1")
                'Applies style for the text
                paragraph.ApplyStyle(BuiltinStyle.Heading1)
                paragraph.AppendText("First Chapter2")
                paragraph.ApplyStyle(BuiltinStyle.Heading2)
                paragraph.AppendText("First Chapter3")
                paragraph.ApplyStyle(BuiltinStyle.Heading3)
                'Instantiates DocIORenderer instance for Word to PDF conversion
                Dim renderer As DocIORenderer = New DocIORenderer
                'Sets ExportBookmarks for preserving Word document headings as PDF bookmarks
                renderer.Settings.ExportBookmarks = Syncfusion.DocIO.ExportBookmarkType.Headings
                Dim pdfDocument As PdfDocument = renderer.ConvertToPDF(wordDocument)
                'Closes the instance of Word document object
                wordDocument.Close()
                'Releases the resources occupied by DocIORenderer instance
                renderer.Dispose()
                Dim outputStream As MemoryStream = New MemoryStream
                pdfDocument.Save(outputStream)
                'Closes the instance of PDF document object
                pdfDocument.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.UpdateDocumentFields">
            <summary>
            Gets or sets a value that indicates whether to update fields present in the Word document while converting a Word document to PDF.Default value is <b>false</b>.
            </summary>
            <value><b>True</b> If true, updates the fields present in the Word document during Word to PDF conversion. otherwise, <b>false</b>.</value>
            <remarks>
            <para> This API is alternative for UpdateDocumentFields() <see cref="M:Syncfusion.DocIO.DLS.WordDocument.UpdateDocumentFields"/> to improve performance, if your requirement is to update the fields and convert the Word document to PDF.</para>
            <para>You can remove UpdateDocumentFields() method and enable UpdateDocumentFields <see cref="P:Syncfusion.DocIORenderer.DocIORendererSettings.UpdateDocumentFields"/> property to update the Word document fields and convert the Word document to PDF in optimized way.</para>
            </remarks>
            <example>
            <para>The following code example demonstrates how to update the fields present while performing Word to PDF conversion.</para>
            <code lang = "C#">
                FileStream fileStream = new FileStream("Template.docx", FileMode.Open);
                //Loads an existing Word document
                WordDocument wordDocument = new WordDocument(fileStream, FormatType.Docx);
                //Instantiates DocIORenderer instance for Word to PDF conversion
                DocIORenderer renderer = new DocIORenderer();
                //Updates the fields present in Word document
                renderer.Settings.UpdateDocumentFields = true;
                //Converts Word document into PDF document
                PdfDocument pdfDocument = renderer.ConvertToPDF(wordDocument);
                //Closes the instance of Word document object
                wordDocument.Close();
                //Releases the resources occupied by DocIORenderer instance
                renderer.Dispose();
                //Saves the PDF file  
                MemoryStream outputStream = new MemoryStream();
                pdfDocument.Save(outputStream);
                //Closes the instance of PDF document object
                pdfDocument.Close();
            </code>
            <code lang = "VB">
                Dim fileStream As FileStream = New FileStream("Template.docx", FileMode.Open)
                'Loads an existing Word document
                Dim wordDocument As WordDocument = New WordDocument(fileStream, FormatType.Docx)
                'Instantiates DocIORenderer instance for Word to PDF conversion
                Dim renderer As DocIORenderer = New DocIORenderer
                'Updates the fields present in Word document
                renderer.Settings.UpdateDocumentFields = true
                'Converts Word document into PDF document
                Dim pdfDocument As PdfDocument = renderer.ConvertToPDF(wordDocument)
                'Closes the instance of Word document object
                wordDocument.Close()
                'Releases the resources occupied by DocIORenderer instance
                renderer.Dispose()
                'Saves the PDF file  
                Dim outputStream As MemoryStream = New MemoryStream
                pdfDocument.Save(outputStream)
                'Closes the instance of PDF document object
                pdfDocument.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.ChartRenderingOptions">
            <summary>
            Gets <see cref="T:Syncfusion.OfficeChart.ChartRenderingOptions"/> for charts present in the Word document. By Default <see cref="T:Syncfusion.OfficeChart.ScalingMode"/> is set to <see cref="F:Syncfusion.OfficeChart.ScalingMode.Best"/> and <see cref="T:Syncfusion.OfficeChart.ExportImageFormat"/> is set to <see cref="F:Syncfusion.OfficeChart.ExportImageFormat.Jpeg"/>.
            </summary>
            <value>If not initialized and specified, Default values <see cref="F:Syncfusion.OfficeChart.ExportImageFormat.Jpeg"/> and <see cref="F:Syncfusion.OfficeChart.ScalingMode.Best"/> will be set.</value>
            <example>This example illustrates ChartRenderingOptions property of DocIORenderer settings.        
            <code lang = "C#">
                FileStream fileStream = new FileStream("Template.docx", FileMode.Open);
                //Loads an existing Word document
                WordDocument wordDocument = new WordDocument(fileStream, FormatType.Docx);
                //Instantiates DocIORenderer instance for Word to PDF conversion
                DocIORenderer renderer = new DocIORenderer();
                //Sets Export Chart Image Options.
                renderer.Settings.ChartRenderingOptions.ImageFormat = ExportImageFormat.Png;
                //Converts Word document into PDF document
                PdfDocument pdfDocument = renderer.ConvertToPDF(wordDocument);
                //Closes the instance of Word document object
                wordDocument.Close();
                //Releases the resources occupied by DocIORenderer instance
                renderer.Dispose();
                //Saves the PDF file  
                MemoryStream outputStream = new MemoryStream();
                pdfDocument.Save(outputStream);
                //Closes the instance of PDF document object
                pdfDocument.Close();
            </code>
            <code lang = "VB">
                Dim fileStream As FileStream = New FileStream("Template.docx", FileMode.Open)
                'Loads an existing Word document
                Dim wordDocument As WordDocument = New WordDocument(fileStream, FormatType.Docx)
                'Instantiates DocIORenderer instance for Word to PDF conversion
                Dim renderer As DocIORenderer = New DocIORenderer
                'Sets Export Chart Image Options.
                renderer.Settings.ChartRenderingOptions.ImageFormat = ExportImageFormat.Png
                'Converts Word document into PDF document
                Dim pdfDocument As PdfDocument = renderer.ConvertToPDF(wordDocument)
                'Closes the instance of Word document object
                wordDocument.Close()
                'Releases the resources occupied by DocIORenderer instance
                renderer.Dispose()
                'Saves the PDF file  
                Dim outputStream As MemoryStream = New MemoryStream
                pdfDocument.Save(outputStream)
                'Closes the instance of PDF document object
                pdfDocument.Close()
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.DocIORenderer.Rendering.ShapePath._rectBounds">
             <summary>
            
             </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.Rendering.ShapePath._shapeGuide">
             <summary>
            
             </summary>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.#ctor(Syncfusion.Drawing.RectangleF,System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
            
             </summary>
             <param name="bounds"></param>
             <param name="shapeGuide"></param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCurvedConnectorPath">
            <summary>
            Get Curved Connector path
            </summary>
            <formula>
            formulaColl.Add("x2","*/ w adj1 100000");
            formulaColl.Add("x1","+/ l x2 2");
            formulaColl.Add("x3","+/ r x2 2");
            formulaColl.Add("y3","*/ h 3 4");
            </formula>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCurvedConnector2Path">
            <summary>
            This method is used to get the Curved connector 2 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCurvedConnector4Path">
            <summary>
            This method is used to call the Get Curved Connector 4 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCurvedConnector5Path">
            <summary>
            This method is used to get the curved connector5 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetBentConnectorPath">
            <summary>
            Get Bent Connector path
            </summary>
            <formula>
            formulaColl.Add("x1","*/ w adj1 100000");
            </formula>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetBendConnector2Path">
            <summary>
            This method is used to get the bend connector 2 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetBentConnector4Path">
            <summary>
            This method is used to get the bend connector 4 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetBentConnector5Path">
            <summary>
            This method is used to get the bend connector 5 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRoundedRectanglePath">
             <summary>
            Gets Rounded Rectangle Path
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetSnipSingleCornerRectanglePath">
            <summary>
            Gets Snip Single Corner Rectangle Path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetSnipSameSideCornerRectanglePath">
            <summary>
            Gets Snip Same Side Corner Rectangle Path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetSnipDiagonalCornerRectanglePath">
            <summary>
            Gets Snip Diagonal Corner Rectangle Path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetSnipAndRoundSingleCornerRectanglePath">
            <summary>
            Gets Snip And Round Single Corner Rectangle Path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRoundSingleCornerRectanglePath">
            <summary>
            Gets Round Single Corner Rectangle Path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRoundSameSideCornerRectanglePath">
            <summary>
            Gets Round Same Side Corner Rectangle Path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRoundDiagonalCornerRectanglePath">
            <summary>
            Gets Round Diagonal Corner Rectangle Path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetTrianglePath">
            <summary>
            Get Triangle path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetParallelogramPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetTrapezoidPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRegularPentagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetHexagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetHeptagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetOctagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDecagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDodecagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetPiePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetChordPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetTearDropPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFramePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetHalfFramePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetL_ShapePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDiagonalStripePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCrossPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetPlaquePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCanPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCubePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetBevelPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDonutPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetNoSymbolPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetBlockArcPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFoldedCornerPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetSmileyFacePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetHeartPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLightningBoltPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetSunPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetMoonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCloudPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetArcPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDoubleBracketPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDoubleBracePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLeftBracketPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRightBracketPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLeftBracePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRightBracePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRightArrowPath">
            <summary>
            Gets the right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLeftArrowPath">
            <summary>
            Gets the left arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDownArrowPath">
            <summary>
            Gets down arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLeftRightArrowPath">
            <summary>
            Gets the left right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCurvedRightArrowPath">
            <summary>
            Gets the curved right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCurvedLeftArrowPath">
            <summary>
            Gets the curved left arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCurvedUpArrowPath">
            <summary>
            Gets the curved up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCurvedDownArrowPath">
            <summary>
            Gets the curved down arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetUpDownArrowPath">
            <summary>
            Gets up down arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetQuadArrowPath">
            <summary>
            Gets the quad arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLeftRightUpArrowPath">
            <summary>
            Gets the left right up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetBentArrowPath">
            <summary>
            Gets the bent arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetUTrunArrowPath">
            <summary>
            Gets the U trun arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLeftUpArrowPath">
            <summary>
            Gets the left up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetBentUpArrowPath">
            <summary>
            Gets the bent up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetStripedRightArrowPath">
            <summary>
            Gets the striped right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetNotchedRightArrowPath">
            <summary>
            Gets the notched right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetPentagonPath">
            <summary>
            Gets the pentagon path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetChevronPath">
            <summary>
            Gets the chevron path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRightArrowCalloutPath">
            <summary>
            Gets the right arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDownArrowCalloutPath">
            <summary>
            Gets down arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLeftArrowCalloutPath">
            <summary>
            Gets the left arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetUpArrowCalloutPath">
            <summary>
            Gets up arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLeftRightArrowCalloutPath">
            <summary>
            Gets the left right arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetQuadArrowCalloutPath">
            <summary>
            Gets the quad arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCircularArrowPath">
            <summary>
            Gets the circular arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetMathPlusPath">
            <summary>
            Gets the math plus path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetMathMinusPath">
            <summary>
            Gets the math minus path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetMathMultiplyPath">
            <summary>
            Gets the math multiply path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetMathDivisionPath">
            <summary>
            Gets the math division path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetMathEqualPath">
            <summary>
            Gets the math equal path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetMathNotEqualPath">
            <summary>
            Gets the math not equal path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartAlternateProcessPath">
            <summary>
            Gets the flow chart alternate process path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartPredefinedProcessPath">
            <summary>
            Gets the flow chart predefined process path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartInternalStoragePath">
            <summary>
            Gets the flow chart internal storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartDocumentPath">
            <summary>
            Gets the flow chart document path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartMultiDocumentPath">
            <summary>
            Gets the flow chart multi document path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartTerminatorPath">
            <summary>
            Gets the flow chart terminator path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartPreparationPath">
            <summary>
            Gets the flow chart preparation path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartManualInputPath">
            <summary>
            Gets the flow chart manual input path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartManualOperationPath">
            <summary>
            Gets the flow chart manual operation path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartConnectorPath">
            <summary>
            Gets the flow chart connector path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartOffPageConnectorPath">
            <summary>
            Gets the flow chart off page connector path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartCardPath">
            <summary>
            Gets the flow chart card path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartPunchedTapePath">
            <summary>
            Gets the flow chart punched tape path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartSummingJunctionPath">
            <summary>
            Gets the flow chart summing junction path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartOrPath">
            <summary>
            Gets the flow chart or path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartCollatePath">
            <summary>
            Gets the flow chart collate path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartSortPath">
            <summary>
            Gets the flow chart sort path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartExtractPath">
            <summary>
            Gets the flow chart extract path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartMergePath">
            <summary>
            Gets the flow chart merge path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartOnlineStoragePath">
            <summary>
            Gets the flow chart online storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartDelayPath">
            <summary>
            Gets the flow chart delay path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartSequentialAccessStoragePath">
            <summary>
            Gets the flow chart sequential access storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartMagneticDiskPath">
            <summary>
            Gets the flow chart magnetic disk path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartDirectAccessStoragePath">
            <summary>
            Gets the flow chart direct access storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartDisplayPath">
            <summary>
            Gets the flow chart display path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRectangularCalloutPath">
            <summary>
            Gets the rectangular callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRoundedRectangularCalloutPath">
            <summary>
            Gets the rounded rectangular callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetOvalCalloutPath">
            <summary>
            Gets the oval callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCloudCalloutPath">
            <summary>
            Gets the cloud callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout1Path">
            <summary>
            Gets the line callout1 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout2Path">
            <summary>
            Gets the line callout2 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout3Path">
            <summary>
            Gets the line callout3 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout1AccentBarPath">
            <summary>
            Gets the line callout1 accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout2AccentBarPath">
            <summary>
            Gets the line callout2 accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout3AccentBarPath">
            <summary>
            Gets the line callout3 accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout1NoBorderPath">
            <summary>
            Gets the line callout1 no border path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout2NoBorderPath">
            <summary>
            Gets the line callout2 no border path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout3NoBorderPath">
            <summary>
            Gets the line callout3 no border path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout1BorderAndAccentBarPath">
            <summary>
            Gets the line callout1 border and accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout2BorderAndAccentBarPath">
            <summary>
            Gets the line callout2 border and accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout3BorderAndAccentBarPath">
            <summary>
            Gets the line callout3 border and accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetVMLCustomShapePath(System.Collections.Generic.List{Syncfusion.DocIO.DLS.Path2D})">
            <summary>
            Gets the VML custom shape path path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCustomGeomentryPath(Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfPath,Syncfusion.DocIO.DLS.Shape)">
            <summary>
            Gets a custom shape (DrawingML) GraphicPath.
            </summary>
            <param name="bounds">Represent a bounds of custom shape.</param>
            <param name="path">Represent a GraphicPath/PdfPath object.</param>
            <param name="shape">Represent a custom shape object.</param>
            <returns>Returns a GraphicPath/PdfPath with custom shape drawing points.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetGeomentryPath(Syncfusion.Pdf.Graphics.PdfPath,System.Collections.Generic.List{System.Double},System.Double,System.Double,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets a geometry path of Path2D.
            </summary>
            <param name="path">Represent a GraphicPath.</param>
            <param name="pathElements">Represent a input path elements.</param>
            <param name="pathWidth">Represent a width of Path.</param>
            <param name="pathHeight">Represent a height of Path.</param>
            <param name="bounds">Represent a bounds of Path.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetGeomentryPathXValue(System.Double,System.Double,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets a X value of Path.
            </summary>
            <param name="pathWidth">Represent a width of Path.</param>
            <param name="x">Represent a X value.</param>
            <param name="bounds">Represent a bounds of Path.</param>
            <returns>Returns a X value.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetGeomentryPathYValue(System.Double,System.Double,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets a Y value of Path.
            </summary>
            <param name="pathHeight">Represent a height of Path.</param>
            <param name="y">Represent a Y value.</param>
            <param name="bounds">Represent a bounds of Path.</param>
            <returns>Returns a Y value.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.ConvertPathElement(System.String,System.Collections.Generic.List{System.Double},System.Collections.Generic.Dictionary{System.String,System.String},Syncfusion.DocIO.DLS.Path2D,System.Collections.Generic.Dictionary{System.String,System.Single})">
            <summary>
            Convert the path element of custom shape
            </summary>
            <param name="pathElement">Represent a path element to convert.</param>
            <param name="pathElements">Represent a converted path elements.</param>
            <param name="combinedValues">Represent a formula collection.</param>
            <param name="path">Represent a path object.</param>
            <param name="calculatedValues">Represent formula with its values.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDegreeValue(System.Single)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetXYPosition(System.Single,System.Single,System.Single)">
             <summary>
            
             </summary>
             <param name="xDifference"></param>
             <param name="yDifference"></param>
             <param name="positionRatio"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetPathAdjustValue(Syncfusion.DocIO.DLS.AutoShapeType)">
            <summary>
            Get Path adjust value
            </summary>
            <param name="shapeType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.ParseShapeFormula(Syncfusion.DocIO.DLS.AutoShapeType)">
            <summary>
            Parse Shape Formula
            </summary>
            <param name="shapeType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFormulaValues(Syncfusion.DocIO.DLS.AutoShapeType,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Gets Formula Values
            </summary>
            <param name="shapeType"></param>
            <param name="formulaColl"></param>
            <param name="isAdjValue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetOperandValues(Syncfusion.DocIO.DLS.AutoShapeType,System.Collections.Generic.Dictionary{System.String,System.Single}@,System.String[],System.Boolean)">
            <summary>
            Gets Operand Values
            </summary>
            <param name="shapeType"></param>
            <param name="formulaValues"></param>
            <param name="splitFormula"></param>
            <param name="isAdjValue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetPresetOperandValue(System.String)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetResultValue(System.String,System.Single[])">
             <summary>
            
             </summary>
             <param name="formula"></param>
             <param name="operandValues"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetShapeFormula(Syncfusion.DocIO.DLS.AutoShapeType)">
             <summary>
            
             </summary>
             <param name="shapeType"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDefaultPathAdjValues(Syncfusion.DocIO.DLS.AutoShapeType)">
             <summary>
            
             </summary>
             <param name="shapeType"></param>
             <returns></returns>
        </member>
        <member name="T:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext">
            <summary>
            Represents the class which acts as an drawing context.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DEF_SCRIPT_FACTOR">
            <summary>
            The default script factor for sub/super script.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DEF_DINOFFC_TEXT_FACTOR">
            <summary>
            The default factor values to fit the DinOffc font text into the corresponding font grid.
            /// </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DEF_FONT_SIZE">
            <summary>
            The default font size.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DEF_PICBULLET_MIN_FONT_SIZE">
            <summary>
            The default minimum font size for picture bullet.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DEF_PICBULLET_SCALE_FACTOR">
            <summary>
            The default scale factor for picture bullet.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.headerImageCollection">
            <summary>
            This collection contains the Header images.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.m_pdfgraphics">
            <summary>
            Drawing Graphics.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.m_imageQuality">
            <summary>
            Image Quality.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.m_preserveFormFields">
            <summary>
            PreserveFormFields.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.pdfFontCollection">
            <summary>
            PdfFont collection
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.m_substitutedFonts">
            <summary>
            This collection contains the Pdf fonts which are created by SubstitutedFont event streams.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.m_chartRenderingOptions">
            <summary>
            Chart Rendering Options to Specify Image quality and image format.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.m_chartToImageconverter">
            <summary>
            Holds the ChartToImageConverter instance.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.m_graphics">
            <summary>
            Drawing Graphics.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.m_hyperLinks">
            <summary>
            Holds the list of hyperlinks and its corrsponding bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.m_commentId">
            <summary>
            Used to skip a text highlighter between the comment ranges.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.autoTagCount">
            <summary>
            Auto tag index
             </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.currParagraphIndex">
             <summary>
            Skips the bookmark add for all the textrange of paragraph.
             </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.underLineValues">
            <summary>
            We have hold the underline style properties and bounds to draw a line.
            using this dictionary, we have draw the line after the text drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.strikeThroughValues">
            <summary>
            We have hold the Strike-Through properties and bounds to draw a line.
            using this dictionary, we have draw the line after the text drawn.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsListCharacter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.RecreateNestedMetafile">
            <summary>
            Gets or sets a value that indicates whether to regenerate the nested EMF images present in the Word document during PDF conversion. Default value is<b>false</b>.
            </summary>
            <value><b>True</b> if it is necessary to regenerate the nested EMF images present in the Word document during PDF conversion; otherwise <b>false</b>.</value>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ClearFontCache">
            <summary>
            Clear the font cache.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.PdfDocument">
            <summary>
            Gets or sets the PdfDocument.
            </summary>
            <value>The PdfDocument.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CurrentBookmarkName">
            <summary>
            Get the Current Bookmark name
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ExportBookmarks">
            <summary>
            Gets or sets the value indicates whether to export Word document heading as PDF bookmarks.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.EnableComplexScript">
            <summary>
            Decides whether, we should enable PdfMetafile.ComplexScript property for current page.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.PDFGraphics">
            <summary>
            Gets or sets the graphics.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ImageQuality">
            <summary>
            Gets or sets the ImageQuality.
            </summary>
            <value>image quality</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.PreserveFormFields">
            <summary>
            Gets or sets the PreserveFormFields.
            </summary>
            <value>PreserveFormFields</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FallbackFonts">
            <summary>
            Gets a Fallback font collection of Word document.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FontStreams">
            <summary>
            Gets or set the embedded fonts.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Graphics">
            <summary>
            Gets or sets the graphics.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GraphicsBmp">
            <summary>
            Gets the bitmap graphics.
            </summary>
            <value> The graphics.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Hyperlinks">
            <summary>
            Gets the hyperlinks.
            </summary>
            <value>The hyperlinks.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.BookmarkHyperlinksList">
            <summary>
            Gets the bookmark hyperlinks list.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Bookmarks">
            <summary>
            Gets the bookmarks.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.OverLappedShapeWidgets">
            <summary>
            Gets the overlapping shape widgets.
            </summary>
            <value>The overlapping shape widgets.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FontMetric">
            <summary>
            Gets the font metric.
            </summary>
            <value>
            The font metric.
            </value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.StringFormt">
            <summary>
            Gets the string formt.
            </summary>
            <value>
            The string formt.
            </value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.EmbedFonts">
            <summary>
            Gets or sets a value indicating whether to embed fonts to converted PDF in Word to PDF conversion.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.EmbedCompleteFonts">
            <summary>
            Gets or sets a value indicating whether to embed the complete font information in the resultant PDF document.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AutoTag">
             <summary>
            Gets or sets a value indicates whether the converted PDF document is tagged or not.
             </summary>
             Remarks: Set this property as true, to preserve the accessible structure tags from Word document to the converted PDF. Using this property Word documents can be converted to PDF with 508 compliance.
             Setting this property as true will automatically enable <see cref="!:Syncfusion.DocToPDFConverter.DocToPDFConverterSettings.EnableFastRendering"/> property.
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ChartRenderingOptions">
            <summary>
            Chart Rendering Options to Specify Image quality and image format.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ChartToImageconverter">
            <summary>
            Gets the ChartToImageConverter instance.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.#ctor(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.GraphicsUnit,Syncfusion.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext"/> class.
            </summary>
            <param name="pdfgraphics">The graphics.</param>
            <param name="graphics">The page unit.</param>
            <param name="pageUnit">The page unit.</param>
            <param name="pdfDocument">The page unit.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawOverLappedShapeWidgets(System.Boolean)">
            <summary>
            Draws the Overlapping shape widgets.
            Currently handled only for Docx format documents
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsColorMismatched(Syncfusion.DocIO.DLS.IEntity,Syncfusion.DocIO.DLS.WParagraph)">
            <summary>
            Paragraph has a color which is mismatched from the next sibling paragraph color 
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreateAutoTag(Syncfusion.Pdf.PdfTagType,System.String,System.String,System.Boolean)">
            <summary>
            Create Auto tag.
            </summary>
            <param name="tagType"></param>
            <param name="alternateText"></param>
            <param name="title"></param>
            <param name="isOverlapedShape"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePdfStructureElement(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Creates Pdf structure element for headings and paragraph.
            </summary>
            <param name="paragraph">The paragraph.</param>
            <param name="layoutedWidget">The layouted widge.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetHeadingLevelPdfTagType(System.Int32)">
            <summary>
            Gets the Pdf tag type enum value for heading style.
            </summary>
            <param name="outlineLevel">The outline level of the heading style.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePdfStructureElement(Syncfusion.Layouting.LayoutedWidget,Syncfusion.DocIO.DLS.Entity,Syncfusion.DocIO.DLS.WTableCell)">
            <summary>
            Creates Pdf structure element for table, table row and table data.
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <param name="ownerWidget">The owner widget.</param>
            <param name="cellWidget">The cell widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawParagraph(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the paragraph.
            </summary>
            <param name="paragraph">The paragraph.</param>
            <param name="ltWidget">The lt widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTextBox(Syncfusion.DocIO.DLS.WTextBox,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the text box.
            </summary>
            <param name="textBox">The text box.</param>
            <param name="ltWidget">The lt widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateClipBounds(Syncfusion.Drawing.RectangleF)">
            <summary>
            We have handle for rotated childshapes.
            </summary>
            <param name="clipBounds">clipbounds value</param>
            <returns>return the clipbounds value</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawBarTabStop(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw Bar Tab Stop of the paragraph
            </summary>
            <param name="paragraph"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetBoundsToDrawParagraphBackGroundColor(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Get bounds to draw a paragraph back ground color and texture styles
            </summary>
            <param name="paragraph"></param>
            <param name="ltWidget"></param>
            <param name="isParagraphMarkIsHidden"></param>
            <param name="isLineDrawing"></param>
            <param name="resetTransform"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsParagraphContainingListHasBreak(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Check whether Paragraph Containing list has break.
            </summary>
            <param name="ltWidget">ltWidget</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetBaseEntity(Syncfusion.DocIO.DLS.Entity)">
            <summary>
            Get the base entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsNeedtoUpdateTabPosition(Syncfusion.Layouting.LayoutedWidget,System.Int32)">
            <summary>
            Decides whether, we should update the tab position or not.
            </summary>
            <param name="widget">The widget.</param>
            <param name="index">Index of the entity.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateTabPosition(Syncfusion.Layouting.LayoutedWidget,Syncfusion.Drawing.RectangleF)">
            <summary>
            Updates the tab position.
            </summary>
            <param name="widget">The widget.</param>
            <param name="clientArea">The client area.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateDecimalTabPosition(Syncfusion.Layouting.LayoutedWidget,Syncfusion.Drawing.RectangleF)">
            <summary>
            Updates the decimal tab position.
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <param name="clientArea">The client area.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateDecimalTabPositionInCell(Syncfusion.Layouting.LayoutedWidget,Syncfusion.Drawing.RectangleF)">
            <summary>
            Updates the decimal tab position in cell.
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <param name="clientArea">The client area.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsDecimalTabStart(Syncfusion.Layouting.LayoutedWidget,System.Int32,System.Boolean,System.Int32,System.Single,System.Boolean)">
            <summary>
            Determine whether is Decimal Tab Start
            </summary>
            <param name="ltWidget"></param>
            <param name="decimalTabStart"></param>
            <param name="isDecimalTab"></param>
            <param name="i"></param>
            <param name="widthToShift"></param>
            <param name="isInCell"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetWidthToShift(Syncfusion.Layouting.LayoutedWidget,System.Int32,System.Boolean,Syncfusion.Drawing.RectangleF)">
            <summary>
            Get Width To Shift the xposition of childwidget
            </summary>
            <param name="ltWidget"></param>
            <param name="decimalTabStart"></param>
            <param name="isInCell"></param>
            <param name="clientArea"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetCurrentTabFormat(Syncfusion.DocIO.DLS.WParagraph)">
            <summary>
            Get the paragraph format for current tab
            </summary>
            <param name="paragraph">The Paragraph</param>
            <returns>Paragrph format</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetColumnWidth(Syncfusion.DocIO.DLS.WParagraph)">
            <summary>
            Get Column Width
            </summary>
            <param name="paragraph">The Paragraph</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLeftWidth(Syncfusion.DocIO.DLS.WParagraph,System.Int32,System.Int32)">
            <summary>
            Get Left width of the Decimal seperator
            </summary>
            <param name="paragraph"></param>
            <param name="decimalTabStart"></param>
            <param name="decimalTabEnd"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLeftWidth(Syncfusion.Layouting.LayoutedWidget,System.Int32,System.Int32)">
            <summary>
            Get Left width of the Decimal seperator
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <param name="decimalTabStart">The decimal tab start.</param>
            <param name="decimalTabEnd">The decimal tab end.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetIndexOfDecimalseparator(Syncfusion.DocIO.DLS.WParagraph,System.Int32,System.Int32,System.Single@,System.Int32@,System.Boolean@)">
            <summary>
            Get Index of Decimal Separator
            Index denotes the TextRange which have a decimal separator
            </summary>
            <param name="paragraph"></param>
            <param name="decimalTabStart"></param>
            <param name="decimalTabEnd"></param>
            <param name="leftWidth"></param>
            <param name="decimalSeparator"></param>
            <param name="isSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetIndexOfDecimalseparator(Syncfusion.Layouting.LayoutedWidget,System.Int32,System.Int32,System.Single@,System.Int32@,System.Boolean@)">
            <summary>
            Get Index of Decimal Separator
            Index denotes the TextRange which have a decimal separator
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <param name="decimalTabStart">The decimal tab start.</param>
            <param name="decimalTabEnd">The decimal tab end.</param>
            <param name="leftWidth">Width of the left.</param>
            <param name="decimalSeparator">The decimal separator.</param>
            <param name="isSeparator">if set to <c>true</c> [is separator].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsDecimalSeparator(System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Determine whether is Decimal Separator
            </summary>
            <param name="ch"></param>
            <param name="decimalSeparator"></param>
            <param name="isPrevTextHasNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetOwnerParagraph(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Get Owner paragraph of the LayoutedWidget
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetTabEndIndex(Syncfusion.Layouting.LayoutedWidget,System.Int32)">
            <summary>
            Gets the tab end index.
            Index denotes the item, previous of next subsequent tab.
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <param name="startIndex">The start index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetListValue(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.ParagraphLayoutInfo,Syncfusion.DocIO.DLS.WListFormat)">
            <summary>
            Get the current list size.
            </summary>
            <param name="paragraph"></param>
            <param name="paragraphInfo"></param>
            <param name="listFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawList(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget,Syncfusion.DocIO.DLS.WListFormat)">
            <summary>
            Draws the list.
            </summary>
            <param name="paragraph">Paragraph</param>
            <param name="ltWidget">Layouted Widget</param>
            <param name="listFormat">List Format</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawListTabLeader(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.ParagraphLayoutInfo,System.Single,System.Single,System.Single)">
            <summary> 
            Draws the list tab leader.
            </summary>
            <param name="paragraph">The paragraph.</param>
            <param name="paragraphInfo">The paragraph info.</param>
            <param name="listWidth">Width of the list.</param>
            <param name="xPosition">The x position.</param>
            <param name="yPosition">The y position.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetTabLeader(Syncfusion.Layouting.ParagraphLayoutInfo)">
            <summary>
            Gets the tab leader.
            </summary>
            <param name="paragraphInfo">The paragraph info.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetAscentValueForEQField(Syncfusion.DocIO.DLS.WField)">
            <summary>
            Gets the ascet value for Equation field.
            </summary>
            <param name="field">Equation field</param>       
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsLineContainsEQfield(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Check whether the current lines contains the equation field and it
            contains the height of the corresponding line.
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>                      
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsEmptyParagraph(Syncfusion.DocIO.DLS.WParagraph)">
            <summary>
            Determines whether the paragraph is empty
            </summary>
            <param name="para">paragraph</param>
            <returns> returns true if paragraph is empty </returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddCommentMark(Syncfusion.DocIO.DLS.WCommentMark,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Calculate a line points for the WCommentMark.
            </summary>
            <param name="commentMark"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCommentMarks(Syncfusion.DocIO.DLS.RevisionOptions)">
            <summary>
            Draw the WCommentMark.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawAbsoluteTab(Syncfusion.DocIO.DLS.WAbsoluteTab,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw AbsoluteTab
            </summary>
            <param name="absoluteTab"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateAbsoluteTabLeader(Syncfusion.DocIO.DLS.WAbsoluteTab,Syncfusion.Layouting.LayoutedWidget,System.String@)">
            <summary>
            Update AbsoluteTab leader
            </summary>
            <param name="absoluteTab"></param>
            <param name="ltWidget"></param>
            <param name="text"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawSeparator(Syncfusion.DocIO.DLS.WTextRange,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the Footnote separator
            </summary>
            <param name="txtRange">The TXT range.</param>
            <param name="ltWidget">The lt widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawEditableTextRange(Syncfusion.DocIO.DLS.WTextRange,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the Editable text range.
            </summary>
            <param name="txtRange">The TXT range.</param>
            <param name="ltWidget">The lt widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.InverseCharacter(System.Char)">
            <summary>
            Inverse the specified character with suitable bidi character
            </summary>
            <param name="ch">Specify the input character</param>
            <returns>Return the inversed character</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTextRange(Syncfusion.DocIO.DLS.WTextRange,Syncfusion.Layouting.LayoutedWidget,System.String)">
            <summary>
            Draws the text range.
            </summary>
            <param name="txtRange">The TXT range.</param>
            <param name="ltWidget">The lt widget.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsValidFieldResult(Syncfusion.DocIO.DLS.WField,Syncfusion.Layouting.IWidget)">
            <summary>
            Check whether the widget is in field result or not.
            </summary>
            <param name="hyperLinkField">Hyper link field</param>
            <param name="widget">Widget.</param>
            <returns>If the widget is in field result, return True;else false.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateBookmarkTargetPosition(Syncfusion.DocIO.DLS.Entity,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Update Target position to the bookmark hyperlink
            </summary>
            <param name="ent"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreateBookmarkRerefeceLink(Syncfusion.DocIO.DLS.Entity,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Create Bookmark reference link
            </summary>
            <param name="ent"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsTextRangeFollowWithTab(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Determine whether the tab stop is preserved after the text range in the current line
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateTabLeader(Syncfusion.DocIO.DLS.WTextRange,Syncfusion.Layouting.LayoutedWidget,System.String@)">
            <summary>
            Update Tab Width.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FillDots(Syncfusion.Drawing.Font,Syncfusion.Layouting.LayoutedWidget,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.StringFormat,System.String@)">
            <summary>
            Fill with dots for tab leader
            </summary>
            <param name="font">Font</param>
            <param name="ltWidget">Current layouted widget</param>
            <param name="charFormat">Character format of layouted widget</param>
            <param name="format">String format</param>
            <param name="text">text</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FillSingle(Syncfusion.Drawing.Font,Syncfusion.Layouting.LayoutedWidget,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.StringFormat,System.String@)">
            <summary>
            Fill with sigle for tab leader
            </summary>
            <param name="font">Font</param>
            <param name="ltWidget">Current layouted widget</param>
            <param name="charFormat">Character format of layouted widget</param>
            <param name="format">String format</param>
            <param name="text">text</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FillHyphens(Syncfusion.Drawing.Font,Syncfusion.Layouting.LayoutedWidget,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.StringFormat,System.String@)">
            <summary>
            Fill with hyphens for tab leader
            </summary>
            <param name="font">Font</param>
            <param name="ltWidget">Current layouted widget</param>
            <param name="charFormat">Character format of layouted widget</param>
            <param name="format">String format</param>
            <param name="text">text</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FillSpace(Syncfusion.Drawing.Font,Syncfusion.Layouting.LayoutedWidget,Syncfusion.Drawing.StringFormat,System.String@)">
            <summary>
            Fills with space
            </summary>
            <param name="font"></param>
            <param name="ltWidget"></param>
            <param name="format"></param>
            <param name="text"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawSymbol(Syncfusion.DocIO.DLS.WSymbol,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the Symbol
            </summary>
            <param name="symbol"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawPicture(Syncfusion.DocIO.DLS.WPicture,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the image.
            </summary>
            <param name="picture">The image.</param>
            <param name="ltwidget">The bounds.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsTableInTextBoxOrShape(Syncfusion.DocIO.DLS.Entity,System.Boolean)">
            <summary>
            Decides whether table is preserved inside text box or not.
            </summary>
            <param name="entity">Table cell</param>
            <param name="checkTextBoxOnly">Indicates whether to check textbox only.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetBoundingBoxCoordinates(Syncfusion.Drawing.RectangleF,System.Single)">
            <summary>
            Gets the bounding box of the rectangular bounds after rotation.
            </summary>
            <param name="bounds">Bounds</param>
            <param name="angle">Degree of rotation</param>
            <returns>Bounding box of the rectangular bounds</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CalculateBoundingBox(Syncfusion.Drawing.PointF[])">
            <summary>
            Calculates the minX, minY, maxX and maxY of the rotated bounds.
            </summary>
            <param name="imageCoordinates"></param>
            <returns>Bounding box of a rectangular bounds</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetTransformMatrix(Syncfusion.Drawing.RectangleF,System.Single)">
            <summary>
            Gets the rotation transformation matrix
            </summary>
            <param name="bounds">Bounds of the picture</param>
            <param name="angle">Rotation angle</param>
            <returns>Transformation matrix</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetMatrixValuesFromSkia(Syncfusion.Drawing.Matrix)">
            <summary>
            Get matrix values of skia's matrix.
            </summary>
            <param name="matrix">SKia's matrix to get values from.</param>
            <returns>Image matrix.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPdfImage(System.IO.MemoryStream)">
            <summary>
            Gets the PdfImage with image quality from stream
            </summary>
            <param name="stream">Memory stream</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPdfImage(Syncfusion.Drawing.SkiaSharpHelper.Bitmap)">
            <summary>
            Gets the PdfImage with image quality from stream
            </summary>
            <param name="stream">Memory stream</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawInlinePictureShape(Syncfusion.DocIO.DLS.WPicture,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SizeF,Syncfusion.Drawing.SkiaSharpHelper.Image)">
            <summary>
            Draw the InlineShapePicture
            </summary>
            <param name="picture"></param>
            <param name="bounds"></param>
            <param name="size"></param>
            <param name="image"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePen(Syncfusion.DocIO.DLS.InlineShapeObject)">
            <summary>
            Create the Pen to draw the picture border
            </summary>
            <param name="inlineShapeObject"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetColorBorder(Syncfusion.DocIO.DLS.InlineShapeObject)">
            <summary>
            Get the color for the picture border
            </summary>
            <param name="inlineShapeObject"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLineCap(Syncfusion.Pdf.Graphics.PdfLineCap)">
            <summary>
            Get the line cap for picture border
            </summary>
            <param name="lineCap"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLineJoin(Syncfusion.Pdf.Graphics.PdfLineJoin)">
            <summary>
            Get LineJoin for picture border
            </summary>
            <param name="lineJoin"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPictureBorderPen(Syncfusion.DocIO.DLS.InlineShapeObject,Syncfusion.DocIO.ReaderWriter.Biff_Records.BorderCode,Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Get the Dash and line style for the picture shape
            </summary>
            <param name="inlineShape"></param>
            <param name="borderCode"></param>
            <param name="pen"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetDashAndLineStyle(Syncfusion.DocIO.DLS.InlineShapeObject,Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Get the dash and line style for picture border
            </summary>
            <param name="inlineShape"></param>
            <param name="pen"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetDashStyle(Syncfusion.DocIO.LineDashing,Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Get the Dash style for the border
            </summary>
            <param name="lineDashing"></param>
            <param name="pen"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CropImageBounds(Syncfusion.DocIO.DLS.WPicture,Syncfusion.Drawing.RectangleF@,Syncfusion.Drawing.SizeF@)">
            <summary>
            Set the CropImageBounds if the image offset is negative
            </summary>
            <param name="picture"></param>
            <param name="bounds"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CropPosition(Syncfusion.DocIO.DLS.WPicture)">
            <summary>
            Gets the position to crop the image
            </summary>
            <param name="picture"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawEquationField(Syncfusion.Office.FontScriptType,Syncfusion.Layouting.LayoutedEQFields,Syncfusion.DocIO.DLS.WCharacterFormat)">
            <summary>
            Draws the equation field swtiches. 
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawArraySwitch(Syncfusion.Office.FontScriptType,Syncfusion.Layouting.LayoutedEQFields,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.StringAlignment)">
            <summary>
            Draws an Array EQ switch using their properties.
            </summary>
            <param name="scriptType">Represents a script type</param>
            <param name="ltEQField">A layouted array EQ switch.</param>
            <param name="charFormat">Represents a charFormat for array switch.</param>
            <param name="arraySwitchAlignment">Represents a <see cref="T:Syncfusion.Drawing.StringAlignment"/> for array EQ switch.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawRadicalSwitch(Syncfusion.Office.FontScriptType,Syncfusion.Layouting.LayoutedEQFields,Syncfusion.DocIO.DLS.WCharacterFormat)">
            <summary>
            Draws a radical switch and the radical symbol as a graphic path.
            </summary>
            <param name="scriptType">Represents a script type.</param>
            <param name="ltEQField">A layouted radical EQ switch.</param>
            <param name="charFormat">Represents a charFormat for radical switch elements.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawEditableDropDown(Syncfusion.DocIO.DLS.WDropDownFormField,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the Editable DrawDropDownFormField.
            </summary>
            <param name="dropDownFormField">dropDownFormField</param>
            <param name="ltWidget">The ltWidget.</param>  
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AlignEqFieldSwitches(Syncfusion.Layouting.LayoutedEQFields,System.Single,System.Single)">
            <summary>
            Align the layouted equation field switch based on the current y position.
            </summary>
            <param name="ltEQField">Layouted EQ field switches</param>
            <param name="xPosition">x position of layouted equation field switch</param>
            <param name="yPosition">Y position of layouted equation field switch</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ShiftEqFieldXYPosition(Syncfusion.Layouting.LayoutedEQFields,System.Single,System.Single)">
            <summary>
            Shift the eqaution field's x, y position based on the given x,y value.
            </summary>
            <param name="ltEQField">Layouted EQ field switches</param>
            <param name="xPosition">x position of layouted equation field switch</param>
            <param name="yPosition">Y position of layouted equation field switch</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GenerateErrorFieldCode(Syncfusion.Layouting.LayoutedEQFields,System.Single,System.Single,Syncfusion.DocIO.DLS.WCharacterFormat)">
            <summary>
            Generates the error text for the equation field.
            </summary>
            <param name="ltEQFiled">Represents a equation field to generate.</param>
            <param name="charFormat">Represents a <see cref="T:Syncfusion.DocIO.DLS.WCharacterFormat"/> which set for equation field.</param>
            <param name="xPosition">Represents a X position of equation field.</param>
            <param name="yPosition">Represents a Y position of equation field.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ShiftEqFieldYPosition(Syncfusion.Layouting.LayoutedEQFields,System.Single)">
            <summary>
             Shift the equation field's y position based on the given y value.
            </summary>
            <param name="LayoutedEQFields">Layouted EQ field switches</param>
            <param name="yPosition">Y position of layouted equation field switch</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetTopMostY(Syncfusion.Layouting.LayoutedEQFields,System.Single)">
            <summary>
            Gets the top most Y position of layouted EQ fields.
            </summary>
            <param name="ltEQField">Layouted EQ field</param>
            <param name="minY">Minimum value of y position</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawString(Syncfusion.Office.FontScriptType,System.String,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.DocIO.DLS.WParagraphFormat,Syncfusion.Drawing.RectangleF,System.Single,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the string.
            </summary>
            <param name="scriptType">Represents a script type.</param>
            <param name="text">The text.</param>
            <param name="charFormat">The char format.</param>
            <param name="paraFormat">The para format.</param>
            <param name="bounds">The bounds.</param>
            <param name="clipWidth">The clipwidth.</param>
            <param name="ltWidget">The layouted widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CheckPreOrNextSiblingIsTab(Syncfusion.DocIO.DLS.WCharacterFormat@,Syncfusion.Drawing.RectangleF@,Syncfusion.Layouting.LayoutedWidget,System.Boolean@)">
            <summary>
            Check that previous or next sibling is tab in that line paragraph
            </summary>
            <param name="charFormat">CharacterFormat</param>
            <param name="textBounds">textBounds</param>
            <param name="ltWidget">LayoutedWidget</param>
            <param name="isSameLine">isSameLine</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CalculateTextBounds(System.String,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.Font,Syncfusion.Drawing.StringFormat,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Office.FontScriptType)">
            <summary>
            Calculate the Text Bounds
            </summary>
            <param name="text"></param>
            <param name="textBounds"></param>
            <param name="font"></param>
            <param name="format"></param>
            <param name="charFormat"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddLineToCollection(System.String,System.Boolean,Syncfusion.Drawing.Font,Syncfusion.DocIO.DLS.WCharacterFormat,System.Boolean,Syncfusion.Drawing.RectangleF,System.Boolean,Syncfusion.Office.FontScriptType)">
            <summary>
            Add the line to the Dictionary collection
            </summary>
            <param name="text"></param>
            <param name="isSubSuperScriptNone"></param>
            <param name="font"></param>
            <param name="charFormat"></param>
            <param name="drawLines"></param>
            <param name="textBounds"></param>
            <param name="isSameLine"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsSameLine(System.Single,System.Single,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.DocIO.DLS.WCharacterFormat,System.Boolean)">
            <summary>
            Check that can we extend the previous Underline to the next text. 
            </summary>
            <param name="boundsRight">Previous boundsRight</param>
            <param name="boundsX">Current boundsX</param>
            <param name="charFormat">Current CharacterFormat</param>
            <param name="preCharFormat">Previous CharacterFormat</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsSame(System.Single,System.Single,System.Int32)">
            <summary>
            Compare the two float values.
            </summary>
            <param name="value1">Value 1</param>
            <param name="value2">value 2</param>
            <param name="digit">Round off value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.HasUnderlineOrStricthrough(Syncfusion.DocIO.DLS.WTextRange,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Office.FontScriptType)">
            <summary>
            Check that text having underline or strike through.
            </summary>
            <param name="txtRange">TextRange</param>
            <param name="charFormat">Charformat</param>
            <param name="scriptType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsContentControlHavingTextRange(Syncfusion.DocIO.DLS.InlineContentControl)">
            <summary>
            Check that the Inline content control having the text range.
            </summary>
            <param name="inlineContentControl"></param>
            <returns>Return true, if the InlineContentControl have text range; Else false.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsTabWidget(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Checks whether the current widget is tab
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetTextBoxWidget(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Get the text box widget of current widget.
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ReverseString(System.String@)">
            <summary>
            Reverse the string
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawSmallCapString(Syncfusion.Office.FontScriptType,Syncfusion.Office.CharacterRangeType,System.String,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.Font,Syncfusion.Drawing.StringFormat,Syncfusion.Drawing.SkiaSharpHelper.Brush,System.Boolean)">
            <summary>
            Draws the small cap string.
            </summary>
            <param name="scriptType">scriptType</param>
            <param name="characterRangeType">characterRangeType.</param>
            <param name="text">The text.</param>
            <param name="charFormat">The character format.</param>
            <param name="bounds">The bounds.</param>
            <param name="font">The font.</param>
            <param name="format">The format.</param>
            <param name="textBrush">The text brush.</param>
            <param name="isCharacterSpacing">if set to <c>true</c> [is character spacing].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsTextNeedToClip(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Determine whether the text is need to clip when the text range y position is greater than the owner row bottom position
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsWidgetNeedToClipBasedOnXPosition(Syncfusion.Layouting.LayoutedWidget,System.Single@,Syncfusion.Drawing.RectangleF)">
            <summary>
            Determine whether the text is need to clip when the text range x position is beyond the cell bounds or crossing the cell bounds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetColumnIndex(Syncfusion.DocIO.DLS.WSection,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the index of the column.
            </summary>
            <param name="section">The section.</param>
            <param name="sectionBounds">The section bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetClipTopPosition(Syncfusion.Drawing.RectangleF,System.Boolean)">
            <summary>
            Get Y position to clip paragraph items
            </summary>
            <param name="bounds"></param>
            <param name="isInlinePicture"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetDefaultFont(Syncfusion.Office.FontScriptType,Syncfusion.Drawing.Font,Syncfusion.DocIO.DLS.WCharacterFormat)">
            <summary>
            Get Default font to render non east characters
            </summary>
            <param name="scriptType"></param>
            <param name="font"></param>
            <param name="charFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawStringBasedOnCharSpacing(Syncfusion.Office.FontScriptType,Syncfusion.Office.CharacterRangeType,Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.RectangleF,System.String,Syncfusion.Drawing.StringFormat,Syncfusion.DocIO.DLS.WCharacterFormat)">
            <summary>
            Draw String based on CharacterSpacing
            </summary>
            <param name="scriptType">Script Type</param>
            <param name="characterRangeType">Character Range Type</param>
            <param name="font">Font style of current Layouted widget</param>
            <param name="textBrush">Text brush</param>
            <param name="bounds">Layouted widget bounds</param>
            <param name="text">Text</param>
            <param name="format">string format</param>
            <param name="charFormat">character Format</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.TransformGraphicsPosition(Syncfusion.Layouting.LayoutedWidget,System.Boolean,Syncfusion.Drawing.PointF@,System.Single@,Syncfusion.DocIO.DLS.WParagraph)">
            <summary>
            Transform the graphics rendering positions based on rotation angle
            </summary>
            <param name="ltWidget">Current ltWidget</param>
            <param name="isNeedToScale">set to <c>true</c> when the widget need to scale</param>
            <param name="translatePoints">Translation points </param>
            <param name="rotationAngle">Rotation angle</param>
            <param name="ownerParagraph">OwnerParagraph</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateXYPosition(System.Single@,System.Single@,Syncfusion.DocIO.DLS.Entity,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Update the X and Y position
            </summary>
            <param name="xPosition">X posiiton</param>
            <param name="yPosition">Y position</param>
            <param name="entity">Owner entity</param>
            <param name="ltWidget">Layouted Widget</param>
            <remarks>Update the X and Y position when document has different page setup.</remarks>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLayoutedTextBoxContentHeight(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Gets the height of the layouted text box content.
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetWidthToShiftVerticalText(Syncfusion.DocIO.DLS.VerticalAlignment,System.Single,System.Single)">
            <summary>
            Get Width to shift vertical text
            </summary>
            <param name="verticalAlignment"></param>
            <param name="cellLayoutedHeight"></param>
            <param name="cellHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetClipBounds(Syncfusion.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Get Bounds to clip the text
            </summary>
            <param name="bounds"></param>
            <param name="clipWidth"></param>
            <param name="clipTop"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateClipBounds(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF)">
            <summary>
            Update clip bounds based on vertical cell 
            </summary>
            <param name="clipBounds"></param>
            <param name="ownerClipBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateClipBoundsBasedOnOwner(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF)">
            <summary>
            Update clipping bounds based on owner clipping
            </summary>
            <param name="clipBounds"></param>
            <param name="ownerClipBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetCellHeightForVerticalText(Syncfusion.DocIO.DLS.Entity)">
            <summary>
            Get Height of the cell with text direction as vertical
            </summary>
            <param name="ent"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawChineseText(Syncfusion.Office.FontScriptType,Syncfusion.Office.CharacterRangeType,System.String,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.StringFormat)">
            <summary>
            Draw Chinese Text
            </summary>
            <param name="scriptType"></param>
            <param name="characterRangeType"></param>
            <param name="text"></param>
            <param name="charFormat"></param>
            <param name="font"></param>
            <param name="textBrush"></param>
            <param name="bounds"></param>
            <param name="format"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.PDFDrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfStringFormat,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Office.FontScriptType)">
            <summary>
            Draw String method for Drawing the string without its width and height
            </summary>
            <param name="text"></param>
            <param name="font"></param>
            <param name="brush"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="stringFormat"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.PDFDrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfStringFormat,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Office.FontScriptType)">
            <summary>
            Draw String method for Drawing the string with its width and height
            </summary>
            <param name="text">Specifies the text to draw.</param>
            <param name="font">Specifies the font used for the text.</param>
            <param name="brush">Specifies the color of the text.</param>
            <param name="bounds">Specifies the location, width and height of the text.</param>
            <param name="stringFormat">pecifies the text formats</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetAlternateFontToMeasure(System.String,Syncfusion.Drawing.Font)">
            <summary>
            Get the alternate font name to measure the Unicode text.
            </summary>
            <param name="text">Represent a Unicode text.</param>
            <param name="font">Represent a font.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetAlternateFontToRender(System.String,Syncfusion.Drawing.Font,Syncfusion.DocIO.DLS.WCharacterFormat)">
            <summary>
            Get the alternate font name to render the Unicode text.
            </summary>
            <param name="text">Represent a Unicode text.</param>
            <param name="tempfont">Represent a font name.</param>
            <param name = "charFormat" >Character format of the text range.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsContainsUnicodeCharOnly(System.String)">
            <summary>
            Determines whether the text contains unicode char only.
            </summary>
            <param name="text">text</param>
            <returns>
            	<c>true</c> if text contains unicode char only, set to <c>true</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsInvalidCharacter(System.String)">
            <summary>
            Checks whether the text is valid. (applicable for Arial text)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawUnicodeText(Syncfusion.Office.FontScriptType,Syncfusion.Office.CharacterRangeType,System.String,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.StringFormat)">
            <summary>
            Draw Unicode Text
            </summary>
            <param name="scriptType"></param>
            <param name="characterRangeType"></param>
            <param name="text"></param>
            <param name="charFormat"></param>
            <param name="font"></param>
            <param name="textBrush"></param>
            <param name="bounds"></param>
            <param name="format"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawUnicodeString(Syncfusion.Office.FontScriptType,Syncfusion.Office.CharacterRangeType,System.String,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.StringFormat)">
            <summary>
            Draw unicode string
            </summary>
            <param name="scriptType"></param>
            <param name="characterRangeType"></param>
            <param name="text"></param>
            <param name="charFormat"></param>
            <param name="font"></param>
            <param name="textBrush"></param>
            <param name="bounds"></param>
            <param name="format"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsOwnerParagraphEmpty(System.String)">
            <summary>
            Determines whether the owner paragraph is empty
            </summary>
            <param name="text">text</param>
            <returns>
                <c>true</c> if owner paragraph is empty, set to <c>true</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.RotateAndScaleTransform(Syncfusion.Drawing.RectangleF@,Syncfusion.Drawing.RectangleF@,System.Single,Syncfusion.Drawing.PointF,System.Single,System.Boolean)">
            <summary>
            Rotate and scale the graphics transform matrix
            </summary>
            <param name="bounds">Layoted widget bounds</param>
            <param name="clipBounds">Clip bounds</param>
            <param name="scaleFactor">Scaling factor value</param>
            <param name="translatePoints">Translation points</param>
            <param name="rotationAngle">Rotation angle</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ScaleTransformMatrix(System.Single,Syncfusion.Drawing.PointF,System.Single)">
            <summary>
            Scale the graphics transform matrix.
            </summary>
            <param name="scaleFactor">Scaling factor value</param>
            <param name="translatePoints">Translation points</param>
            <param name="rotationAngle">Rotation angle</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePdfFont(System.IO.Stream,System.Single,Syncfusion.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Creates PDF True type font.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePdfFont(System.String,System.IO.Stream,System.Single,Syncfusion.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Creates PDF True type font.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePdfFont(System.String,System.IO.Stream,System.Single,System.String)">
            <summary>
            Creates PDF True type font.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePdfFont(System.String,System.IO.Stream,System.Single,System.String,Syncfusion.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Create Pdf True type font based on text.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.PrepareMatrix(Syncfusion.Drawing.Matrix,System.Single)">
            <summary>
            Prepares a matrix to PDF.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="pageScale">The page scale value.</param>
            <returns>
            A properly prepared PdfTransformationMatrix class instance.
            </returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawParagraphBorders(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.DocIO.DLS.WParagraphFormat,Syncfusion.Layouting.LayoutedWidget,System.Boolean)">
            <summary>
            Draws the paragraph borders.
            </summary>
            <param name="paragraph">the paragraph</param>
            <param name="paraFormat">The paragraph format.</param>
            <param name="ltWidget">The lt widget.</param>
            <param name="isParagraphMarkIsHidden">isParagraphMarkIsHidden</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawParagraphBorders(System.Collections.Generic.List{Syncfusion.DocIO.DLS.Border},Syncfusion.Drawing.RectangleF,Syncfusion.DocIO.DLS.Borders,Syncfusion.DocIO.DLS.Borders,Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the paragraph borders
            </summary>
            <param name="borderRenderingOrder">Collection of borders, contains the each border rendering order</param>
            <param name="bounds">Border bounds</param>
            <param name="borders">Current paragraph borders</param>
            <param name="previousBorder">Previous paragraph borders</param>
            <param name="paragraph">Paragraph</param>
            <param name="ltWidget">Layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawHorizontalBorder(System.Collections.Generic.List{Syncfusion.DocIO.DLS.Border},Syncfusion.Drawing.RectangleF,Syncfusion.DocIO.DLS.Borders,Syncfusion.DocIO.DLS.Border,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Single,Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the horizontal border.
            </summary>
            <param name="borderRenderingOrder">The border rendering order.</param>
            <param name="bounds">The bounds.</param>
            <param name="borders">The borders.</param>
            <param name="border">The border.</param>
            <param name="isMultiLineLeftBorder">if set to <c>true</c> [is multi line left border].</param>
            <param name="isMultiLineRightBorder">if set to <c>true</c> [is multi line right border].</param>
            <param name="isMultiLineHorizontalBorder">if set to <c>true</c> [is multi line horizontal border].</param>
            <param name="betweenBorderLineWidth">Width of the between border line.</param>
            <param name="leftBorderLineWidth">Width of the left border line.</param>
            <param name="rightBorderLineWidth">Width of the right border line.</param>
            <param name="paragraph">Paragraph</param>
            <param name="ltWidget">Layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawLeftBorder(System.Collections.Generic.List{Syncfusion.DocIO.DLS.Border},Syncfusion.Drawing.RectangleF,Syncfusion.DocIO.DLS.Borders,Syncfusion.DocIO.DLS.Border,Syncfusion.DocIO.DLS.Borders,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Single,System.Single,Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the left border.
            </summary>
            <param name="borderRenderingOrder">The border rendering order.</param>
            <param name="bounds">The bounds.</param>
            <param name="borders">The borders.</param>
            <param name="border">The border.</param>
            <param name="previousBorder">The previous border.</param>
            <param name="isMultiLineTopBorder">if set to <c>true</c> [is multi line top border].</param>
            <param name="isMultiLineBottomBorder">if set to <c>true</c> [is multi line bottom border].</param>
            <param name="isMultiLineLeftBorder">if set to <c>true</c> [is multi line left border].</param>
            <param name="isMultiLineHorizontalBorder">if set to <c>true</c> [is multi line horizontal border].</param>
            <param name="leftBorderLineWidth">Width of the left border line.</param>
            <param name="topBorderLineWidth">Width of the top border line.</param>
            <param name="betweenBorderLineWidth">Width of the between border line.</param>
            <param name="bottomBorderLineWidth">Width of the bottom border line.</param>
            <param name="paragraph">Paragraph</param>
            <param name="ltWidget">Layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawRightBorder(System.Collections.Generic.List{Syncfusion.DocIO.DLS.Border},Syncfusion.Drawing.RectangleF,Syncfusion.DocIO.DLS.Borders,Syncfusion.DocIO.DLS.Border,Syncfusion.DocIO.DLS.Borders,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Single,System.Single,Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the right border.
            </summary>
            <param name="borderRenderingOrder">The border rendering order.</param>
            <param name="bounds">The bounds.</param>
            <param name="borders">The borders.</param>
            <param name="border">The border.</param>
            <param name="previousBorder">The previous border.</param>
            <param name="isMultiLineTopBorder">if set to <c>true</c> [is multi line top border].</param>
            <param name="isMultiLineHorizontalBorder">if set to <c>true</c> [is multi line horizontal border].</param>
            <param name="isMultiLineRightBorder">if set to <c>true</c> [is multi line right border].</param>
            <param name="isMultiLineBottomBorder">if set to <c>true</c> [is multi line bottom border].</param>
            <param name="rightBorderLineWidth">Width of the right border line.</param>
            <param name="topBorderLineWidth">Width of the top border line.</param>
            <param name="betweenBorderLineWidth">Width of the between border line.</param>
            <param name="bottomBorderLineWidth">Width of the bottom border line.</param>
            <param name="paragraph">Paragraph</param>
            <param name="ltWidget">Layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTopBorder(System.Collections.Generic.List{Syncfusion.DocIO.DLS.Border},Syncfusion.Drawing.RectangleF,Syncfusion.DocIO.DLS.Borders,Syncfusion.DocIO.DLS.Border,System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            Draws the top border.
            </summary>
            <param name="borderRenderingOrder">The border rendering order.</param>
            <param name="bounds">The bounds.</param>
            <param name="borders">The borders.</param>
            <param name="border">The border.</param>
            <param name="isMultiLineTopBorder">if set to <c>true</c> [is multi line top border].</param>
            <param name="topBorderLineWidth">Width of the top border line.</param>
            <param name="leftBorderLineWidth">Width of the left border line.</param>
            <param name="rightBorderLineWidth">Width of the right border line.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawBottomBorder(System.Collections.Generic.List{Syncfusion.DocIO.DLS.Border},Syncfusion.Drawing.RectangleF,Syncfusion.DocIO.DLS.Borders,Syncfusion.DocIO.DLS.Border,System.Boolean,System.Single,System.Single,System.Single,Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the bottom border.
            </summary>
            <param name="borderRenderingOrder">The border rendering order.</param>
            <param name="bounds">The bounds.</param>
            <param name="borders">The borders.</param>
            <param name="border">The border.</param>
            <param name="isMultiLineBottomBorder">if set to <c>true</c> [is multi line bottom border].</param>
            <param name="leftBorderLineWidth">Width of the left border line.</param>
            <param name="bottomBorderLineWidth">Width of the bottom border line.</param>
            <param name="rightBorderLineWidth">Width of the right border line.</param>
            <param name="paragraph">Paragraph</param>
            <param name="ltWidget">Layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetSpaceForBottomBorder(Syncfusion.DocIO.DLS.Entity)">
            <summary>
            If paragraph inside Text box or shape have bottom border and that paragraph is the last element of textbox means 
            Microsoft word will preserve the bottom border at the top of the bottom margin of text box or shape by subtracting the internal bottom margin spacing and the text box or shape line width.
            </summary>
            <param name="entity"></param>
            <returns>The spacing between the paragraph bottom border and textbox's or shape's bottom border</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.SortTwoBorders(System.Collections.Generic.List{Syncfusion.DocIO.DLS.Border},Syncfusion.DocIO.DLS.Border,Syncfusion.DocIO.DLS.Border,Syncfusion.DocIO.DLS.Borders,System.Boolean)">
            <summary>
            Sort the borders based on brightness
            </summary>
            <param name="renderingOrderList">Border rendering order list</param>
            <param name="firstBorder">Horizontal border</param>
            <param name="secondBorder">Either left border/right border</param>
            <param name="borders">Current paragraph borders</param>
            <param name="isLeftBorder">To ensure wether we need to remove left or right border</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddNextParagraphBounds(Syncfusion.Layouting.LayoutedWidget,Syncfusion.Drawing.RectangleF@)">
            <summary>
            Adds the next paragraph bounds.
            </summary>
            <param name="layoutedWidget">The layouted widget.</param>
            <param name="bounds">The bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawRevisionMark(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,Syncfusion.Drawing.Color,System.Single)">
            <summary>
            Draw the revision bars in the specified color and width
            </summary>
            <param name="start">Start point of the revision bar</param>
            <param name="end">End point of the revision bar</param>
            <param name="lineColor">Color of the revision bar</param>
            <param name="lineWidth">Width of the revision bar</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Draws the border.
            </summary>
            <param name="border">The border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawParagraphBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Draws the border.
            </summary>
            <param name="border">The border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawBorder(Syncfusion.Layouting.CellLayoutInfo.CellBorder,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Draws the border.
            </summary>
            <param name="border">The border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTable(Syncfusion.DocIO.DLS.WTable,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the table.
            </summary>
            <param name="table">The table.</param>
            <param name="ltWidget">The lt widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTableRow(Syncfusion.DocIO.DLS.WTableRow,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the table row.
            </summary>
            <param name="row">The row.</param>
            <param name="ltWidget">The lt widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTableCell(Syncfusion.DocIO.DLS.WTableCell,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the table cell.
            </summary>
            <param name="cell">The cell.</param>
            <param name="ltWidget">The lt widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FillCellColor(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Fill the Cell Color
            </summary>
            <param name="ltWidget">The Layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsTexBoxHaveBackgroundPicture(Syncfusion.DocIO.DLS.WTextBox)">
            <summary>
            Checks the TextBox for Background picture.
            </summary>
            <param name="textbox"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTextureStyle(Syncfusion.DocIO.TextureStyle,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,Syncfusion.Drawing.RectangleF)">
            <summary>
            Draws the texture style.
            </summary>
            <param name="textureStyle"></param>
            <param name="foreColor"></param>
            <param name="backColor"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetForeColor(Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,System.Single)">
            <summary>
            Gets the fore color.
            </summary>
            <param name="foreColor"></param>
            <param name="backColor"></param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetColorValue(System.Int32,System.Int32,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Gets the color value.
            </summary>
            <param name="foreColorValue">The fore color value.</param>
            <param name="backColorValue">The back color value.</param>
            <param name="percent">The percent.</param>
            <param name="isForeColorEmpty">isForeColorEmpty</param>
            <param name="isBackColorEmpty">isBackColorEmpty</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FillTexture(Syncfusion.DocIO.TextureStyle,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,Syncfusion.Drawing.RectangleF)">
            <summary>
            Fill Texture within the bounds
            </summary>
            <param name="textureStyle">Texture Style</param>
            <param name="foreColor">Fore Color</param>
            <param name="backColor">Back Color</param>
            <param name="bounds">Bounds</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCellBorders(Syncfusion.DocIO.DLS.WTableCell,Syncfusion.Layouting.LayoutedWidget,System.Single)">
            <summary>
            Draws the cell borders.
            </summary>
            <param name="cell">The cell.</param>
            <param name="ltWidget">The lt widget.</param>
            <param name="previousCellsTopBorderWidth">The previous cells top border width</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineLeftBorder(Syncfusion.Layouting.CellLayoutInfo,Syncfusion.Layouting.CellLayoutInfo.CellBorder,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the multi line left border.
            </summary>
            <param name="cellLayoutInfo">The cell layout information.</param>
            <param name="leftBorder">The left border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isFirstRow">if set to <c>true</c> [is first row].</param>
            <param name="isLastRow">if set to <c>true</c> [is last row].</param>
            <param name="isFirstCell">if set to <c>true</c> [is first cell].</param>
            <param name="isLastCell">if set to <c>true</c> [is last cell].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineLeftBorder(Syncfusion.Layouting.CellLayoutInfo,Syncfusion.Layouting.CellLayoutInfo.CellBorder,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the double line left border.
            </summary>
            <param name="cellLayoutInfo">The cell layout information.</param>
            <param name="leftBorder">The left border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isFirstRow">if set to <c>true</c> [is first row].</param>
            <param name="isLastRow">if set to <c>true</c> [is last row].</param>
            <param name="isFirstCell">if set to <c>true</c> [is first cell].</param>
            <param name="isLastCell">if set to <c>true</c> [is last cell].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineRightBorder(Syncfusion.Layouting.CellLayoutInfo,Syncfusion.Layouting.CellLayoutInfo.CellBorder,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the multi line right border.
            </summary>
            <param name="cellLayoutInfo">The cell layout information.</param>
            <param name="rightBorder">The right border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isFirstRow">if set to <c>true</c> [is first row].</param>
            <param name="isLastRow">if set to <c>true</c> [is last row].</param>
            <param name="isFirstCell">if set to <c>true</c> [is first cell].</param>
            <param name="isLastCell">if set to <c>true</c> [is last cell].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineRightBorder(Syncfusion.Layouting.CellLayoutInfo,Syncfusion.Layouting.CellLayoutInfo.CellBorder,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the right double line border.
            </summary>
            <param name="cellLayoutInfo">The cell layout information.</param>
            <param name="rightBorder">The right border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isFirstRow">if set to <c>true</c> [is first row].</param>
            <param name="isLastRow">if set to <c>true</c> [is last row].</param>
            <param name="isFirstCell">if set to <c>true</c> [is first cell].</param>
            <param name="isLastCell">if set to <c>true</c> [is last cell].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineBottomBorder(Syncfusion.Layouting.CellLayoutInfo,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean)">
            <summary>
            Draws the multi line bottom border.
            </summary>
            <param name="cellLayoutInfo">The cell layout information.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isBiDiTable">isBiDiTable</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineBottomBorder(Syncfusion.Layouting.CellLayoutInfo,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean)">
            <summary>
            Draws the double line bottom border.
            </summary>
            <param name="cellLayoutInfo">The cell layout information.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isBiDiTable">isBiDiTable</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineTopBorder(Syncfusion.Layouting.CellLayoutInfo,Syncfusion.Layouting.CellLayoutInfo.CellBorder,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Draws the multi line top border.
            </summary>
            <param name="cellLayoutInfo">The cell layout information.</param>
            <param name="topBorder">The top border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isStart">if set to <c>true</c> [is start].</param>
            <param name="isEnd">if set to <c>true</c> [is end].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineTopBorder(Syncfusion.Layouting.CellLayoutInfo,Syncfusion.Layouting.CellLayoutInfo.CellBorder,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Draws the top double line border.
            </summary>
            <param name="cellLayoutInfo">The cell layout information.</param>
            <param name="topBorder">The top border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isStart">if set to <c>true</c> [is start].</param>
            <param name="isEnd">if set to <c>true</c> [is end].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsMultiLineBorder(Syncfusion.DocIO.DLS.BorderStyle)">
            <summary>
            Determines whether the specified border is multiline border
            </summary>
            <param name="borderType">Type of the border.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsMultiLineParagraphBorder(Syncfusion.DocIO.DLS.BorderStyle)">
            <summary>
            Determines whether [is multi line paragraph border] [the specified border type].
            </summary>
            <param name="borderType">Type of the border.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetBorderLineWidthArray(Syncfusion.DocIO.DLS.BorderStyle,System.Single)">
            <summary>
            Gets the border line array.
            </summary>
            <param name="borderType">Type of the border.</param>
            <param name="lineWidth">Width of the line.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsDoubleBorder(Syncfusion.DocIO.DLS.Border)">
            <summary>
            To identify whether current border is double line border or triple line border
            </summary>
            <param name="border">Current border which is need to be check</param>
            <returns><c>True</c>id the current border type is double border</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineLeftBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the multi line left border.
            </summary>
            <param name="leftBorder">The left border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isTopBorderSame">if set to <c>true</c> [is top border same].</param>
            <param name="isBetweenBorderSame">if set to <c>true</c> [is between border same].</param>
            <param name="isBottomBorderSame">if set to <c>true</c> [is bottom border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineLeftBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the double line left border.
            </summary>
            <param name="leftBorder">The left border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isTopBorderSame">if set to <c>true</c> [is top border same].</param>
            <param name="isBetweenBorderSame">if set to <c>true</c> [is between border same].</param>
            <param name="isBottomBorderSame">if set to <c>true</c> [is bottom border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTripleLineLeftBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the triple line left border.
            </summary>
            <param name="leftBorder">The left border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isTopBorderSame">if set to <c>true</c> [is top border same].</param>
            <param name="isBetweenBorderSame">if set to <c>true</c> [is between border same].</param>
            <param name="isBottomBorderSame">if set to <c>true</c> [is bottom border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineRightBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the multi line right border.
            </summary>
            <param name="rightBorder">The right border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isTopBorderSame">if set to <c>true</c> [is top border same].</param>
            <param name="isBetweenBorderSame">if set to <c>true</c> [is between border same].</param>
            <param name="isBottomBorderSame">if set to <c>true</c> [is bottom border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineRightBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the double line right border.
            </summary>
            <param name="rightBorder">The right border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isTopBorderSame">if set to <c>true</c> [is top border same].</param>
            <param name="isBetweenBorderSame">if set to <c>true</c> [is between border same].</param>
            <param name="isBottomBorderSame">if set to <c>true</c> [is bottom border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTripleLineRightBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the triple line right border.
            </summary>
            <param name="rightBorder">The right border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isTopBorderSame">if set to <c>true</c> [is top border same].</param>
            <param name="isBetweenBorderSame">if set to <c>true</c> [is between border same].</param>
            <param name="isBottomBorderSame">if set to <c>true</c> [is bottom border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineTopBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Draws the multi line top border.
            </summary>
            <param name="topBorder">The top border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineTopBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Draws the double line top border.
            </summary>
            <param name="topBorder">The top border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTripleLineTopBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Draws the triple line top border.
            </summary>
            <param name="topBorder">The top border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineBottomBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Draws the multi line bottom border.
            </summary>
            <param name="bottomBorder">The bottom border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineBottomBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Draws the double line bottom border.
            </summary>
            <param name="bottomBorder">The bottom border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLine(Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.DocIO.DLS.BorderStyle,System.Single,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Draw the double line for the text.
            </summary>
            <param name="charFormat">charFormat</param>
            <param name="borderType">borderType</param>
            <param name="lineWidth">lineWidth</param>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTripleLineBottomBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Draws the triple line bottom border.
            </summary>
            <param name="bottomBorder">The bottom border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineBetweenBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,Syncfusion.DocIO.DLS.Border,Syncfusion.DocIO.DLS.Border,System.Boolean,System.Boolean)">
            <summary>
            Draws the multi line between border.
            </summary>
            <param name="betweenBorder">The between border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
            <param name="leftBorder">The left border.</param>
            <param name="rightBorder">The right border.</param>
            <param name="isOverlapLeft">if set to <c>true</c> [is overlap left].</param>
            <param name="isOverlapRight">if set to <c>true</c> [is overlap right].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineBetweenBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,Syncfusion.DocIO.DLS.Border,Syncfusion.DocIO.DLS.Border,System.Boolean,System.Boolean)">
            <summary>
            Draws the double line between border.
            </summary>
            <param name="betweenBorder">The between border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
            <param name="leftBorder">The left border.</param>
            <param name="rightBorder">The right border.</param>
            <param name="isOverlapLeft">if set to <c>true</c> [is overlap left].</param>
            <param name="isOverlapRight">if set to <c>true</c> [is overlap right].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTripleLineBetweenBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,Syncfusion.DocIO.DLS.Border,Syncfusion.DocIO.DLS.Border,System.Boolean,System.Boolean)">
            <summary>
            Draws the triple line between border.
            </summary>
            <param name="betweenBorder">The between border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
            <param name="leftBorder">The left border.</param>
            <param name="rightBorder">The right border.</param>
            <param name="isOverlapLeft">if set to <c>true</c> [is overlap left].</param>
            <param name="isOverlapRight">if set to <c>true</c> [is overlap right].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLeftRightLineWidht(System.Single[],System.Boolean)">
            <summary>
            Gets the adjacent border line width
            </summary>
            <param name="lineArray">Left or right border line array</param>
            <param name="isLeft"><c>true</c> if we passing left border line array; otherwise false</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawBackgroundColor(Syncfusion.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Draws the color of the background.
            </summary>
            <param name="bgColor">Color of the bg.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawBackgroundImage(Syncfusion.Drawing.SkiaSharpHelper.Image,Syncfusion.DocIO.DLS.WPageSetup)">
            <summary>
            Draws the back ground image.
            </summary>
            <param name="image">The image.</param>
            <param name="pageSetup">The page setup.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawWatermark(Syncfusion.DocIO.DLS.Watermark,Syncfusion.DocIO.DLS.WPageSetup,Syncfusion.Drawing.RectangleF)">
            <summary>
            Draws the Watermark
            </summary>
            <param name="watermark">Watermark</param>
            <param name="pageSetup">Page setup</param>
            <param name="bounds">Bounds</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.Rendering.Page,System.Int32@)">
            <summary>
            Imlementation of Draw method of page. 
            </summary>
            <param name="page">Currentl drawing page</param>
            <param name="autoTagsCount">autoTagsCount</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMarkupTriangles(Syncfusion.Drawing.PointF,Syncfusion.Drawing.Color)">
            <summary>
            Draws Markup triangles.
            </summary>
            <param name="position">Position to draw the triangle.</param>
            <param name="revisionColor">Revision Color</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsEmptyWaterMark(Syncfusion.DocIO.DLS.Watermark)">
            <summary>
            Checks the current watermark is empty watermark or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsWaterMarkNeedToBeDraw(Syncfusion.DocIO.DLS.Rendering.Page,Syncfusion.DocIO.DLS.HeaderFooter)">
            <summary>
            Checks the HeaderFooter Paragraph and Table Weather WaterMark has to draw first
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsWaterMarkInParagraph(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.DocIO.DLS.Rendering.Page)">
            <summary>
            Checks the paragraph weather watermark in Paragraph
            </summary>
            <param name="paragraph"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsWaterMarkInTable(Syncfusion.DocIO.DLS.WTable,Syncfusion.DocIO.DLS.Rendering.Page)">
            <summary>
            Checks the paragraph weather watermark in Table
            </summary>
            <param name="table"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsWaterMarkOrderHasChanged(System.Int32,System.Boolean,Syncfusion.DocIO.DLS.Rendering.Page)">
            <summary>
            Checks which One has to draw first watermark or picture,shape,textbox
            </summary>
            <param name="OrderIndex"></param>
            <param name="IsBelowText"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.Layouting.SplitWidgetContainer,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the splitWidgetContainer to PDF document or Image.
            </summary>
            <param name="widget">Currentl split widget container</param>
            <param name="layoutedWidget">Layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AlignChildWidgets(Syncfusion.Layouting.LayoutedWidget,Syncfusion.DocIO.DLS.WParagraph)">
            <summary>
            Align the child widgets.
            </summary>
            <param name="LastLine">The layouted widget.</param>
            <param name="paragraph">The paragraph.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.Layouting.IWidgetContainer,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Imlementation of Draw method of IWidget interface .
            </summary>
            <param name="widget"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawImpl(Syncfusion.Layouting.IWidgetContainer,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw widget to graphics.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.Layouting.IWidget,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the specified dc.
            </summary>
            <param name="widget"></param>
            <param name="layoutedWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsNeedToSkip(Syncfusion.Layouting.IWidget)">
            <summary>
            Check whether the widget is need to drwa or not
            </summary>
            <param name="widget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawPageBorder(System.Int32,Syncfusion.DocIO.DLS.Rendering.PageCollection)">
            <summary>
            Draw the page border
            </summary>
            <param name="pageNumber">Page number</param>
            <param name="pageCollection"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.BookmarkStart,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Imlementation of Draw method of BookMark interface .
            </summary>
            <param name="bookmarkStart"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsNeedToClip(Syncfusion.Drawing.RectangleF)">
            <summary>
            Decides whether Clipping is necessary or not.
            </summary>
            <param name="itemBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetHightLightColor(Syncfusion.Drawing.Color)">
            <summary>
            Get text highlight color
            </summary>
            <param name="itemBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsTextRange(Syncfusion.DocIO.DLS.WParagraph)">
            <summary>
            Check whether the paragrah contains Text range
            </summary>
            <param name="paragraph"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawEmptyString(Syncfusion.Layouting.LayoutedWidget,Syncfusion.DocIO.DLS.WParagraph)">
            <summary>
            Draw the Empty string with white space to preserve Tags.
            </summary>
            <param name="layoutedWidget"></param>
            <param name="paragraph"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.Layouting.LayoutedWidget,System.Boolean)">
            <summary>
            Imlementation of Draw method of LayoutedWidget interface .
            </summary>
            <param name="layoutedWidget">The Layouted widget.</param>
            <param name="isHaveToInitLayoutInfo">Is need to initialize layout info</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddFloatingItemsOfTable(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Iterate every child elements of the table and add the floating items into the OverLappedShapeWidgets collection
            </summary>
            <param name="layoutedWidget">Table layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IterateChildElements(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Iterate the child elements of the paragraph
            </summary>
            <param name="para_LtWidget">Paragraph layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddFloatingItemsInCollection(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Checks whether the child widget is floating item and add into the collection
            </summary>
            <param name="ltWidget">Child layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetSpaceWidthAtEndFromText(Syncfusion.DocIO.DLS.WTextRange,System.String)">
            <summary>
            Get space width at end of the line widget.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsRTLParaLine(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Checks whether the paragraph line is RTL.
            </summary>
            <param name="m_currChildLW"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.HasTextRangeBidi(Syncfusion.Layouting.LayoutedWidgetList)">
            <summary>
            Checks whether the paragraph line has text bidi.
            </summary>
            <param name="layoutedWidgets"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsLineItemDrawn(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Check that Line item are drawn.
            </summary>
            <param name="ltWidget">LayoutedWidget</param>
            <returns>Return true, if line items are drawn.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawLine(System.Collections.Generic.Dictionary{Syncfusion.DocIO.DLS.WCharacterFormat,System.Collections.Generic.List{Syncfusion.Drawing.RectangleF}},System.Collections.Generic.Dictionary{Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.RectangleF})">
            <summary>
            Draw the Line Based in the collection.
            </summary>
            <param name="underLineValues">Contains the underline values</param>
            <param name="strikeThroughValues">Contains the strike through values</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ScaleTransform(Syncfusion.DocIO.DLS.WCharacterFormat,System.Boolean@)">
            <summary>
            Scale the graphics transform matrix.
            </summary>
            <param name="characterFormat">The character format.</param>
            <param name="isNeedToScale">Indicates whether the line need to scale or not.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsNeedToChangeUnderLineWidth(System.String)">
            <summary>
            Checks whether the underline width is need to change or not.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawUnderLine(Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.RectangleF)">
            <summary>
            Draw the underline style.
            </summary>
            <param name="characterFormat"></param>
            <param name="textBounds"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCompoundLine(System.Single[],Syncfusion.Drawing.PointF[],Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draw double underline style using compoundArray property
            </summary>
            <param name="compoundArray"></param>
            <param name="points"></param>
            <param name="pen"></param>
            <param name="PDFGraphics"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreateWavyPath(Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.Font)">
            <summary>
            Draw a wavy line using Bezier points
            </summary>
            <param name="characterFormat">represents the character properties of the text</param>
            <param name="bounds">represents the bounds of the text</param>
             <param name="font">represents the font of the text</param>
            <returns>Returns the Object of PDFGraphics to draw the wavy line</returns>
            <Remarks>To-Do:- PdfPath.AddCurve() method is not supported in PDF library. So, only here we are using PdfPath.AddBezier() method to draw the wavy line</Remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawStrikeThrough(Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.RectangleF)" -->
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePen(Syncfusion.DocIO.DLS.WCharacterFormat,System.Single)">
            <summary>
            Create the Pen to draw the Line for Underline and Strike through.
            </summary>
            <param name="charFormat">charFormat</param>
            <param name="lineWidth">lineWidth</param>
            <returns>Return the Pen to draw the line.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsNeedToRemoveClipBounds(Syncfusion.Layouting.IWidget)">
            <summary>
            Checks whether clip bounds need to remove from container.
            </summary>
            <param name="widget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.TextboxClipBounds(Syncfusion.DocIO.DLS.WTable,Syncfusion.Drawing.RectangleF)">
            <summary>
            Increase the bounds with the table paddings.
            </summary>
            <param name="table"></param>
            <param name="clipBounds"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateClipBounds(Syncfusion.Drawing.RectangleF,System.Boolean)">
            <summary>
            Updates the clip bounds based on its owner clip bounds.
            </summary>
            <param name="clipBounds"></param>
            <param name="reverseClipping"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.SetClip(Syncfusion.Drawing.RectangleF)">
            <summary>
            Sets clipping for the particular region.
            </summary>
            <param name="clippingBounds"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ResetTransform">
            <summary>
            Resets Graphics Transform positions.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.SetScaleTransform(System.Single,System.Single)">
            <summary>
            Scale the graphics with input X and Y scaling values.
            </summary>
            <param name="sx">Specify the scaling factor of X.</param>
            <param name="sy">Specify the scaling factor of Y.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetClippingBounds(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Get the bounds based on the frame content.
            </summary>
            <param name="cellltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the paragraph
            </summary>
            <param name="paragraph"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCommentHighlighter(Syncfusion.Layouting.LayoutedWidget,Syncfusion.DocIO.DLS.WordDocument)">
            <summary>
            Draw a Comment highlighter for the line.
            </summary>
            <param name="ltWidget">Represents a layouted widget of line.</param>
            <param name="document">Represents a WordDocument.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetKeyValuePair(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Boolean}})">
            <summary>
            Gets a KeyValuePair for the specified key from specified collection.
            </summary>
            <param name="inputKey">Represents a input key to find.</param>
            <param name="keyValuePairCollection">Represents a KVP colection.</param>
            <returns>Returns a KeyValuePair for the specified key from specified collection.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ContainsKey(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Boolean}})">
            <summary>
            Check whether a KeyValuePair is available in specified collection for the specified key.
            </summary>
            <param name="inputKey">Represents a input key to find.</param>
            <param name="keyValuePairCollection">Represents a KVP colection.</param>
            <returns>Returns a true, if KeyValuePair available in specified collection; Otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCommentHighlighter(Syncfusion.DocIO.DLS.RevisionOptions,Syncfusion.Drawing.RectangleF,System.Boolean)">
            <summary>
            Draw a comment highlighter.
            </summary>
            <param name="hightLightColor"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetMaximumHeightWidget(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Gets maximum height widget of line.
            </summary>
            <param name="ltWidget">Represent a layouted widget of line.</param>
            <returns>Returns a LayoutedWidget, which has maximum height in line.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsLinesInteresectWithFloatingItems(Syncfusion.Layouting.LayoutedWidget,System.Boolean)">
            <summary>
            Check whether any of line for current paragraph intersect with floating items.
            </summary>
            <param name="ltWidget">Current widget</param>
            <param name="isLineContainer">Whether this is line or line container</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawLineBackGroundColors(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the back ground colour for current line.
            </summary>
            <param name="paragraph">Current paragraph</param>
            <param name="ltWidget">Current line widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetBackGroundColorRenderingBounds(Syncfusion.Layouting.LayoutedWidget,Syncfusion.Drawing.RectangleF)">
            <summary>
            Find the Back ground color rendering bounds.
            </summary>
            <param name="ltWidget"></param>
            <param name="remaingingBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindFillColorBounds(System.Boolean@,Syncfusion.Drawing.RectangleF,System.Collections.Generic.List{Syncfusion.Drawing.RectangleF},Syncfusion.Drawing.RectangleF)">
            <summary>
            Check whether line preserved left or right or between floating items.
            </summary>
            <param name="isNeedToFindFillColorRenderingBounds"></param>
            <param name="childItemBounds"></param>
            <param name="intersectingBoundsCollection"></param>
            <param name="remaingingBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetInnerItemsRenderingBounds(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Get the current child widget total bounds.
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.Layouting.SplitTableWidget,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the split table widget
            </summary>
            <param name="splitTableWidget"></param>
            <param name="layoutedWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.BlockContentControl,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw method for BlockContentControl
            </summary>
            <param name="SDT"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.InlineContentControl,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw method for InlineContentControl
            </summary>
            <param name="SDT"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WCommentMark,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw WCommentMark
            </summary>
            <param name="absoluteTab"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WAbsoluteTab,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw AbsoluteTab
            </summary>
            <param name="absoluteTab"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WChart,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw chart as image
            </summary>
            <param name="chart"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawChart(Syncfusion.DocIO.DLS.WChart,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws chart
            </summary>
            <param name="chart"></param>
            <param name="widget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WCheckBox,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the Check box.
            </summary>
            <param name="checkBox"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WDropDownFormField,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the Drop Down Form Field.
            </summary>
            <param name="dropDownFormField"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WField,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the Fields.
            </summary>
            <param name="field"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WOleObject,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw Ole Object.
            </summary>
            <param name="oleObject"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WPicture,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the Picture.
            </summary>
            <param name="picture"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WSymbol,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the symbol.
            </summary>
            <param name="symbol"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WTable,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the table.
            </summary>
            <param name="table"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetFirstItemInFrame(Syncfusion.Layouting.LayoutedWidgetList,System.Int32,Syncfusion.DocIO.DLS.WParagraphFormat)">
            <summary>
            Gets the frames first item.
            </summary>
            <param name="layoutedWidgets"></param>
            <param name="index"></param>
            <param name="originalFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WTableCell,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the table cell.
            </summary>
            <param name="cell"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WTableRow,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the table row.
            </summary>
            <param name="row"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WTextBox,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the textbox.
            </summary>
            <param name="textBox"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WTextFormField,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the text form field.
            </summary>
            <param name="textFormField"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.Layouting.LeafEmtyWidget,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Imlementation of Draw method of LayoutedWidget interface 
            </summary>
            <param name="leafEmtyWidget"></param>
            <param name="layoutedWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.Shape,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the shape to PDF document or Image.
            </summary>
            <param name="shape">Current shape entity</param>
            <param name="ltWidget">Current shale layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the shape to PDF document or Image.
            </summary>
            <param name="shape">Current shape entity</param>
            <param name="ltWidget">Current shale layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.Layouting.SplitStringWidget,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the splitStringWidget
            </summary>
            <param name="splitStringWidget">SplitStringWidget</param>
            <param name="layoutedWidget">Layouted split string widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WTextRange,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the text ranges.
            </summary>
            <param name="textRange"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.Layouting.IStringWidget,Syncfusion.Layouting.LayoutedWidget,System.String)">
            <summary>
            Draw widget to graphics.   
            </summary>
            <param name="stringWidget"></param>
            <param name="ltWidget"></param>
            <param name="text"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawImpl(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw widget to graphics.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetOwnerLayoutedWidget(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Get Cell Widget
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetParagraphWidget(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Gets the owner widget of the paragraph
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetCellWidget(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Get owner widget of the cell
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsOverLappedShapeWidget(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Determines whether the layouted widget is Overlapping Widget
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <returns>
            	<c>true</c> if the layouted widget is Overlapping shape widget; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateWaterMarkPosition(Syncfusion.DocIO.DLS.ParagraphItem,Syncfusion.DocIO.DLS.WPageSetup,Syncfusion.Drawing.RectangleF)">
            <summary>
            Update the positions of text watermark.
            </summary>
            <param name="pItem">TextWatermark</param>
            <param name="pageSetup"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTextWatermark(Syncfusion.DocIO.DLS.TextWatermark,Syncfusion.Drawing.RectangleF,Syncfusion.DocIO.DLS.WPageSetup)">
            <summary>
            Draw the text watermark.
            </summary>
            <param name="textWatermark"></param>
            <param name="bounds"></param>
            <param name="pageSetup"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ConvertAsImage(Syncfusion.DocIO.DLS.TextWatermark,Syncfusion.Drawing.Font)">
            <summary>
            Convert the Watermark text as Bitmap Image.
            </summary>
            <param name="textWatermark"></param>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ChangeColorBrightness(Syncfusion.Drawing.Color,System.Single)">
            <summary>
            Change the given color brightness
            </summary>
            <param name="color"></param>
            <param name="correctionFactor"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawPageBorder(Syncfusion.DocIO.DLS.WPageSetup,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF)">
            <summary>
            Draw border for the page
            </summary>
            <param name="pageSetup">Page setup object</param>
            <param name="headerBounds">Header bounds</param>
            <param name="footerBounds">Footer bounds</param>
            <param name="pageBounds">Page bounds</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLeftBorderPoints(Syncfusion.DocIO.DLS.WPageSetup,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the bounds to draw left border
            </summary>
            <param name="pageSetup">Page setup object</param>
            <param name="headerBounds">Header bounds</param>
            <param name="footerBounds">Footer bounds</param>
            <param name="pageBounds">Page bounds</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetRightBorderPoints(Syncfusion.DocIO.DLS.WPageSetup,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the bounds to draw right border
            </summary>
            <param name="pageSetup">Page setup object</param>
            <param name="headerBounds">Header bounds</param>
            <param name="footerBounds">Footer bounds</param>
            <param name="pageBounds">Page bounds</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetBottomBorderPoints(Syncfusion.DocIO.DLS.WPageSetup,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the bounds to draw bottom border
            </summary>
            <param name="pageSetup">Page setup object</param>
            <param name="headerBounds">Header bounds</param>
            <param name="footerBounds">Footer bounds</param>
            <param name="pageBounds">Page bounds</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetTopBorderPoints(Syncfusion.DocIO.DLS.WPageSetup,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the bounds to draw top border
            </summary>
            <param name="pageSetup">Page setup object</param>
            <param name="headerBounds">Header bounds</param>
            <param name="footerBounds">Footer bounds</param>
            <param name="pageBounds">Page bounds</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetFontSize(Syncfusion.DocIO.DLS.TextWatermark)">
            <summary>
            Gets the font size for Text Watermark
            </summary>
            <param name="textWatermark">Text Watermark</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawImageWatermark(Syncfusion.DocIO.DLS.PictureWatermark,Syncfusion.Drawing.RectangleF,Syncfusion.DocIO.DLS.WPageSetup)">
            <summary>
            Draws the Picture Watermark
            </summary>
            <param name="pictureWatermark">Picture Watermark</param>
            <param name="bounds">Bounds</param>
            <param name="pageSetup">Page Setup</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawEditableCheckbox(Syncfusion.DocIO.DLS.WCheckBox,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the Editable check box.
            </summary>
            <param name="checkbox">The checkbox.</param>
            <param name="ltWidget">The ltWidget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCheckBox(Syncfusion.DocIO.DLS.WCheckBox,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the check box.
            </summary>
            <param name="checkbox">The checkbox.</param>
            <param name="ltWidget">The lt widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawPictureFill(Syncfusion.DocIO.DLS.ImageRecord,Syncfusion.Pdf.Graphics.PdfPath,Syncfusion.Drawing.RectangleF,System.Single)">
            <summary>
            Draw picture fill 
            </summary>
            <param name="imageBytes">Imagebytes</param>
            <param name="path">Shapes path</param>
            <param name="bounds">Layouted widget bounds</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ApplyImageTransparency(Syncfusion.Drawing.SkiaSharpHelper.ImageAttributes,System.Single)">
            <summary>
            Apply transparency for image
            </summary>
            <param name="imageAttributes">Represents image Attributes</param>
            <param name="transparency">Represents image transparency</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPdfLineJoin(Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin)">
            <summary>
            Convert the LineJoin as PdfLineJoin
            </summary>
            <param name="lineJoin"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawChildShape(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw child shape
            </summary>
            <param name="childShape"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsShapeNeedToBeFill(Syncfusion.DocIO.DLS.AutoShapeType)">
            <summary>
            
            </summary>
            <param name="shapeType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetTransformMatrix(Syncfusion.Drawing.RectangleF,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Rotate the shape based on Flip positions
            </summary>
            <param name="bounds"></param>
            <param name="ang"></param>
            <param name="flipH"></param>
            <param name="flipV"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetGraphicsPath(Syncfusion.DocIO.DLS.Shape,Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfPen@)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetGraphicsPath(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfPen@)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasureImage(Syncfusion.DocIO.DLS.WPicture)">
            <summary>
            Measures the image.
            </summary>
            <param name="image">The image.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasurePictureBulletSize(Syncfusion.DocIO.DLS.WPicture,Syncfusion.Drawing.Font)">
            <summary>
            Measures the picture bullet size
            </summary>
            <param name="picture">Picture</param>
            <param name="font">Font</param>
            <returns>The size of picture bullet</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasureString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.StringFormat,Syncfusion.Office.FontScriptType)">
            <summary>
            Measures the string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasureString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.StringFormat,Syncfusion.DocIO.DLS.WCharacterFormat,System.Boolean,Syncfusion.Office.FontScriptType)">
            <summary>
            Measures the string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="format">The format.</param>
            <param name="charFormat">The character format.</param>
            <param name="isMeasureFromTabList">isMeasureFromTabList</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetExactStringBounds(System.String,Syncfusion.Drawing.Font)">
            <summary>
            Gets the exact bounds of a string without an line spacing and top/bottom spacing values of font.
            </summary>
            <param name="text">Specify the input string.</param>
            <param name="font">Specify the font to measure.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasureString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.StringFormat,Syncfusion.DocIO.DLS.WCharacterFormat,System.Boolean,System.Boolean,Syncfusion.Office.FontScriptType)">
            <summary>
            Measures the string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="format">The format.</param>
            <param name="charFormat">The character format.</param>
            <param name="isMeasureFromTabList">if set to <c>true</c> [is measure from tab list].</param>
            <param name="isMeasureFromSmallCapString">if set to <c>true</c> [is measure from small cap string].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetFallbackPdfFont(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Drawing.Font,System.String,Syncfusion.Office.FontScriptType,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Gets fall back font to preserve the text in converted PDF document.
            </summary>
            <param name="pdfFont">Represent original Pdf Font.</param>
            <param name="systemFont">Represent original System font.</param>
            <param name="inputText">Represent a input text.</param>
            <param name="scriptType">Represent the scriptType of a input text.</param>
            <param name="pdfStringFormat">Represent PdfStringFormat.</param>
            <returns>Returns a fall back font instance, if it has; otherwise returns original Pdf Font.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetFallbackPdfFont(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Drawing.Font,System.String,Syncfusion.Office.FontScriptType,Syncfusion.Pdf.Graphics.PdfStringFormat,System.Collections.Generic.List{Syncfusion.Office.FallbackFont},System.Collections.Generic.Dictionary{System.String,System.IO.Stream},System.Boolean,System.Boolean)">
            <summary>
            Gets fall back font to preserve the text in converted PDF document.
            </summary>
            <param name="pdfFont">Represent original Pdf Font.</param>
            <param name="systemFont">Represent original System font.</param>
            <param name="inputText">Represent a input text.</param>
            <param name="pdfStringFormat">Represent PdfStringFormat.</param>
            <param name="fontStreams">Represent Substituted or embedded font stream.</param>
            <returns>Returns a fall back font instance, if it has; otherwise returns original Pdf Font.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetFallBackFontFromSubstitutionOrEmbedded(System.String,System.String,Syncfusion.Drawing.Font,System.Collections.Generic.Dictionary{System.String,System.IO.Stream})">
            <summary>
            Get fall back font from font substituted or embedded font stream.
            </summary>
            <param name="inputText">Represent a input text.</param>
            <param name="fallbackFontName">Represent the fallback font name.</param>
            <param name="tempFont">Represent the fallback font instances.</param>
            <param name="fontStreams">Represent substituted or embedded font stream.</param>
            <returns>Returns a fallback font instance, if it exists in the substituted or embedded font stream collection; otherwise returns null.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsContainFont(Syncfusion.Pdf.Graphics.PdfFont,System.String,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Check whether all the characters (glyphs) of input text is available in input font or not.
            </summary>
            <param name="pdfFont">Represent the input font to check.</param>
            <param name="inputText">Represent the input text to check.</param>
            <param name="pdfStringFormat">Represent the PdfStringFormat.</param>
            <returns>Returns true, if all input character glyphs are available in input font; Otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetFactor(System.String)">
            <summary>
            Get the factor.
            </summary>
            <param name="fontName">Represents a font name.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetSubSuperScriptFontSize(Syncfusion.Drawing.Font)">
            <summary>
            Calculates the font size for subscript and superscript font.
            </summary>
            <param name="font">Represets a normal font to change as subscript and superscript size.</param>
            <returns>Returns font size of subscript and superscript for corresponding inputed font.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetExceededLineHeightForArialUnicodeMSFont(Syncfusion.Drawing.Font,System.Boolean,Syncfusion.Office.FontScriptType)">
            <summary>
            Get the Exceeded line height of the Arial unicode MS font.
            </summary>
            <param name="font">The font.</param>
            <param name="isAscent">isAscent.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasureString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.Font,Syncfusion.Drawing.StringFormat,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Office.FontScriptType)">
            <summary>
            Measures the string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="defaultFont">The default font</param>
            <param name="format">The format.</param>
            <param name="charFormat">The Character format</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasureSmallCapString(System.String,Syncfusion.Drawing.SizeF@,Syncfusion.Drawing.Font,Syncfusion.Drawing.StringFormat,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Office.FontScriptType)">
            <summary>
            Measures the small cap string.
            </summary>
            <param name="text">The text.</param>
            <param name="size">The size.</param>
            <param name="font">The font.</param>
            <param name="format">The format.</param>
            <param name="charFormat">The character format.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasureUnicodeString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.Font,Syncfusion.Drawing.StringFormat,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Office.FontScriptType)">
            <summary>
            Draw Unicode Text
            </summary>
            <param name="text"></param>
            <param name="font"></param>
            <param name="defaultFont"></param>
            <param name="format"></param>
            <param name="charFormat"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasureTextRange(Syncfusion.DocIO.DLS.WTextRange,System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="txtRange"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetAscent(Syncfusion.Drawing.Font,Syncfusion.Office.FontScriptType)">
            <summary>
            Gets the ascent
            </summary>
            <param name="font">The Font.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetDescent(Syncfusion.Drawing.Font,Syncfusion.Office.FontScriptType)">
            <summary>
            Gets the descent
            </summary>
            <param name="font">The Font.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IntializeGraphics(Syncfusion.DocIO.DLS.WPageSetup)">
            <summary>
            Intialize the Graphics with specified WPageSetup.
            </summary>
            <param name="pageSetup">Represents a PageSetup.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DisposeGraphics">
            <summary>
            Dispose a instance of Graphics.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FillRectangle(Syncfusion.Drawing.Color,Syncfusion.Drawing.Rectangle)">
            <summary>
            Fill a rectangle with specified color.
            </summary>
            <param name="color">Represents a color to be fill.</param>
            <param name="rectangle">Represents a bounds of Rectangle.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MatrixTranslate(Syncfusion.Drawing.Matrix,System.Single,System.Single,Syncfusion.Drawing.MatrixOrder)">
            <summary>
            Translate the specified matrix with offsetX and offsetY
            </summary>
            <param name="matrix">Represent the matrix to translate</param>
            <param name="x">Represent the offsetX</param>
            <param name="y">Represent the offsetY</param>
            <param name="matrixOrder">Represent the MatrixOrder to traslate</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MatrixMultiply(Syncfusion.Drawing.Matrix,Syncfusion.Drawing.Matrix,Syncfusion.Drawing.MatrixOrder)">
            <summary>
            Multiply the specified matrix with target matrix
            </summary>
            <param name="matrix">Represent the matrix to translate</param>
            <param name="target">Represent the target matrix</param>
            <param name="matrixOrder">Represent the MatrixOrder to traslate</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MatrixRotate(Syncfusion.Drawing.Matrix,System.Single,Syncfusion.Drawing.PointF,Syncfusion.Drawing.MatrixOrder)">
            <summary>
            Rotate the specified matrix with specified angle.
            </summary>
            <param name="matrix"></param>
            <param name="angle">Represent the angle to rotate the matrix</param>
            <param name="point">Represent the center point to rotate a matrix</param>
            <param name="matrixOrder">Represent the MatrixOrder to traslate</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreateGraphicsPath">
            <summary>
            Gets a new GraphicsPath object.
            </summary>
            <returns>Returns a new GraphicsPath object.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreateBitmap(System.Int32,System.Int32)">
            <summary>
            Gets a new Bitmap object with specified width and height.
            </summary>
            <param name="width">Represents a width of Bitmap.</param>
            <param name="height">Represents a height of Bitmap.</param>
            <returns>Returns a new Bitmap object with specified width and height.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetGraphicsFromImage(Syncfusion.Drawing.SkiaSharpHelper.Bitmap)">
            <summary>
            Gets a Graphics of with specified image.
            </summary>
            <param name="bmp">Represents a image that we need to gets a graphics.</param>
            <returns>Returns a Graphics of with specified image.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreateBitmap">
            <summary>
            Gets a new Bitmap object.
            </summary>
            <returns>Returns a new Bitmap object.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreateBrush(Syncfusion.Drawing.Color)">
            <summary>
            Gets a new SolidBrush object with specified color.
            </summary>
            <param name="color">Represents a color of SolidBrush.</param>
            <returns>Returns a new SolidBrush object with specified color.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePen(Syncfusion.Drawing.Color,System.Single)">
            <summary>
            Gets a new Pen object with specified color and width.
            </summary>
            <param name="color">Represents a color of Pen.</param>
            <param name="width">Represents a width of Pen.</param>
            <returns>Returns a new Pen object with specified color and width.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawArrowHead(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@,Syncfusion.Drawing.PointF[])">
            <summary>
            Draws the arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
            <param name="linePoints">The line points1.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawArrowHead(Syncfusion.DocIO.DLS.Shape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@,Syncfusion.Drawing.PointF[])">
            <summary>
            Draws the arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
            <param name="linePoints">The line points1.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawOpenEndArrowHead(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the open end arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCloseEndArrowHead(Syncfusion.DocIO.DLS.Shape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the close end arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawStealthEndArrowHead(Syncfusion.DocIO.DLS.Shape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the stealth end arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCloseEndArrowHead(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the close end arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawStealthEndArrowHead(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the stealth end arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawOpenBeginArrowHead(Syncfusion.DocIO.DLS.Shape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the open begin arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawOpenBeginArrowHead(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the open begin arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCloseBeginArrowHead(Syncfusion.DocIO.DLS.Shape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the close begin arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCloseBeginArrowHead(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the close begin arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawStealthBeginArrowHead(Syncfusion.DocIO.DLS.Shape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the stealth begin arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawStealthBeginArrowHead(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the stealth begin arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddCloseArrowHeadPoints(Syncfusion.Drawing.PointF[],Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Adds the close arrow head points.
            </summary>
            <param name="points">The points.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddStealthArrowHeadPoints(Syncfusion.Drawing.PointF[],Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Adds the stealth arrow head points.
            </summary>
            <param name="points">The points.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddOpenArrowHeadPoints(Syncfusion.Drawing.PointF[],Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Adds the open arrow head points.
            </summary>
            <param name="points">The points.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetOpenArrowDefaultValues(Syncfusion.DocIO.DLS.LineFormat,System.Single,System.Single@,System.Single@,System.Single@,System.Boolean)">
            <summary>
            Gets the open arrow default values.
            </summary>
            <param name="lineFormat">The lineFormat.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
            <param name="isFromBeginArrow">if set to <c>true</c> [is from begin arrow].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetCloseArrowDefaultValues(Syncfusion.DocIO.DLS.LineFormat,System.Single,System.Single@,System.Single@,System.Single@,System.Boolean)">
            <summary>
            Gets the close arrow default values.
            </summary>
            <param name="lineFormat">The shape lineFormat.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
            <param name="isFromBeginArrow">if set to <c>true</c> [is from begin arrow].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetArrowHeadLength(Syncfusion.DocIO.DLS.LineFormat,System.Boolean)">
            <summary>
            Gets the length of the arrow head.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetCloseNarrowArrowDefaultValues(Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineEndLength,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the close narrow arrow default values.
            </summary>
            <param name="arrowHeadLength">Length of the arrow head.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetCloseMediumArrowDefaultValues(Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineEndLength,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the close medium arrow default values.
            </summary>
            <param name="arrowHeadLength">Length of the arrow head.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetCloseWideArrowDefaultValues(Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineEndLength,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the close wide arrow default values.
            </summary>
            <param name="arrowHeadLength">Length of the arrow head.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetOpenNarrowArrowDefaultValues(Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineEndLength,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the open narrow arrow default values.
            </summary>
            <param name="arrowHeadLength">Length of the arrow head.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetOpenMediumArrowDefaultValues(Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineEndLength,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the open medium arrow default values.
            </summary>
            <param name="arrowHeadLength">Length of the arrow head.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetOpenWideArrowDefaultValues(Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineEndLength,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the open wide arrow default values.
            </summary>
            <param name="arrowHeadLength">Length of the arrow head.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindAngleToLeftAndRightHeadPoint(System.Boolean,System.Boolean,System.Single,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean)">
            <summary>
            Finds the angle to left and right head point.
            </summary>
            <param name="isFlipHorizontal"></param>
            <param name="isFlipVertical"></param>
            <param name="width"></param>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="isFromBeginArrow"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindAngleToLeftAndRightHeadPoint(Syncfusion.DocIO.DLS.Shape,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean)">
            <summary>
            Finds the angle to left and right head point.
            </summary>
            <param name="shape">The shape.</param>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="isFromBeginArrow"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindArrowHeadAngleRadians(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean)">
            <summary>
            Finds the arrow head angle radians.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="isFromSeparateOrientation">if set to <c>true</c> [is from separate orientation].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindBaseLineEndPoint(System.Boolean,System.Boolean,System.Single,System.Single,Syncfusion.Drawing.PointF[],System.Single,System.Boolean)">
            <summary>
            Finds the base line end point.
            </summary>
            <param name="isFlipHorizontal"></param>
            <param name="isFlipVertical"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="linePoints">The line points.</param>
            <param name="adjustValue">The adjust value.</param>
            <param name="isFromBeginArrow"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetEndPointForBaseLine(System.Boolean,System.Double,System.Double,System.Single,Syncfusion.Drawing.PointF[],System.Single@,System.Single@)">
            <summary>
            Gets the end point.
            </summary>
            <param name="isFromBeginArrow">if set to <c>true</c> [is from begin arrow].</param>
            <param name="degree">The degree.</param>
            <param name="length">The length.</param>
            <param name="adjustValue">The adjust value.</param>
            <param name="linePoints">The line points.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindAngleRadians(Syncfusion.Drawing.PointF[],System.Boolean)">
            <summary>
            Finds the angle radians.
            </summary>
            <param name="linePoints">The line points.</param>
            <param name="isFromBottomToTop">if set to <c>true</c> [is from bottom to top].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindArrowHeadPoints(Syncfusion.DocIO.DLS.Shape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],System.Boolean,System.Boolean)">
            <summary>
            Finds the end cap arrow head points.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="isFromOpenArrow">if set to <c>true</c> [is from open arrow].</param>
            <param name="isFromBeginArrow"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindArrowHeadPoints(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],System.Boolean,System.Boolean)">
            <summary>
            Finds the end cap arrow head points.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="isFromOpenArrow">if set to <c>true</c> [is from open arrow].</param>
            <param name="isFromBeginArrow"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindLeftRightHeadPoints(System.Boolean,System.Boolean,System.Single,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF[]@,System.Single,System.Single,System.Boolean)">
            <summary>
            Finds the left right head points.
            </summary>
            <param name="isFlipHorizontal"></param>
            <param name="isFlipVertical"></param>
            <param name="width"></param>
            <param name="linePoints">The line points.</param>
            <param name="points">The points.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="isFromBeginArrow">if set to <c>true</c> [is from begin arrow].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ConstrucBasetLine(System.Boolean,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@)">
            <summary>
            Construcs the baset line.
            </summary>
            <param name="isFromBeginArrow">if set to <c>true</c> [is from begin arrow].</param>
            <param name="points">The points.</param>
            <param name="linePoints">The line points.</param>
            <param name="point1"></param>
            <param name="point2"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetArrowDefaultValues(Syncfusion.DocIO.DLS.LineFormat,Syncfusion.Pdf.Graphics.PdfPen,System.Single@,System.Single@,System.Single@,System.Boolean,System.Boolean)">
            <summary>
            Gets the arrow default values.
            </summary>
            <param name="lineFormat">The line Format.</param>
            <param name="pen">The pen.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
            <param name="isFromOpenArrow"></param>
            <param name="isFromBeginArrow">if set to <c>true</c> [is from begin arrow].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.RadianToDegree(System.Double)">
            <summary>
            Radians to degree.
            </summary>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Degree2Radian(System.Double)">
            <summary>
            Degree2s the radian.
            </summary>
            <param name="a">A.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetEndPoint(System.Double,System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Gets the end point.
            </summary>
            <param name="angle">The angle.</param>
            <param name="len">The length.</param>
            <param name="start_x">The start_x.</param>
            <param name="start_y">The start_y.</param>
            <param name="end_x">The end_x.</param>
            <param name="end_y">The end_y.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLinePointsBasedOnFlip(System.Boolean,System.Boolean,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the line points based on flip.
            </summary>
            <param name="isFlipHorizontal"></param>
            <param name="isFlipVertical"></param>
            <param name="bounds">The bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsSoftHyphen(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Determines whether the text range is soft hyphen and that need to be drawn.
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetStringFormat(Syncfusion.DocIO.DLS.WCharacterFormat)">
            <summary>
            Gets the string format.
            </summary>
            <param name="charFormat">The char format.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetBrush(Syncfusion.Drawing.Color)">
            <summary>
            Gets the brush.
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPDFBrush(Syncfusion.Drawing.Color)">
            <summary>
            Gets the pdf brush.
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetTextColor(Syncfusion.DocIO.DLS.WCharacterFormat)">
            <summary>
            Gets the color of the text.
            </summary>
            <param name="charFormat">The char format.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetRevisionColor(Syncfusion.DocIO.DLS.RevisionColor)">
            <summary>
            Get the RevisionColor
            </summary>
            <param name="revisionColor">Revision color</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetRevisionColor(Syncfusion.DocIO.DLS.RevisionColor,System.Boolean)">
            <summary>
            Get the RevisionColor
            </summary>
            <param name="revisionColor">Revision color</param>
            <param name="isInsertText">Is revision type insert type</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetRevisionColor(Syncfusion.DocIO.DLS.RevisionColor,System.Boolean,System.Boolean)">
            <summary>
            Get the RevisionColor
            </summary>
            <param name="revisionColor">Revision color</param>
            <param name="isInsertText">Is revision type insert type</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetRevisionFillColor(Syncfusion.DocIO.DLS.RevisionColor,System.Boolean)">
            <summary>
            Get the RevisionColor to fill a comment balloon.
            </summary>
            <param name="revisionColor">Revision color</param>
            <param name="isInsertText">Is revision type insert type</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateAlternateFont(Syncfusion.DocIO.DLS.WCharacterFormat,System.String,Syncfusion.Drawing.Font@)">
            <summary>
            Updates the alternate font for the font not installed in the system.
            </summary>
            <param name="charFormat">The char format.</param>
            <param name="fontName">Name of the font.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsTOC(Syncfusion.DocIO.DLS.WTextRange)">
            <summary>
            Checks the owner paragraph of the textrange is a TOC
            </summary>
            <param name="txtRange">Text Range</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ParagraphContainsTOC(Syncfusion.DocIO.DLS.WTextRange)">
            <summary>
            Determins whether the paragraph is TOC.
            </summary>
            <param name="txtRange"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ParagraphContainsHyperlink(Syncfusion.DocIO.DLS.Entity)">
            <summary>
            Determines the the paragraph contians hyperlink field.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.isTOCParagraphInHyperLink(Syncfusion.DocIO.DLS.WTextRange)">
            <summary>
            To check the current text range is present inside the HyperLink.
            </summary>
            <param name="txtRange"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsTextRangeFound(Syncfusion.DocIO.DLS.WField,Syncfusion.DocIO.DLS.WTextRange)">
            <summary>
            Check whether current text range is present inside the hyperlink field.
            </summary>
            <param name="hyperLinkField"></param>
            <param name="textRange"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetFont(Syncfusion.Office.FontScriptType,Syncfusion.DocIO.DLS.WCharacterFormat,System.String)">
            <summary>
            Gets the font.
            </summary>
            <param name="scriptType"></param>
            <param name="charFormat">The char format.</param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateBidiFont(Syncfusion.Office.FontScriptType,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.Font,System.Single,Syncfusion.Drawing.FontStyle)">
            <summary>
            Updates the font name and size based on the Bidi property.
            </summary>
            <param name="scriptType"></param>
            <param name="charFormat">Character format of the current text range.</param>
            <param name="font">Font applied to the current text.</param>
            <param name="fontSize">Font size applied to the current text.</param>
            <param name="fontStyle">Font style applied to the current text.</param>
            <returns>Returns current text range Bidi font.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetStringAlignment(Syncfusion.DocIO.DLS.WParagraphFormat)">
            <summary>
            Gets the string alignment.
            </summary>
            <param name="paraFormat">The para format.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPen(Syncfusion.DocIO.DLS.Border,System.Boolean)">
            <summary>
            Gets the pen.
            </summary>
            <param name="border">The border.</param>
            <param name="isParagraphBorder"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPen(Syncfusion.DocIO.DLS.BorderStyle,System.Single,Syncfusion.Drawing.Color)">
            <summary>
            Gets the pen.
            </summary>
            <param name="borderType">Type of the border.</param>
            <param name="borderLineWidth">Width of the border line.</param>
            <param name="borderColor">Color of the border.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPen(Syncfusion.Drawing.UnderlineStyle,System.Single,Syncfusion.Drawing.Color)">
            <summary>
            Gets the pen.
            </summary>
            <param name="underlineStyle">Type of the underline.</param>
            <param name="lineWidth">Width of the underline.</param>
            <param name="lineColor">Color of the underline.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ScaleImage(Syncfusion.Drawing.SkiaSharpHelper.Image,System.Single,System.Single)">
            <summary>
            Scales the image.
            </summary>
            <param name="srcImage">The image.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddLinkToBookmark(Syncfusion.Drawing.RectangleF,System.String,System.Boolean)">
            <summary>
            Adds link to the bookmark.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="bookmarkName">The bookmark name.</param>
            <param name="isTargetNull">The target is nothing.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreateAndAddLinkToBookmark(Syncfusion.Drawing.RectangleF,System.String,System.Boolean)">
            <summary>
            Creates bookmark hyperlink and add into list.
            </summary>
            <param name="bounds"></param>
            <param name="bookmarkName"></param>
            <param name="isTargetNull"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddHyperLink(Syncfusion.DocIO.DLS.Hyperlink,Syncfusion.Drawing.RectangleF)">
            <summary>
            Adds the hyper link to collection.
            </summary>
            <param name="hyperlink">The hyperlink.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddHyperLink(Syncfusion.DocIO.DLS.WPicture,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Adds the hyper link to collection.
            </summary>
            <param name="picture">The picture.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateBookmarkTargetBoundsAndPageNumber(Syncfusion.DocIO.DLS.Rendering.DocumentLayouter.BookmarkHyperlink,System.String)">
            <summary>
            Updates the target bounds and page number for current bookmark.
            </summary>
            <param name="bmhyperlink">Bookmark hyperlink.</param>
            <param name="bmHyperlinkValue">Bookmark hyperlink value.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateTOCLevel(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.DocIO.DLS.Rendering.DocumentLayouter.BookmarkHyperlink)">
            <summary>
            Updates the TOC level.
            </summary>
            <param name="paragraph">The paragraph.</param>
            <param name="bookmark">The bookmark.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateResIndex(System.String,Syncfusion.Layouting.ITextMeasurable,System.Int32,System.Boolean,System.Boolean,System.Double,System.Single,System.Single,System.Boolean)">
            <summary>
            Updates Result index
            </summary>
            <param name="text">text</param>
            <param name="measurer">the measurer</param>
            <param name="resIndex">res index</param>
            <param name="bSplitByChar">bSplitByChar</param>
            <param name="bIsInCell">bIsInCell</param>
            <param name="offset">offset</param>
            <param name="clientWidth">Client Width</param>
            <param name="clientActiveAreaWidth"></param>
            <param name="isSplitByCharacter"></param>
            <returns>res Index</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsLeadingCharacter(System.Char)">
            <summary>
            Determine whether the character is CJK leading character
            A line of text cannot end with any leading characters, which are listed below
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsBeginCharacter(System.Char)">
            <summary>
            Determine whether the character is Begin CJK character
            A line of text cannot begin with any following characters
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsOverFlowCharacter(System.Char)">
            <summary>
            Determine whether the character is CJK overflow character
            Overflow characters are allowed to render in the same line when it doesn't have required client width to fit the character
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsUnicodeText(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPreviousSibling(Syncfusion.DocIO.DLS.WTextRange)">
            <summary>
            Get previous text range
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetCellWidth(Syncfusion.DocIO.DLS.ParagraphItem)">
            <summary>
            Get cell Width
            </summary>
            <param name="paraItem">The paragraph item</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPdfFontCollectionKey(Syncfusion.Drawing.Font,System.Boolean)">
            <summary>
            Concatenates the font name, style, font size and Unicode text and returns the key for PDFFontCollection.
            </summary>
            <param name="font">Font object to extract font name, font size and font style from.</param>
            <param name="isUnicode">check whether it's unicode or not.</param>
            <returns>Key for the PdfFontCollection dictionary to store and retreive the created PdfFont.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsUnicode(System.String)">
            <summary>
            Determines whether the text is unicode
            </summary>
            <param name="text">text</param>
            <returns>
            	<c>true</c> if text is unicode, set to <c>true</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetWordLength(System.String,System.Int32)">
            <summary>
            Gets length of WORD.
            NOTE:
            - WORD: text run that finished by last space letter 
              (sample: "text  " or "  "; wrong sample: " text" or "text  text" )
            EXCLUSION:
            - If text working part have zero symbols return (-1)
            - If text working part don't consist SPACE letters return legth of 
              text working part
            </summary>
            <param name="text"></param>
            <param name="startIndex">Index of word first letter</param>
            <returns>Length of found word</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DefaultBorders.Vertical">
            <summary>
            Gets the vertical border
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DefaultBorders.Horizontal">
            <summary>
            Gets / sets the horizontal border
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DefaultBorders.#ctor(Syncfusion.DocIO.DLS.RowFormat)">
            <summary>
            
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DefaultBorders.InitBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.DocIO.DLS.Border)">
            <summary>
            
            </summary>
            <param name="destination"></param>
            <param name="sourse"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawBehindWidgets(Syncfusion.Layouting.LayoutedWidgetList,Syncfusion.Layouting.IWidget,System.Int32,System.Boolean)">
            <summary>
            Draws the behind shape widgets.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetOrderIndex(Syncfusion.Layouting.IWidget)">
            <summary>
            Get Order index of the floating item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLineWidth(Syncfusion.DocIO.ReaderWriter.Biff_Records.BorderCode)">
            <summary>
            Get the line width of the picture border for Inline picture shape
            </summary>
            <param name="border"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLineWidth(Syncfusion.DocIO.DLS.WPicture)">
            <summary>
            Get the line width of the picture border
            </summary>
            <param name="picture"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.BookmarkPosition.BookmarkStyle">
            <summary>
            Gets or sets the bookmarkStyle.
            </summary>
            <value>The bookmarkStyle.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.BookmarkPosition.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.BookmarkPosition.PageNumber">
            <summary>
            Gets or sets the page number.
            </summary>
            <value>The page number.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.BookmarkPosition.BookmarkName">
            <summary>
            Gets or sets the name of the bookmark.
            </summary>
            <value>The name of the bookmark.</value>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.BookmarkPosition.#ctor(System.String,System.Int32,Syncfusion.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DocToPdfConverter.Rendering.BookmarkPosition"/> class.
            </summary>
            <param name="bookmarkName">Name of the bookmark.</param>
            <param name="pageNumber">The page number.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="T:Syncfusion.DocToPdfConverter.Rendering.SortByColorBrightness">
            <summary>
            Sort the border rendering order based on its color brightness order
            </summary>
        </member>
        <member name="T:Syncfusion.DocToPdfConverter.Rendering.MathRenderer">
            <summary>
            Represents the class which drawing a Math Equations.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.MathRenderer.#ctor(Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext)">
            <summary>
            Creates a <see cref="T:Syncfusion.DocToPdfConverter.Rendering.MathRenderer"/> class instance to render the WMath entity.
            </summary>
            <param name="drawingContext">Represent the <see cref="T:Syncfusion.DocIO.Rendering.DrawingContext"/></param>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.MathRenderer.DrawingContext">
            <summary>
            Gets a <see cref="T:Syncfusion.DocIO.Rendering.DrawingContext"/> class object for drawing.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.MathRenderer.Draw(Syncfusion.DocIO.DLS.WMath,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the WMath instance.
            </summary>
            <param name="math">Represent the WMath instance to draw</param>
            <param name="ltWidget">Represent the layouted widget of WMath instance</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.MathRenderer.Draw(Syncfusion.Layouting.LayoutedOMathWidget)">
            <summary>
            Draw the IOfficeMath instance.
            </summary>
            <param name="layoutedOMathWidget">Represent the layouted widget of OfficeMath instance</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.MathRenderer.DrawDelimiterCharacter(Syncfusion.Layouting.LayoutedStringWidget,System.Single,Syncfusion.DocIO.DLS.WCharacterFormat)">
            <summary>
            Draw the delimiter character with required stretching.
            </summary>
            <param name="delimiterCharacterWidget">Specify the delimiter widget.</param>
            <param name="stretchableHeight">Specify the required height to stretch.</param>
            <param name="format">Specify the character format.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.MathRenderer.Draw(Syncfusion.Layouting.LayoutedLineWidget)">
            <summary>
            Draw the Line used in MathML.
            </summary>
            <param name="lineWidget">Represent the layouted widget of a line.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.MathRenderer.Draw(Syncfusion.Layouting.LayoutedStringWidget,Syncfusion.DocIO.DLS.WCharacterFormat,System.Single)">
            <summary>
            Draw the layouted string widget.
            </summary>
            <param name="stringWidget">Represent the string widget</param>
            <param name="characterFormat">Represent the characterFormat</param>
            <param name="scalingFactor">Represent the scalingFactor</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.MathRenderer.Dispose">
            <summary>
            Dispose a MathRenderer object.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.BackgroundImage">
            <summary>
            Gets or sets the background image displayed in the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.ChartArea">
            <summary>
            Gets the chart area of the ChartControl.
            </summary>
            <value></value>        
        </member>
        <member name="M:Syncfusion.Chart.ChartControl.Syncfusion#Chart#IChartAreaHost#GetChartArea">
            <summary>
            Gets the chart area hosted by the ChartControl.
            </summary>
            <returns>Instance of class that implements the interface <see cref="T:Syncfusion.Chart.IChartArea"/></returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.DockingManager">
            <summary>
            Gets a reference to the <see cref="T:Syncfusion.Chart.ChartDockingManager"/> that manages the position of elements on the chart, like the legend.
            </summary>
            <value></value>        
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Resolution">
            <summary>
            Resolution of the image to be saved
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.RequireAxes">
            <summary>
            Gets or sets a value indicating whether the chart requires axes.
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.RequireInvertedAxes">
            <summary>
            Gets or sets a value indicating whether the chart requires inverted axes.
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.ForeColor">
            <summary>
            Gets or sets Chart's ForeColor. This member overrides <see cref="!:Control.ForeColor"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.BackInterior">
            <summary>
             Gets or sets backcolor of the chart control.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.ChartAreaMargins">
            <summary>
            Gets or sets a value that indicates the margins that will be deduced from the ChartArea's representation rectangle.
            Negative values are supported.
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.ColumnDrawMode">
            <summary>
            Gets or sets the mode of drawing the column chart. See also <see cref="P:Syncfusion.Chart.ChartControl.ColumnWidthMode"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.ColumnWidthMode">
            <summary>
            Gets or sets the mode of column drawing. See also <see cref="P:Syncfusion.Chart.ChartControl.ColumnDrawMode"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.ColumnFixedWidth">
            <summary>
            Gets or sets the width of each column when <see cref="P:Syncfusion.Chart.ChartControl.ColumnWidthMode"/> is set to FixedWidthMode.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.CustomPoints">
            <summary>
            Gets the collection of custom points. Please refer to <see cref="T:Syncfusion.Chart.ChartCustomPoint"/> for more information.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Radar">
            <summary>
            Gets a value indicating whether the chart is Radar. This returns True if type of the first series is ChartSeriesType.Radar.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Bar">
            <summary>
            Gets a value indicating whether the chart is Bar. This returns True if type of the first series is ChartSeriesType.Bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.IsScatter">
            <summary>
            Gets a value indicating whether the chart is Scatter. This returns True if type of the first series is Scatter
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Polar">
            <summary>
            Gets a value indicating whether the chart is Polar. This returns True if type of the first series is ChartSeriesType.Polar.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.RadarStyle">
            <summary>
            Gets or sets a value indicates the style of the radar chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.RoundingPlaces">
            <summary>
             Gets or sets the number of places to round data to for display (by default).
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.SizeMargins">
            <summary>
            Gets size with minimal height and width of chart control with enough places to draw chart area.
            This property must be used generally by parent control of chart control in order to determine the size margins.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.TextPosition">
            <summary>
            Gets or sets the position of text displayed as the chart's caption. Please refer to <see cref="T:Syncfusion.Chart.ChartTextPosition"/> for
            available options.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.RealMode3D">
            <summary>
            Gets or sets a value indicating whether the chart should be displayed in a 3D plane.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.InvertedSeriesIsCompatible">
            <summary>
            Gets or sets a value indicating whether the inverted series is compatible
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Titles">
            <summary>
            Gets the list of <see cref="T:Syncfusion.Chart.ChartTitle"/> entries. The first one is the default <see cref="P:Syncfusion.Chart.ChartControl.Title"/>.
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Title">
            <summary>
            Gets the default title.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Controls">
            <summary>
            Gets the collection of controls contained within the control.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Windows.Forms.Control.ControlCollection"></see> representing the collection of controls contained within the control.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Legends">
            <summary>
            Gets a collection of <see cref="T:Syncfusion.Chart.ChartLegend"/>s that are shown in the chart. The first one is the default <see cref="P:Syncfusion.Chart.ChartControl.Legend"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Legend">
            <summary>
            Gets the configuration information for the default legend object. Please refer to <see cref="T:Syncfusion.Chart.ChartLegend"/> for more information.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.LegendPosition">
            <summary>
            Gets or sets the position of the legend element. Please refer to <see cref="!:ChartLegend.Position"/> for more information
            on legend positioning options. Default is Right.
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.ShowLegend">
            <summary>
            Gets or sets a value indicating whether display the ChartLegend or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.LegendAlignment">
            <summary>
            Gets or sets the legend alignment.
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.LegendsPlacement">
            <summary>
            Gets or sets a value indicates whether legends is located inside or outside of chart.
            </summary>
            <value>The legends placement.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Model">
            <summary>
            The model contains all the data that is associated with a chart. Models can be shared between charts. Each model can
            be seen as a collection of a series. Each of these series contains data points and associated style information.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.CompatibleSeries">
            <summary>
            Gets or sets a value indicating whether the series are compatible.
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Series">
            <summary>
            Shortcut method that provides access to the <see cref="T:Syncfusion.Chart.ChartSeriesCollection"/> contained in the chart's model.
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Axes">
            <summary>
            Gets the collection of axes associated with this chart. You can add and remove axes from this collection.
            Primary X and Y axes may not be removed. Use the <see cref="P:Syncfusion.Chart.ChartControl.PrimaryXAxis"/> and <see cref="P:Syncfusion.Chart.ChartControl.PrimaryYAxis"/> to access
            the primary axes.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Indexed">
            <summary>
            Specifies if this chart is to be rendered in indexed mode. By default, chart points have X and Y values, both of
            which are taken into account for plotting. In indexed mode, the X values are ignored. The X axis purely represents
            the position of the points and not their X value. This mode is useful when representing data that has no real X axis value
            except position. For example, sales of two months side-by-side.
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.AllowGapForEmptyPoints">
            <summary>
            Gets or sets a value indicating whether allow or disallow the gap when points are empty in indexed mode
            </summary>
            <value></value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.PrimaryXAxis">
            <summary>
            Gets the primary X axis.
            </summary>
            <value>The primary X axis.</value>        
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.PrimaryYAxis">
            <summary>
            Gets the primary Y axis.
            </summary>
            <value>The primary Y axis.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.ChartAreaBackImage">
            <summary>
            The chart can display an image as its background. This property specifies the image to be used as the background.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.ChartInteriorBackImage">
            <summary>
            The chart can display an image as its interior background. This property specifies the image to be used as the chart interior background.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.ChartAreaShadow">
            <summary>
            Gets or sets a value indicating whether display the chart area shadow.
            </summary>
            <value><c>true</c> if [chart area shadow]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.ChartInterior">
            <summary>
            Gets or sets the interior of the chart. Please refer to <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> for more information.
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Depth">
            <summary>
            Gets or sets axes depth, "coordinate Z". 
            Only for enabled Series3D.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.ElementsSpacing">
            <summary>
            Gets or sets value for spacing from border inside ChartControl
            e.g. space between ChartControl right border and legend right border if LegendPosition set to right.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Palette">
            <summary>
            Gets or sets the palette that is to be used to provide default colors for series and other elements of a chart. Please refer to
            <see cref="T:Syncfusion.Chart.ChartColorPalette"/> for available options and customization.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.CustomPalette">
            <summary>
            Gets or sets an array of custom palette colors. If <see cref="P:Syncfusion.Chart.ChartControl.Palette"/> is <see cref="F:Syncfusion.Chart.ChartColorPalette.Custom"/>
            this colors is to be used to provide colors of series and other elements. This property duplicates <see cref="P:Syncfusion.Chart.ChartColorModel.CustomColors"/> property.
            <seealso cref="P:Syncfusion.Chart.ChartControl.Palette"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.AllowGradientPalette">
            <summary>
            Gets or sets a value indicating whether allow the gradient palette.
            </summary>
            <value>
            	<c>true</c> if [allow gradient palette]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Rotation">
            <summary>
            Gets or sets the angle rotation of axes relative to axis X.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Series3D">
            <summary>
            Specifies if the chart is displayed as 3D.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Style3D">
            <summary>
            Specifies if the 3D chart is displayed with 3D style.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.ShadowColor">
            <summary>
            Gets or sets color of shadow.
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.ShadowWidth">
            <summary>
            Gets or sets width of shadow.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.SmoothingMode">
            <summary>
            Specified how the chart elements should be rendered. Default is AntiAlias. Please refer to <see cref="P:Syncfusion.Chart.ChartControl.SmoothingMode"/> 
            in the GDI+ documentation for more information.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Spacing">
            <summary>
            Spacing is set as a percentage value and controls what portion of the interval partitioned for rendering gets
            used for empty space. Default value is 10%.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.SpacingBetweenSeries">
            <summary>
            Series Spacing is set as a percentage value and it controls the spacing between the series. Default value is 10%.
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.SpacingBetweenPoints">
            <summary>
            Gets or sets the spacing between points. Default value is 10%.
            </summary>
            <value>The spacing between points.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.TextAlignment">
            <summary>
            Gets or sets a value which specifies the alignment of the chart's text.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Tilt">
            <summary>
            Gets or sets the angle tilt of axes relative to axis Y.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.DropSeriesPoints">
            <summary>
            When a huge amount of points are drawn on the chart and these points can't be drawn
            correctly because of monitor resolution. Then performance can be improved by dropping 
            points ( not drawing ). This property controls the intelligent point dropping. Default is false.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Text">
            <summary>
            Specifies the default title text.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.TextRenderingHint">
            <summary>
            Gets or sets the way text is drawn. Default is SystemDefault.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.IndexValues">
            <summary>
            Gets a collection of all the indexed values. It's used for indexed mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.MinPointsDelta">
            <summary>
            Gets the minimal points delta.
            </summary>
            <value>The min points delta.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.Border">
            <summary>
            Gets or sets the border properties
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartControl.IsRadar">
            <summary>
            Gets or sets a value indicating whether the chart is radar chart.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartControl.Draw(Syncfusion.Drawing.Image)">
            <summary>
            Method to draw chart in the specified image
            </summary>
            <param name="img">Image</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartControl.Draw(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Size)">
            <summary>
            Method to draw chart with specified graphics in specified size
            </summary>
            <param name="g">Graphics</param>
            <param name="sz">Size</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartControl.Draw(Syncfusion.Drawing.Image,Syncfusion.Drawing.Size)">
            <summary>
            Method to draw chart in image with specified size
            </summary>
            <param name="img">Image</param>
            <param name="sz">Size</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartControl.SaveImage(System.IO.Stream)">
            <summary>
            Save the chart as image with specified file name
            </summary>
            <param name="filename">Stream to save the image</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartControl.SaveImage(System.IO.Stream,Syncfusion.OfficeChart.ChartRenderingOptions)">
            <summary>
            Save the chart as image with specified file name
            </summary>
            <param name="stream">Stream to save the image</param>
            <param name="imageOptions">ImageOptions to save the image</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartControl.#ctor">
            <summary>
            Chart Constructor
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.BackInterior">
            <summary>
            Gets or sets the back interior of the legend
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.Text">
            <summary>
            Gets or sets the legend Text
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.Items">
            <summary>
            Gets or sets the legend items
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.ShowBorder">
            <summary>
            Specifies legend border should be enabled or not
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.Name">
            <summary>
            Gets or sets the name of the legend
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.ItemsTextAligment">
            <summary>
            Gets or sets the vertical alignment of the legend
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.ItemsAlignment">
            <summary>
            Gets or sets the item alignment
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.RepresentationType">
            <summary>
            Gets or sets the Representation Type
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.ItemsSize">
            <summary>
            Gets or sets the size of items
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.ItemsShadowOffset">
            <summary>
            Gets or sets the offset of item shadow
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.ItemsShadowColor">
            <summary>
            Gets or sets the color of item shadow
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.Spacing">
            <summary>
            Gets or sets the spacing
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.RowsCount">
            <summary>
            Gets or sets the row count
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.ColumnsCount">
            <summary>
            Gets or sets the Column count
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.ShowSymbol">
            <summary>
            Specifies whether symbol should be enabled or not
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.OnlyColumnsForFloating">
            <summary>
            specify whether only column is used for floating legend
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.FloatingAutoSize">
            <summary>
            Specifies the auto size during floating
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.ShowItemsShadow">
            <summary>
            Speciifies whether item shadow should be enabled or not
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.SetDefSizeForCustom">
            <summary>
            Specifies whether custom legend items should use default size
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.Font">
            <summary>
            Gets or sets the legend font
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.ForeColor">
            <summary>
            Gets or sets the legend fore color
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.Border">
            <summary>
            Gets or sets the border properties of legend
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegend.Orientation">
            <summary>
            Specifies the orientation of the docked control  inside ChartArea
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegend.DefaultName">
            <summary>
            Default name of the legend
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartLegend.FilterItems">
            <summary>
            Legend items filter event
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegend.Render(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Method to render the legend
            </summary>
            <param name="g">Graphics</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegend.CalculateLegendRectangle(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SizeF,System.Int32,System.Int32,System.Int32,Syncfusion.Drawing.RectangleF,System.Single,Syncfusion.Drawing.SizeF,System.Single,Syncfusion.Chart.ChartLegendItem)">
            <summary>
            Calcualte legend rectangle.
            </summary>
            <param name="itemRect">Legend rectangle</param>
            <param name="cellSize">size of legend</param>
            <param name="ci">column index</param>
            <param name="ri">Row index</param>
            <param name="rows">Number of rows</param>
            <param name="contentRect">legend text rectangle</param>
            <param name="width">legend width</param>
            <param name="itemSize">legend text size</param>
            <param name="itemSizeWidth">legend text width</param>
            <param name="item">Chart legend items</param>
            <returns>Legend rectangle</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegend.UnWireSeriesCollection">
            <summary>
            Unwires series collection from the legend.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegend.Measure(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.SizeF)">
            <summary>
            Method to measure the legend size
            </summary>
            <param name="g"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegend.#ctor(Syncfusion.Chart.ChartControl)">
            <summary>
            Legend constructor
            </summary>
            <param name="chart"></param>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendsList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:Syncfusion.Windows.Forms.Chart.ChartLegend"/> at the specified index.
            </summary>
            <value>The ChartLegends Indexer.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendsList.Item(System.String)">
            <summary>
            Gets <see cref="T:Syncfusion.Chart.ChartLegend"/> by the name.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendsList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartLegendsList"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendsList.Add(Syncfusion.Chart.ChartLegend)">
            <summary>
            Adds the specified <see cref="T:Syncfusion.Chart.ChartLegend"/>.
            </summary>
            <param name="value">The <see cref="T:Syncfusion.Chart.ChartLegend"/>.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendsList.Contains(Syncfusion.Chart.ChartLegend)">
            <summary>
            Determines whether collection contains the specified <see cref="T:Syncfusion.Chart.ChartLegend"/>.
            </summary>
            <param name="value">The <see cref="T:Syncfusion.Chart.ChartLegend"/>.</param>
            <returns>
                <c>true</c> if collection contains the specified <see cref="T:Syncfusion.Chart.ChartLegend"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendsList.Remove(Syncfusion.Chart.ChartLegend)">
            <summary>
            Removes the specified <see cref="T:Syncfusion.Chart.ChartLegend"/>.
            </summary>
            <param name="value">The <see cref="T:Syncfusion.Chart.ChartLegend"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendsList.IndexOf(Syncfusion.Chart.ChartLegend)">
            <summary>
            Returns index of specified <see cref="T:Syncfusion.Chart.ChartLegend"/>
            </summary>
            <param name="value">The <see cref="T:Syncfusion.Chart.ChartLegend"/>.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendsList.Insert(System.Int32,Syncfusion.Chart.ChartLegend)">
            <summary>
            Inserts <see cref="T:Syncfusion.Chart.ChartLegend"/> to the collection by the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The <see cref="T:Syncfusion.Chart.ChartLegend"/>.</param>
        </member>
        <member name="P:Syncfusion.Chart.ChartTitle.Font">
            <summary>
            Gets or sets the title font
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartTitle.Name">
            <summary>
            Gets or sets the name to uniquely identify the title
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartTitle.Text">
            <summary>
            Gets or sets the title text
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartTitle.Margin">
            <summary>
            Gets or sets the Margin
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartTitle.ShowBorder">
            <summary>
            Specifies whether title border should be drawn or not
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartTitle.Border">
            <summary>
            Gets or sets the border properties
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartTitle.ForeColor">
            <summary>
            Gets or sets the fore color
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartTitle.BackInterior">
            <summary>
            Gets or sets the back interior
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartTitle.Measure(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.SizeF)">
            <summary>
            Measure the size of the title
            </summary>
            <param name="g">Graphics</param>
            <param name="size">Size</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartTitle.Render(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Render the title
            </summary>
            <param name="g">Graphics</param>
        </member>
        <member name="P:Syncfusion.Chart.ChartTitlesList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Chart.ChartTitle"/> at the specified index.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartTitlesList.Item(System.String)">
            <summary>
            Gets <see cref="T:Syncfusion.Chart.ChartTitle"/> by the name.
            </summary>
            <param name="name">Name of <see cref="T:Syncfusion.Chart.ChartTitle"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartTitlesList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartTitlesList"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartTitlesList.Add(Syncfusion.Chart.ChartTitle)">
            <summary>
            Adds the specified title to collection.
            </summary>
            <param name="value">The title to add.</param>
            <returns>Index of the added title.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartTitlesList.Contains(Syncfusion.Chart.ChartTitle)">
            <summary>
            Determines whether collection contains the specified title.
            </summary>
            <param name="value">The title to check.</param>
            <returns>
               <c>true</c> if collection contains the specified title; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartTitlesList.Remove(Syncfusion.Chart.ChartTitle)">
            <summary>
            Removes the specified title from collection.
            </summary>
            <param name="value">The title to remove.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartTitlesList.IndexOf(Syncfusion.Chart.ChartTitle)">
            <summary>
            Gets index of specified title.
            </summary>
            <param name="value">The title to get index.</param>
            <returns>Index of the <see cref="T:Syncfusion.Chart.ChartTitle"/>.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartTitlesList.Insert(System.Int32,Syncfusion.Chart.ChartTitle)">
            <summary>
            Inserts <see cref="T:Syncfusion.Chart.ChartTitle"/> at specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The <see cref="T:Syncfusion.Chart.ChartTitle"/> to insert.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartTitlesList.Validate(System.Object)">
            <summary>
            Validates the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Returns true if the list contains this element otherwise false.</returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxis">
            <summary>
            The ChartAxis class represents an axis on the plot. An axis can be vertical or horizontal in orientation. There can be several
            axes in a chart. One X axis and one Y axis are treated as the primary X and primary Y axes. These are the ones that are visible by default.
            You can create and add additional axes to the <see cref="!:Syncfusion.Windows.Forms.Chart.ChartArea"/> using its <see cref="!:Syncfusion.Windows.Forms.Chart.ChartArea.Axes"/> collection. Any series
            on the chart can be plotted on any axis that is registered with the chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxis.m_axisLineLocation">
            <summary>
            Represent the axis line rendering location.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxis.m_isHorizontalAxisAutoCross">
            <summary>
            Represent horizontal axis autoCross value.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxis.m_isVerticalAxisAutoCross">
            <summary>
            Represent vertical axis autoCross value.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxis.m_isDateTimeCategoryAxis">
            <summary>
            Represent the DateTime category axis in secondary axis series.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxis.m_changeDateTimeAxisValue">
            <summary>
            Represent the date time value change.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxis.m_isMaxSet">
            <summary>
             Represents whether the Maximum value is assigned for the axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxis.m_isMinSet">
            <summary>
             Represents whether the Minimum value is assigned for the axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxis.m_isMajorSet">
            <summary>
             Represents whether the Major unit value is assigned for the axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxis.m_displayUnits">
            <summary>
            Represents display unit.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.IsVerticalAxisAutoCross">
            <summary>
            Gets and sets the Vertical axis line auto cross value.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.IsHorizontalAxisAutoCross">
            <summary>
            Gets and sets the Horizontal axis line aut cross value.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.TickAndLabelsDimension">
            <summary>
            Gets the tick and labels dimension.
            </summary>
            <value>The tick and labels dimension.</value>        
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.GroupingLabelsRowsDimensions">
            <summary>
            Gets the grouping labels rows dimensions.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.CurrentOrigin">
            <summary>
            Gets the current origin.
            </summary>
            <value>The current origin.</value>        
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.AutoSize">
            <summary>
             Gets or sets a value indicating whether the size of the chart axis should be calculated automatically.
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.Size">
            <summary>
             Gets or sets the size of this axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.Rect">
            <summary>
             Gets or sets the location and size of the rectangular region occupied by the axis.
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.RealLength">
            <summary>
             Gets or sets the length of this axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.Dimension">
            <summary>
            Gets or sets the cardinal dimension of the axis object. If the text that is rendered by the axis is of a dimension that is more, then
            that dimension will be used and this dimension is ignored.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.Location">
            <summary>
            If LocationType is set to ChartAxisLocationType.Set,
            then this property is used to calculate RenderGlobalBounds
            and in such a way to define location of axes.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.AxisLineLocation">
            <summary>
            Gets and sets the chart axis line rendering location.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.Crossing">
            <summary>
            Specifies the double value.This property is used to locate the X and Y axes in
            chart area based on the specified value. specified value must be within the
            range of X and Y axes values.        
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.LocationType">
            <summary>
            Determines how location of axes is calculated. See <see cref="P:Syncfusion.Chart.ChartAxis.Location"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.LabelAlignment">
            <summary>
            Gets or sets label alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.RotateFromTicks">
            <summary>
             Gets or sets a value indicating whether label is rotate from Ticks while using Far.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.Margin">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Chart.ChartAxis"/> Showa some space as margin.
            </summary>
            <value><c>true</c> if margin; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.DrawTickLabelGrid">
            <summary>
            Gets or sets a value indicating whether label grid is visible.
            </summary>
            <value><c>true</c> if label grid is visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.TickLabelGridPadding">
            <summary>
            Gets or sets the tick label grid padding.
            </summary>
            <value>The tick label grid padding.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.BreakRanges">
            <summary>
            Gets the break ranges.
            </summary>
            <value>The break ranges.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.MakeBreaks">
            <summary>
             Indicates whether the breaks should be shown for the specified axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.BreakInfo">
            <summary>
            Gets or sets the break info to customize the axes line.
            </summary>
            <value>The break info.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.SmartDateZoom">
            <summary>
            Gets or sets a value indicating whether to set zoom factor and labels format 
            according to the improved date time zoom logic or to use default zooming behaviour.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.SmartDateZoomLabelsCulture">
            <summary>
            Gets or sets a value indicating whether to set zoom factor 
            and labels format according improved date time zoom logic or
            to use default zooming behaviour.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.SmartDateZoomYearLevelLabelFormat">
            <summary>
            Gets or sets a value indicating whether to set zoom factor 
            and labels format according improved date time zoom logic or
            to use default zooming behaviour. Default is "y".
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.SmartDateZoomMonthLevelLabelFormat">
            <summary>
            Gets or sets a value indicating whether to set zoom factor 
            and labels format according improved date time zoom logic or
            to use default zooming behaviour. Default is "MMMM d, yyyy"
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.SmartDateZoomDayLevelLabelFormat">
            <summary>
            Indicates whether to set zoom factor 
            and labels format according improved date time zoom logic or
            to use default zooming behaviour. Default is "g"
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.SmartDateZoomWeekLevelLabelFormat">
            <summary>
            Gets or sets a value indicating whether to set zoom factor 
            and labels format according improved date time zoom logic or
            to use default zooming behaviour. Default is "MMM, ddd d, yyyy".
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.SmartDateZoomHourLevelLabelFormat">
            <summary>
            Gets or sets a value indicating whether to set zoom factor 
            and labels format according improved date time zoom logic or
            to use default zooming behaviour. Default is "t".
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.SmartDateZoomMinuteLevelLabelFormat">
            <summary>
            Gets or sets a value indicating whether to set zoom factor and labels format according improved date time zoom logic or
            to use default zooming behaviour. Default is "T".
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.SmartDateZoomSecondLevelLabelFormat">
            <summary>
            Gets or sets a value indicating whether to set zoom factor and labels format according improved date time zoom logic or to use default zooming behaviour. Default is "T".
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.CurrentSmartDateTimeFormat">
            <summary>
            Gets the current smart date time format.
            </summary>
            <value>The current smart date time format.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.InterlacedGrid">
            <summary>
            Gets or sets a value indicating whether interlaced grid is enabled.
            </summary>
            <value><c>true</c> if interlaced grid is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.InterlacedGridInterior">
            <summary>
            Gets or sets the interlaced grid interior.
            </summary>
            <value>The interlaced grid interior.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.EdgeLabelsDrawingMode">
            <summary>
            Gets or sets the edge labels drawing mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.CustomOrigin">
            <summary>
            By default the axis will calculate the origin of the axis from data contained in the series. Using the <see cref="P:Syncfusion.Chart.ChartAxis.OriginDate"/>
            and <see cref="P:Syncfusion.Chart.ChartAxis.Origin"/> properties, you can change this origin. To do so, first set this property to true. Default is false.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.Origin">
            <summary>
            Gets or sets custom origin for charts containing datas of double value type. By default, the axis will calculate the origin of the axis from data contained in the series. Using the <see cref="P:Syncfusion.Chart.ChartAxis.OriginDate"/>
            and <see cref="P:Syncfusion.Chart.ChartAxis.Origin"/> properties, you can change this origin. To enable the origin set with Origin or OriginDate, you have to
            set <see cref="P:Syncfusion.Chart.ChartAxis.CustomOrigin"/> to True.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.OriginDate">
            <summary>
            Gets or sets custom origin for charts containing datas of DateTime value type. By default the axis will calculate the origin of the axis from data contained in the series. Using the <see cref="P:Syncfusion.Chart.ChartAxis.OriginDate"/>
            and <see cref="P:Syncfusion.Chart.ChartAxis.Origin"/> properties, you can change this origin. To enable the origin set with Origin or OriginDate, you have to
            set <see cref="P:Syncfusion.Chart.ChartAxis.CustomOrigin"/> to True.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.IsDateTimeCategoryAxis">
            <summary>
            Represent the indicating the category axis label is dateTime or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.ChangeDateTimeAxisValue">
            <summary>
            Represent the indicating the category axis label is dateTime or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.DateTimeFormat">
            <summary>
            This format will be used to format axis labels of type DateTime for display. Default is "g".
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.DateTimeOffset">
            <summary>
            Gets or sets an offset for axis intervals that contain DateTime datas. Depending on the data in the series provided to the Chart, the Chart will calculate and display a range of data on
            the ChartAxis. This will result in major grid lines being rendered along calculated intervals. However, sometimes
            you may wish to offset the calculated grid lines (major) by a certain factor. This is especially useful for DateTime values.
            For example, the default calculation always starts the intervals at Sunday (if the IntervalType is set to weeks). If you wish
            to start the intervals with Monday, you can simply specify a DateTimeOffset of one day. If your axis is not of type DateTime
            and you wish to take advantage of this property, please refer <see cref="P:Syncfusion.Chart.ChartAxis.Offset"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.DateTimeRange">
            <summary>
                Specify the start and end dates and interval time for the axis. Use this if the data points are of datetime type.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.DateTimeInterval">
            <summary>
                Gets or sets the date time range of this axis as DateTime values.
                Note: it works only if ValueType is DateTime.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.DesiredIntervals">
            <summary>
            Gets or sets the desired number of intervals for the range. Essential Chart includes a sophisticated automatic nice range calculation engine. The goal of this engine is to take
            raw data and convert it into human readable numbers. For example, if your raw numbers are 1.2 - 3.87, nice numbers could
            be 0-5 with 10 intervals of 0.5 each. The ChartAxis can do the same calculation for dates also. It offers precise control over
            how data types are to be interpreted when performing this calculation. With the DesiredIntervals setting, you can request the
            engine to calculate nice numbers such that they result in the number of intervals desired. Due to the nature of the calculation,
            the ChartAxis cannot provide precisely the same number of intervals but it will try to match the value to the extent possible.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.RangePaddingType">
            <summary>
            Gets or sets the padding that will be applied when calculating the axis range.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.ForceZero">
            <summary>
            Indicates whether one boundary of the calculated range should always be tweaked to zero.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.ForceZeroToDouble">
            <summary>
            Indicates whether one boundary of the calculated range should always be tweaked to zero to both positive and negative value.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.PreferZero">
            <summary>
            Indicates that you would like one boundary of the calculated range to be tweaked to zero.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.IsMax">
            <summary>
            Represents whether the maximum value is applied to category axis or not
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.DrawGrid">
            <summary>
            Gets or sets a value indicating whether the grid lines associated with the main interval points on the axis are to be rendered. This is
            set to True by default.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.LogLabelsDisplayMode">
            <summary>
            Gets or sets whether labels should be an integer power of log base or not. Applicable only for logarithmic axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.DrawMinorGrid">
            <summary>
            Gets or sets a value indicating whether the minor grid lines associated with the main interval points on the axis are to be rendered. This is
            set to True by default.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.GridDrawMode">
            <summary>
            Gets or sets the grid drawing mode.
            </summary>
            <value>The grid draw mode.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.LabelPlacement">
            <summary>
            Gets or sets the label placement on axis. Labels can be placed between ticks only for categorical axis
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.GridLineType">
            <summary>
            Gets the attributes of the axis grid lines. Please refer to <see cref="T:Syncfusion.Chart.LineInfo"/> for more information on these attributes and
            how they can change the appearance of the grid lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.MinorGridLineType">
            <summary>
            Gets the attributes of the axis grid lines. Please refer to <see cref="T:Syncfusion.Chart.LineInfo"/> for more information on these attributes and
            how they can change the appearance of the grid lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.TickDrawingOperationMode">
            <summary>
            Gets or sets the tick drawing operation mode.
            </summary>
            <value>The tick drawing operation mode.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.Font">
            <summary>
            Gets or sets the font that is to be used for text that is rendered in association with the axis (such as axis labels).
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.TitleFont">
            <summary>
            Gets or sets the title font that is to be used for text that is rendered in association with the axis (such as axis title).
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.ForeColor">
            <summary>
            Gets or sets the color that is to be used for text that is rendered in association with the axis (such as axis labels).
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.BackInterior">
            <summary>
            Gets or sets the brush info that is to be used for text background that is rendered in association with the axis (such as axis labels).
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.ChartAxisTitle">
            <summary>
            Gets or sets the Chart axis title.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.TitleColor">
            <summary>
            Gets or sets the title color that is to be used for text that is rendered in association with the axis (such as axis title).
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.TitleDrawMode">
            <summary>
            Gets or sets the title draw mode.
            </summary>
            <value>The title draw mode.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.Pens">
            <summary>
            Gets or sets a collection of pens by using which internal line of Polar and Radar chart is drawned.        
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.Format">
            <summary>
            Gets or sets the format for axis labels. If the value type of the axis is double, this format will be used to format axis labels for display.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.IntervalType">
            <summary>
            Gets or sets a value indicating whether the interval that gets calculated by the nice range calculation engine 
            should be in Years, Months, Weeks, Days, Hours, Minutes, 
            Seconds or MilliSeconds. This setting is used only if the ValueType of the axis is set to DateTime. Default value 
            is Auto.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.Inversed">
            <summary>
            Gets or sets a value indicating whether the axis should be reversed. When reversed, the axis will render points from right to left if horizontal and
            top to bottom when vertical.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.LabelIntersectAction">
            <summary>
            Gets or sets the label intersect action. Labels can intersect on the axis if they are too close to each other. ChartAxis offers several options to enhance the display
            of the axis when such intersection occurs. Please see <see cref="T:Syncfusion.Chart.ChartLabelIntersectAction"/> for more information.
            </summary>
            <remarks>
            LabelIntersectAction is applicable for horizontally orientated axes only.
            </remarks>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.HidePartialLabels">
            <summary>
            Indicates whether partially visible axis labels should be hidden.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.LabelRotate">
            <summary>
             Gets or sets a value indicating whether labels can be rotated.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.LabelRotateAngle">
            <summary>
            Gets or sets the angle at which labels are to be rotated.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.Labels">
            <summary>
            Gets the collection of labels associated with this axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.LabelsImpl">
            <summary>
               Use this property to assign a custom implementation of <see cref="T:Syncfusion.Chart.IChartAxisLabelModel"/>. If you are working with the
               default label collection, use <see cref="P:Syncfusion.Chart.ChartAxis.Labels"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.GroupingLabels">
            <summary>
            Collection of grouping labels associated with this axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.GroupingLabelsImpl">
            <summary>
               Use this property to assign a custom implementation of <see cref="T:Syncfusion.Chart.IChartAxisLabelModel"/>. If you are working with the
               default label collection, use <see cref="P:Syncfusion.Chart.ChartAxis.Labels"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.LineType">
            <summary>
            Returns attributes of the primary axis line. Please refer to <see cref="T:Syncfusion.Chart.LineInfo"/> for more information on these attributes and
            how they can change the appearance of the axis line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.LogBase">
            <summary>
            Gets or sets the log base that is to be used when value is logarithimic. Default is base 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.Offset">
            <summary>
            Gets or sets the Offset. It specifies the offset that should be applied to the automatically calculated range's start value.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.PointOffset">
            <summary>
            Gets or sets the PointOffset. It specifies the points offset that should be applied to the automatically calculated range's start value.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.OpposedPosition">
            <summary>
            If this axis is a secondary axis, setting this property to True will cause
            it to move to the opposite side of the primary axis. This property is False
            by default.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.AxisLabelPlacement">
            <summary>
            Gets or sets a value indicates whether label is located inside or outside of chart area.
            </summary>
            <value>The legends placement.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.Orientation">
            <summary>
            Gets or sets the Orientation of the axis. You cannot change the orientation of primary axes. Primary axes are the ones that are
            created and available by default in the Axes collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.Range">
            <summary>
            Gets or sets the range for an axis. By default, the chart will automatically calculate the range that is to be displayed. The range property allows you
            to change this range to be any range of your choice. Set ChartAxis.RangeType to Set for this to take effect.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.IsMaxSet">
            <summary>
             Represents whether the Maximum value is assigned for the axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.IsMinSet">
            <summary>
             Represents whether the Minimum value is assigned for the axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.IsMajorSet">
            <summary>
             Represents whether the Major unit value is assigned for the axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.RangeType">
            <summary>
             Gets or sets the range type. <see cref="T:Syncfusion.Chart.ChartAxisRangeType"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.RoundingPlaces">
            <summary>
            Gets or sets the number of places that is to be used for rounding when numbers are used for display (default is 2).
            If this property less zero, rounding is disable.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.SmallTickSize">
            <summary>
            Gets or sets the size of small ticks to be displayed on the axis. By default, small ticks are not displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.SmallTicksPerInterval">
            <summary>
            Gets or sets the number of small ticks to be displayed per major interval. Default is 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.StripLines">
            <summary>
            Gets the collection of strip lines. Please refer to <see cref="T:Syncfusion.Chart.ChartStripLine"/> for more information.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.TickColor">
            <summary>
            Gets or sets the color of ticks that are rendered on the axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.TickSize">
            <summary>
            Gets or sets the size of ticks that are rendered on the axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.Title">
            <summary>
            Gets or sets the title of this axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.TitleSpacing">
            <summary>
            Gets or sets the spacing between title and labels.
            </summary>
            <value>The spacing.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.TitleAlignment">
            <summary>
            Gets or sets the alignment of the axis title.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.ToolTip">
            <summary>
            Gets or sets the ToolTip of the axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.ValueType">
            <summary>
            Gets or sets the type of value that this axis is displaying. For the types supported, refer to <see cref="T:Syncfusion.Chart.ChartValueType"/>.
            </summary>
            <remarks>
            If the <b>ChartValueType.Custom</b> type is set, labels gets from the <see cref="P:Syncfusion.Chart.ChartAxis.LabelsImpl"/> by index or position of label.
            Elsewhere labels is generated by value of label. 
            <p/>
            The <b>ChartValueType.Custom</b> can't guarantee correct position of labels. 
            You can use the other ways to implements the custom labels, such as to use the <see cref="E:Syncfusion.Chart.ChartAxis.FormatLabel"/> event.
            </remarks>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.TickLabelsDrawingMode">
            <summary>
            Gets or sets the mode of drawing of tick labels.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.VisibleRange">
            <summary>
            Gets the visible range when zoomed.
            </summary>
            <remarks>
            Don't try to change this property manually. The value will be changed if any of related properties is changed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.CustomLabelsParameter">
            <summary>
            Gets or sets the the parameter types of <see cref="M:Syncfusion.Chart.IChartAxisLabelModel.GetLabelAt(System.Int32)"/> method.
            </summary>
            <value>The parameter type.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value>
            	<c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.ExcludeInvisibleSeriesRange">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.LabelsOffset">
            <summary>
            Gets or sets LebelsOffset. It specifies the offset that should be applied to the automatically calculated labels.
            </summary>
            <value>The labels offset.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.LabelStringFormat">
            <summary>
            Get or Sets the string format of label.Default value is StringFormat.GenericDefault.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.DisplayUnits">
            <summary>
            Represents display unit.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartAxis.AppearanceChanged">
            <summary>
            Occurs when appearance was changed.
            </summary>
            <internalonly/>
        </member>
        <member name="E:Syncfusion.Chart.ChartAxis.DimensionsChanged">
            <summary>
            Occurs then dimensions was changed.
            </summary>
            <internalonly/>
        </member>
        <member name="E:Syncfusion.Chart.ChartAxis.IntervalsChanged">
            <summary>
            Occurs then intervals was changed.
            </summary>
            <internalonly/>
        </member>
        <member name="E:Syncfusion.Chart.ChartAxis.VisibleRangeChanged">
            <summary>
            Occurs when visible range was changed.
            </summary>
            <internalonly/>
        </member>
        <member name="E:Syncfusion.Chart.ChartAxis.FormatLabel">
            <summary>
            Event for dynamic formatting of axis labels.
            </summary>
            <example>
            xAxis.FormatLabel += new ChartFormatAxisLabelEventHandler(XAxis_FormatLabel);<p/>
            <b>...</b><p/>
            void XAxis_FormatLabel(object sender, ChartFormatAxisLabelEventArgs args)<p/>
            {<p/>
               args.Label = "Category" + args.Value;<p/>
               args.Handled = true;<p/>
            }
            </example>
            <seealso cref="T:Syncfusion.Chart.ChartFormatAxisLabelEventHandler"/>
            <seealso cref="T:Syncfusion.Chart.ChartFormatAxisLabelEventArgs"/>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartAxis"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.#ctor(Syncfusion.Chart.ChartOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartAxis"/> class.
            </summary>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.GetCategoryAtIndex(System.Int32)">
            <summary>
            Used to get the specific index of category value.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.GetDimension(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartArea)">
            <summary>
            Gets the dimension.
            </summary>
            <param name="g">The graphics content.</param>
            <param name="chartarea">The chart area.</param>
            <returns>Dimension.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.CheckFormatLabel">
            <summary>
            Checks whether FormatLabel event of axis is used or not.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.GetDimension(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartArea,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the dimension.
            </summary>
            <param name="g">The g.</param>
            <param name="chartarea">The chartarea.</param>
            <param name="renderBounds">The render bounds.</param>
            <returns></returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.DrawAxis(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartArea)">
            <summary>
            Draws the axis.
            </summary>
            <param name="g">The g.</param>
            <param name="chartarea">The chartarea.</param>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.DrawAxis(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartArea,Syncfusion.Drawing.RectangleF)">
            <summary>
            Draws the axis.
            </summary>
            <param name="g">The g.</param>
            <param name="chartarea">The chartarea.</param>
            <param name="labelBounds">Bounds for axis labels</param>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.DrawAxis(Syncfusion.Chart.Graphics3D,Syncfusion.Chart.ChartArea,System.Single)">
            <summary>
            Draws the axis.
            </summary>
            <param name="g">The g.</param>
            <param name="chartarea">The chartarea.</param>
            <param name="z">The z.</param>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.SetRange(Syncfusion.Chart.MinMaxInfo)">
            <summary>
            The ChartAxis by default creates a display range based on data. If you do not wish to use this
            range you can set this range yourself using this method. When you set a custom range you have to
            set <see cref="P:Syncfusion.Chart.ChartAxis.RangeType"/> to <see cref="F:Syncfusion.Chart.ChartAxisRangeType.Set"/>.
            </summary>
            <param name="value" type="Syncfusion.Windows.Forms.Chart.MinMaxInfo">
                <para>
                Range information with minimum and maximum values to be used.    
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.SetNiceRange(Syncfusion.Chart.DoubleRange,Syncfusion.Chart.ChartAxisRangePaddingType,Syncfusion.Chart.ChartArea)">
            <summary>
            Sets the nice range.
            </summary>
            <param name="baseRange">The base range.</param>
            <param name="pattingType">Type of the patting.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.SetNiceRange(Syncfusion.Chart.DoubleRange,Syncfusion.Chart.ChartAxisRangePaddingType,Syncfusion.Chart.ChartArea,Syncfusion.Chart.ChartAxis)">
            <summary>
            Sets the nice range.
            </summary>
            <param name="baseRange">The base range.</param>
            <param name="pattingType">Type of the patting.</param>
            <param name="axis">Represents the chart axis.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.Update">
            <summary>
            Marks the axis and related rendering information as out of date.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.Freeze">
            <summary>
            Disables events raising (<see cref="E:Syncfusion.Chart.ChartAxis.AppearanceChanged"/>, <see cref="E:Syncfusion.Chart.ChartAxis.DimensionsChanged"/>, 
            <see cref="E:Syncfusion.Chart.ChartAxis.IntervalsChanged"/>, <see cref="E:Syncfusion.Chart.ChartAxis.VisibleRangeChanged"/>).
            </summary>
            <seealso cref="M:Syncfusion.Chart.ChartAxis.Melt"/>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.Melt">
            <summary>
            Enables events raising (<see cref="E:Syncfusion.Chart.ChartAxis.AppearanceChanged"/>, <see cref="E:Syncfusion.Chart.ChartAxis.DimensionsChanged"/>, 
            <see cref="E:Syncfusion.Chart.ChartAxis.IntervalsChanged"/>, <see cref="E:Syncfusion.Chart.ChartAxis.VisibleRangeChanged"/>).
            </summary>
            <seealso cref="M:Syncfusion.Chart.ChartAxis.Freeze"/>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.GetVisibleValue(System.Double)">
            <summary>
            Gets the visible value on the chart by specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.GetRealValue(Syncfusion.Drawing.PointF)">
            <summary>
            Calculates real value for given point.
            </summary>
            <param name="p">The point to calculate real value.</param>
            <returns>Real value.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.GetRealValue(System.Single)">
            <summary>
            Gets the real value in pixels.
            </summary>
            <param name="value">The value.</param>
            <returns>Calculated value.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.GetCoordinateFromValue(System.Double)">
            <summary>
            Gets the coordinate from value.
            </summary>
            <param name="value">The value to get coordinate.</param>
            <returns>Coordinate that represent value.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.AddBreak(System.Double,System.Double)">
            <summary>
            Add breaks at the specified range.
            </summary>
            <param name="from">Value from.</param>
            <param name="to">Value to.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.ClearBreaks">
            <summary>
             Clears all the breaks.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.CalculateAxisLocation(Syncfusion.Drawing.RectangleF)">
            <summary>
            Calculates the axis location.
            </summary>
            <param name="rect">The <see cref="T:Syncfusion.Drawing.RectangleF"/> to place axis.</param>        
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.CalculateAxis(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SizeF,System.Single)">
            <summary>
            Calculates the axis layout.
            </summary>
            <param name="rect">The <see cref="T:Syncfusion.Drawing.RectangleF"/> to place axis.</param>
            <param name="spacing">The spacing.</param>
            <param name="dimension">The dimension.</param>
            <returns><see cref="T:Syncfusion.Drawing.RectangleF"/> where axis is placed.</returns>        
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.ValueToCoefficient(System.Double)">
            <summary>
            Values to coefficient.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.CoefficientToValue(System.Double)">
            <summary>
            Coeficients to value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.GetOffsetLabel(System.Single)">
            <summary>
            Gets the offset label.
            </summary>
            <param name="sz">The sz.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.SetDefaultOrientation(Syncfusion.Chart.ChartOrientation)">
            <summary>
            Sets the default orientation.
            </summary>
            <param name="value">The value to set orientation.</param>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxis.m_axisLabelConverter">
            <summary>
            Axis Label Converter used in chart to image conversion
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxis.AxisLabelConverter">
            <summary>
            Get/Set the Axis label converter property
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.TryAndSetRoundingPlaces(Syncfusion.Chart.MinMaxInfo)">
            <summary>
            Try and set rounding places by comparing min and maximum
            </summary>
            <param name="vRange">input vRange</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.DisposeChartAxis">
            <summary>
            Dispose ChartAxisObject for MVCChartModel
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxis.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartBreakLineType">
            <summary>
            Specifies types of break line.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBreakLineType.Straight">
            <summary>
            The straight line.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBreakLineType.Wave">
            <summary>
            The wave line.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBreakLineType.Randomize">
            <summary>
            The randomize line.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartBreaksMode">
            <summary>
            Specifies modes of breaks.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBreaksMode.None">
            <summary>
            Breaks isn't used.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBreaksMode.Auto">
            <summary>
            Chart automatically calculate the breaks.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBreaksMode.Manual">
            <summary>
            Breaks is set manually.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisBreakInfo">
            <summary>
            Contains the appearance properties of break lines.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisBreakInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartAxisBreakInfo"/> class.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartAxisBreakInfo.Changed">
            <summary>
            An event that is triggered when appearance is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisBreakInfo.LineType">
            <summary>
            Gets or sets the type of the line.
            </summary>
            <value>The type of the line.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisBreakInfo.LineColor">
            <summary>
            Gets or sets the color of the line.
            </summary>
            <value>The color of the line.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisBreakInfo.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
            <value>The line style.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisBreakInfo.LineWidth">
            <summary>
            Gets or sets the width of the line.
            </summary>
            <value>The width of the line.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisBreakInfo.LineSpacing">
            <summary>
            Gets or sets the line spacing.
            </summary>
            <value>The line spacing .</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisBreakInfo.SpacingColor">
            <summary>
            Gets or sets the color of the spacing.
            </summary>
            <value>The color of the spacing.</value>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisSegment">
            <summary>
            Specifies the single range segment of axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisSegment.Range">
            <summary>
            Gets or sets the range.
            </summary>
            <value>The range.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisSegment.Interval">
            <summary>
            Gets or sets the interval.
            </summary>
            <value>The interval.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisSegment.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisRange">
            <summary>
            
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartAxisRange.Changed">
            <summary>
            An event that is triggered when appearance is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisRange.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisRange.BreaksMode">
            <summary>
            Gets or sets the break mode to calculate range between the axes.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisRange.BreakAmount">
            <summary>
            Specifies the minimal ratio of differences between Y values. 
            If this value is 0.25, that means the axis will be broken if more a quarter of the chart space is empty. 
            </summary>
            <remarks>
            The value range is form 0.0 to 1.0.
            </remarks>
            <value>The break amount.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisRange.Compute(Syncfusion.Chart.ChartSeriesCollection)">
            <summary>
            Computes the breaks by specified series.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisRange.Union(Syncfusion.Chart.DoubleRange)">
            <summary>
            Unions the specified range.
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisRange.Exclude(Syncfusion.Chart.DoubleRange)">
            <summary>
            Excludes the specified range.
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisRange.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisRange.IsVisible(System.Double)">
            <summary>
            Determines whether the specified value is visible.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisRange.ValueToCoeficient(System.Double)">
            <summary>
            Values to coefficient.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisRange.ValueToCoefficient(System.Double)">
            <summary>
            Values to coefficient.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisRange.CoefficientToValue(System.Double)">
            <summary>
            Coefficients to value.
            </summary>
            <param name="coeficient">The coefficient.</param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Chart.LogLabelsDisplayMode.Default">
            <summary>
            Displays the default values.
            </summary>       
        </member>
        <member name="F:Syncfusion.Chart.LogLabelsDisplayMode.IntegerLogValues">
            <summary>
            Displays labels with integer power of log base.
            </summary>        
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisRangePaddingType">
            <summary>
            Specifies the padding that will be applied when calculating the axis range.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisRangePaddingType.None">
            <summary>
            No padding will be applied to the Axis range.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisRangePaddingType.Calculate">
            <summary>
            Padding will be calculated when the axis range is computed.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisLocationType">
            <summary>
            Specifies the location type of the axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisLocationType.Auto">
            <summary>
            Axis will be placed automatically by control to prevent overlapping with labels.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisLocationType.AntiLabelCut">
            <summary>
            Axis thickness will be calculated and axis will placed automatically by control to prevent 
            labels cutting by sides of control. During this process one coordinate of axis location 
            is preserved (x coordinate for horizontal axis and y for vertical axis).
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisLocationType.Set">
            <summary>
            The user will have ability to set axis location manually.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisEdgeLabelsDrawingMode">
            <summary>
            Specifies the drawing mode of the labels.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisEdgeLabelsDrawingMode.Center">
            <summary>
            Labels at the sides of the axis will be positioned at the center of tick label.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisEdgeLabelsDrawingMode.Shift">
            <summary>
            Labels will be aligned with current axis edges.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisEdgeLabelsDrawingMode.ClippingProtection">
            <summary>
            Labels will be positioned in way to prevent clipping.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisTickDrawingOperationMode">
            <summary>
            Specifies the drawing mode of the tick lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisTickDrawingOperationMode.IntervalFixed">
            <summary>
            In this mode, the interval always remains unchanged during zooming.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisTickDrawingOperationMode.NumberOfIntervalsFixed">
            <summary>
            In this mode, only number of intervals matters, and it is kept constant 
            during zooming. Also there is always full number of intervals on axis.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisGridDrawingMode">
            <summary>
            Specifies the drawing mode of the grid lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGridDrawingMode.Default">
            <summary>
            Grid lines are drawed with equal interval.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGridDrawingMode.GroupingLabelsPositions">
            <summary>
            Grid lines are drawed at grouping labels margins.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisLabelPlacement">
            <summary>
            Specifies the label placement of the axis lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisLabelPlacement.OnTicks">
            <summary>
            Labels are placeed on ticks of axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisLabelPlacement.BetweenTicks">
            <summary>
            Labels are placeed between ticks of axis..
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartCustomLabelsParameter">
            <summary>
            Specifies the parameter types of <see cref="M:Syncfusion.Chart.IChartAxisLabelModel.GetLabelAt(System.Int32)"/> method.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartCustomLabelsParameter.Index">
            <summary>
            The parameter of <see cref="M:Syncfusion.Chart.IChartAxisLabelModel.GetLabelAt(System.Int32)"/> method is index of labels.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartCustomLabelsParameter.Position">
            <summary>
            The parameter of <see cref="M:Syncfusion.Chart.IChartAxisLabelModel.GetLabelAt(System.Int32)"/> method is position of labels.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisLabel">
            <summary>
            The ChartAxisLabel class holds information about label text, label color, label font and other related information.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLabel.CustomText">
            <summary>
            Gets or sets the custom text that is to be used as the label.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLabel.ToolTip">
            <summary>
            Gets or sets the tooltip for the axis label.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLabel.DateTimeFormat">
            <summary>
            Gets or sets the date format that is to be used for formatting the value into the label text.
            See "Date and Time format strings" section in MSDN for more info.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLabel.Format">
            <summary>
            Gets or sets the format that is to be used for formatting the double values into the label text.
            See "Numeric Format Strings" section in MSDN for more on the supported formats.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLabel.AxisLabelPlacement">
            <summary>
            Gets or sets a value indicates whether label is located inside or outside of chart area.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLabel.LogBase">
            <summary>
            Gets or sets the log base that is to be used by the label. Default is 2.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLabel.DoubleValue">
            <summary>
            Gets or sets the value that the label represents.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLabel.RoundingPlaces">
            <summary>
            Number of relevant rounding places that is to be used for the label. Default is 2.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLabel.Text">
            <summary>
            Gets the formatted text that is to be displayed as the label.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLabel.Font">
            <summary>
            Gets or sets the font that is to be used for the label text.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLabel.Color">
            <summary>
            Gets or sets the color that is to be used for the label text.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLabel.ValueType">
            <summary>
            Gets or sets the value type that is to be associated with the axis label. Default is Double.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor">
            <summary>
            Overloaded Constructor. Each label along a ChartAxis is held in a ChartAxisLabel.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.String)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="customText">The text that will be displayed as the label for the axis point.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.String,System.String)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="customText">The text that will be displayed as the label for the axis point.</param>
            <param name="toolTip">The text that will be displayed as the tooltip for the axis labels.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.String,System.Double)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="customText">The text that will be displayed as the label for the axis point.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.String,System.Double,System.String)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="customText">The text that will be displayed as the label for the axis point.</param>
            <param name="value">The value.</param>
            <param name="toolTip">The text that will be displayed as the tooltip for the axis labels.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.String,Syncfusion.Drawing.Color,Syncfusion.Drawing.Font)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="customText">The text that will be displayed as the label for the axis point.</param>
            <param name="color">The color that is to be used for the label text.</param>
            <param name="font">The font that is to be used for the label text.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.String,Syncfusion.Drawing.Color,Syncfusion.Drawing.Font,System.String)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="customText">The text that will be displayed as the label for the axis point.</param>
            <param name="color">The color that is to be used for the label text.</param>
            <param name="font">The font that is to be used for the label text.</param>
            <param name="toolTip">The text that will be displayed as the tooltip for the axis labels.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.String,Syncfusion.Drawing.Color,Syncfusion.Drawing.Font,System.Double)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="customText">The text that will be displayed as the label for the axis point.</param>
            <param name="color">The color that is to be used for the label text.</param>
            <param name="font">The font that is to be used for the label text.</param>
            <param name="dvalue">The value represented by the label.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.String,Syncfusion.Drawing.Color,Syncfusion.Drawing.Font,System.Double,System.String)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="customText">The text that will be displayed as the label for the axis point.</param>
            <param name="color">The color that is to be used for the label text.</param>
            <param name="font">The font that is to be used for the label text.</param>
            <param name="dvalue">The value represented by the label.</param>
            <param name="toolTip">The text that will be displayed as the tooltip for the axis labels.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.Double,System.String)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="dvalue">The value represented by the label.</param>
            <param name="format">The format that is to be used for formatting the display label.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.Double,System.String,System.String)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="dvalue">The value represented by the label.</param>
            <param name="format">The format that is to be used for formatting the display label.</param>
            <param name="toolTip">The text that will be displayed as the tooltip for the axis labels.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.DateTime,System.String)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="dt">The Date Time value represented by the label.</param>
            <param name="dateTimeFormat">The format that is to be used for formatting the display label.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.DateTime,System.String,System.String)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="dt">The Date Time value represented by the label.</param>
            <param name="toolTip">The text that will be displayed as the tooltip for the axis labels.</param>
            <param name="dateTimeFormat">The format that is to be used for formatting the display label.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.String,Syncfusion.Drawing.Color,Syncfusion.Drawing.Font,System.Double,System.String,Syncfusion.Chart.ChartValueType)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="customText">The text that will be displayed as the label for the axis point.</param>
            <param name="color">The color that is to be used for the label text.</param>
            <param name="font">The font that is to be used for the label text.</param>
            <param name="dvalue">The value represented by the label.</param>
            <param name="format">The format that is to be used for formatting the display label.</param>
            <param name="valueType">The value type of the axis label.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.String,System.String,Syncfusion.Drawing.Color,Syncfusion.Drawing.Font,System.Double,System.String,Syncfusion.Chart.ChartValueType)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="customText">The text that will be displayed as the label for the axis point.</param>
            <param name="toolTip">The text that will be displayed as the tooltip for the axis labels.</param>
            <param name="color">The color that is to be used for the label text.</param>
            <param name="font">The font that is to be used for the label text.</param>
            <param name="dvalue">The value represented by the label.</param>
            <param name="format">The format that is to be used for formatting the display label.</param>
            <param name="valueType">The value type of the axis label.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.String,Syncfusion.Drawing.Color,Syncfusion.Drawing.Font,System.Double,System.String,System.String,Syncfusion.Chart.ChartValueType)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="customText">The text that will be displayed as the label for the axis point.</param>
            <param name="color">The color that is to be used for the label text.</param>
            <param name="font">The font that is to be used for the label text.</param>
            <param name="dvalue">The value represented by the label.</param>
            <param name="format">The format that is to be used for formatting the display label.</param>
            <param name="dateTimeFormat">The date time format that is to be used for formatting the value.</param>
            <param name="valueType">The value type of the axis label.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.String,System.String,Syncfusion.Drawing.Color,Syncfusion.Drawing.Font,System.Double,System.String,System.String,Syncfusion.Chart.ChartValueType)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="customText">The text that will be displayed as the label for the axis point.</param>
            <param name="toolTip">The text that will be displayed as tooltip for the label.</param>
            <param name="color">The color that is to be used for the label text.</param>
            <param name="font">The font that is to be used for the label text.</param>
            <param name="dvalue">The value represented by the label.</param>
            <param name="format">The format that is to be used for formatting the display label.</param>
            <param name="dateTimeFormat">The date time format that is to be used for formatting the value.</param>
            <param name="valueType">The value type of the axis label.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.String,Syncfusion.Drawing.Color,Syncfusion.Drawing.Font,System.DateTime,System.String,System.String,Syncfusion.Chart.ChartValueType)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="customText">The text that will be displayed as the label for the axis point.</param>
            <param name="color">The color that is to be used for the label text.</param>
            <param name="font">The font that is to be used for the label text.</param>
            <param name="dateTime">The DateTime value represented by the label.</param>
            <param name="format">The format that is to be used for formatting the display label.</param>
            <param name="dateTimeFormat">The date time format that is to be used for formatting the value.</param>
            <param name="valueType">The value type of the axis label.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.String,System.String,Syncfusion.Drawing.Color,Syncfusion.Drawing.Font,System.DateTime,System.String,System.String,Syncfusion.Chart.ChartValueType)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="customText">The text that will be displayed as the label for the axis point.</param>
            <param name="toolTip">The text that will be displayed as tooltip for the label.</param>
            <param name="color">The color that is to be used for the label text.</param>
            <param name="font">The font that is to be used for the label text.</param>
            <param name="dateTime">The DateTime value represented by the label.</param>
            <param name="format">The format that is to be used for formatting the display label.</param>
            <param name="dateTimeFormat">The date time format that is to be used for formatting the value.</param>
            <param name="valueType">The value type of the axis label.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.Double,System.String,Syncfusion.Chart.ChartValueType)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="dvalue">The value represented by the label.</param>
            <param name="format">The format that is to be used for formatting the display label.</param>
            <param name="valueType">The value type of the axis label.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.#ctor(System.Double,System.String,System.String,Syncfusion.Chart.ChartValueType)">
            <summary>
            Constructor. Each label along a ChartAxis is held in the ChartAxisLabel.
            </summary>
            <param name="dvalue">The value represented by the label.</param>
            <param name="format">The format that is to be used for formatting the display label.</param>
            <param name="toolTip">The text that will be displayed as tooltip for the label.</param>
            <param name="valueType">The value type of the axis label.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.InitializeStaticVariables">
            <summary>
            Method to initialize disposed static objects
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.Measure(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.SizeF,Syncfusion.Chart.ChartAxis)">
            <summary>
            Measure the label with the text.
            </summary>
            <param name="g">Graphics of the label</param>
            <param name="size">Size of the label</param>
            <param name="axis">Axis of the label</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabel.Dispose">
            <summary>
            Method to dispose labels.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabelByDoubleValueComparer.#ctor(System.Boolean)">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisGroupingLabel">
            <summary>
            The ChartAxisGroupingLabel class holds information about Grouping Label text, Grouping Label color, Grouping Label font and other related information.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.Range">
            <summary>
            Gets or sets the double range that this Grouping Label with cover. If the range in the axis is DateTime, use DateTime.ToOADate to get the double value.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.Text">
            <summary>
            Gets or sets the custom text that is to be used as the Grouping Label.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.RegionDescription">
            <summary>
            Gets or sets the the region description text for this region.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.Lines">
            <summary>
            Lets you specify the grouping label text in multiple lines
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.Format">
            <summary>
            Gets or sets <see cref="!:System.Drawing.StringFormat"/> to render label. Default is GenericDefault.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.Font">
            <summary>
            Gets or sets the font that is to be used for the label text.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.Color">
            <summary>
            Gets or sets the color that is to be used for the Grouping Label text.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.BackColor">
            <summary>
            Gets or sets back color. Default is Transparent.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.BorderPen">
            <summary>
            Gets or sets the color that is to be used for the Grouping Label border/brace etc. Default is Black.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.BorderStyle">
            <summary>
            Gets or sets the Style of border drawing that is to be used for the Grouping Label. Default is Rectangle
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.BorderPadding">
            <summary>
            Gets or sets the Padding of border drawing that is to be used for the Grouping Label. Default is 2.0f.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.MaxTextWidth">
            <summary>
            Gets or sets max text width. Default is 200.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.MaxTextHeightToWidthRatio">
            <summary>
            Gets or sets max text height to width ratio. Default is 2.5
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.RotateAngle">
            <summary>
            Gets or sets labels rotate angle. Default is 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.Row">
            <summary>
            Gets or sets row in which to render this grouping label. specify 0 for the 1st row and so on. Default is 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.LabelTextFitMode">
            <summary>
            Gets or sets label fit mode. Default is Shrink.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.LabelTextAlignment">
            <summary>
            Gets or sets label alignment. Default is Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.Rect">
             <summary>
            Gets the rectangle in which to draw the label.
             </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabel.Tag">
            <summary>
            Gets or sets tag
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisGroupingLabel.#ctor(Syncfusion.Chart.DoubleRange)">
            <summary>
            Overloaded Constructor. Each Grouping Label along a ChartAxis is held in a ChartAxisGroupingLabel.
            </summary>
            <param name="range">The range to group labels.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisGroupingLabel.#ctor(Syncfusion.Chart.DoubleRange,System.String)">
            <summary>
            Constructor. Each Grouping Label along a ChartAxis is held in the ChartAxisGroupingLabel.
            </summary>
            <param name="range">The range to group labels.</param>
            <param name="text">The text that will be displayed as the Grouping Label for the axis point.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisGroupingLabel.#ctor(Syncfusion.Chart.DoubleRange,System.String,Syncfusion.Drawing.Color,Syncfusion.Drawing.Font)">
            <summary>
            Constructor. Each Grouping Label along a ChartAxis is held in the ChartAxisGroupingLabel.
            </summary>
            <param name="range">The range to group labels.</param>
            <param name="text">The text that will be displayed as the Grouping Label for the axis point.</param>
            <param name="color">The color that is to be used for the Grouping Label text.</param>
            <param name="font">The font that is to be used for the Grouping Label text.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisGroupingLabel.#ctor(Syncfusion.Chart.DoubleRange,System.String,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,Syncfusion.Drawing.Font)">
            <summary>
            Constructor. Each Grouping Label along a ChartAxis is held in the ChartAxisGroupingLabel.
            </summary>
            <param name="range">The range to group labels.</param>
            <param name="text">The text that will be displayed as the Grouping Label for the axis point.</param>
            <param name="color">The color that is to be used for the Grouping Label text.</param>
            <param name="borderColor">The border color to render group.</param>
            <param name="font">The font that is to be used for the Grouping Label text.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisGroupingLabel.#ctor(Syncfusion.Chart.DoubleRange,System.String,Syncfusion.Drawing.Color,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.Font)">
            <summary>
            Constructor. Each Grouping Label along a ChartAxis is held in the ChartAxisGroupingLabel.
            </summary>
            <param name="range">The range to group labels.</param>
            <param name="text">The text that will be displayed as the Grouping Label for the axis point.</param>
            <param name="color">The color that is to be used for the Grouping Label text.</param>
            <param name="borderPen">Border <see cref="!:System.Drawing.Pen"/> to render group border.</param>
            <param name="font">The font that is to be used for the Grouping Label text.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisGroupingLabel.Dispose">
            <summary>
            Method to dispose labels
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisGroupingLabelBorderStyle">
            <summary>
            Enumeration of the different border styles in which the axis grouping label could be drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelBorderStyle.Rectangle">
            <summary>
            A plain rectangle around the grouping label.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelBorderStyle.Brace">
            <summary>
            A brace indicating the range that this grouping label covers.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelBorderStyle.WithoutTopBorder">
            <summary>
            A plain rectangle around the grouping label without top border.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelBorderStyle.WithoutTopAndBottomBorder">
            <summary>
            A plain rectangle around the grouping label without top and bottom border.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelBorderStyle.WithoutBorder">
            <summary>
            A plain rectangle around the grouping label without border.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelBorderStyle.LeftBorder">
            <summary>
             A plain rectangle around the grouping label only with left border.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelBorderStyle.RightBorder">
            <summary>
            A plain rectangle around the grouping label only with right border.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisGroupingLabelTextFitMode">
            <summary>
            Specifies the options for rendering the text in the ChartAxisGroupingLabel.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelTextFitMode.None">
            <summary>
            No action will be taken.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelTextFitMode.Wrap">
            <summary>
            The long text will be wrapped if cannot be fit within a single line.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelTextFitMode.Shrink">
            <summary>
            The long text will be shrunk to fit the available space.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelTextFitMode.WrapAndShrink">
            CTODO: Find out the exactly how WrapAndShrink works - can't tell the difference between this and Wrap
            <summary>
            The long text will be wrapped if cannot be fit within a single line and then the text will be shrunk if it is not fit in available space. 
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisGroupingLabelTextAlignment">
            <summary>
            Specifies the alignment options available for rendering the text within a grouping label.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelTextAlignment.Center">
            <summary>
            Centers both vertically and horizontally.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelTextAlignment.Left">
            <summary>
            Aligns the text horizontally at the left and vertically at the center.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelTextAlignment.Right">
            <summary>
            Aligns the text horizontally at the right and vertically at the center.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelTextAlignment.Top">
            <summary>
            Aligns the text horizontally at the center and vertically at the top.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelTextAlignment.Bottom">
            <summary>
            Aligns the text horizontally at the center and vertically at the bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelTextAlignment.TopLeft">
            <summary>
            Aligns the text horizontally at the left and vertically at the top.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelTextAlignment.TopRight">
            <summary>
            Aligns the text horizontally at the right and vertically at the top.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelTextAlignment.BottomLeft">
            <summary>
            Aligns the text horizontally at the left and vertically at the bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisGroupingLabelTextAlignment.BottomRight">
            <summary>
            Aligns the text horizontally at the right and vertically at the bottom.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLayout.AxesCollection.#ctor(Syncfusion.Chart.ChartAxisLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartAxisLayout.AxesCollection"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLayout.Axes">
            <summary>
            Gets the axes.
            </summary>
            <value>The axes.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLayout.LayoutMode">
            <summary>
            Gets or sets the layout mode.
            </summary>
            <value>The layout mode.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLayout.Height">
            <summary>
            Gets or sets the layout height in percentage or pixels of chart area.
            </summary>
            <value>The layout height in percentage.</value>
            
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLayout.Spacing">
            <summary>
            Gets or sets the spacing.
            </summary>
            <value>The spacing.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartAxisLayout"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLayoutCollection.Spacing">
            <summary>
            Gets or sets the spacing which is used to allocate space between the axes.
            </summary>
            <value>The spacing.</value>
        </member>
        <member name="T:Syncfusion.Chart.ChartFormatAxisLabelEventHandler">
            <summary>
                Delegate that is to be used with ChartControl.
            </summary>
            <param name="sender" type="object">
                <para>
                Sender.  
                </para>
            </param>
            <param name="e" type="Syncfusion.Windows.Forms.Chart.ChartFormatAxisLabelEventArgs">
                <para>
                Event argument.
                </para>
            </param>
            <remarks>
                
            </remarks>
        </member>
        <member name="T:Syncfusion.Chart.ChartFormatAxisLabelEventArgs">
            <summary>
              Argument that is to be used with ChartControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFormatAxisLabelEventArgs.AxisOrientation">
            <summary>
                Returns the orientation of the axis for which the label is being generated.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFormatAxisLabelEventArgs.Handled">
            <summary>
                Indicates whether this event was handled and no further processing is required from the chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFormatAxisLabelEventArgs.IsAxisPrimary">
            <summary>
                Indicates whether the axis for which the label is being generated is a primary axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFormatAxisLabelEventArgs.Label">
            <summary>
            Gets or sets the label that is to be rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFormatAxisLabelEventArgs.ToolTip">
            <summary>
            Gets or sets the tooltip for the label that is to be rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFormatAxisLabelEventArgs.Value">
            <summary>
                Returns the value associated with the position of the label.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFormatAxisLabelEventArgs.ValueAsDate">
            <summary>
                Returns the value associated with the position of the label as DateTime.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFormatAxisLabelEventArgs.Axis">
            <summary>
            Gets the Chart axis.
            </summary>
            <value>The axis.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartFormatAxisLabelEventArgs.AxisLabelPlacement">
            <summary>
            Gets or sets a value indicates whether every label is located Right or Left of Y-axis and Top or Bottom of X-Axis line.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFormatAxisLabelEventArgs.#ctor(System.String,System.Double,Syncfusion.Chart.ChartAxis)">
            <summary>
            Initializes a new instance of <see cref="T:Syncfusion.Chart.ChartFormatAxisLabelEventArgs"/> class.
            </summary>
            <param name="label" type="string">
                <para>
                The text of the label.    
                </para>
            </param>
            <param name="value" type="double">
                <para>
                The value of the point associated with the label.   
                </para>
            </param>
            <param name="axis" type="Syncfusion.Windows.Forms.Chart.ChartAxis">
                <para>
                The axis associated with the label.    
                </para>
            </param>
        </member>
        <member name="F:Syncfusion.Chart.ChartStripLineZorder.Over">
            <summary>
            The StripLine will be rendered over chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartStripLineZorder.Behind">
            <summary>
            The StripLine will be rendered behind chart.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartStripLine">
            <summary>
            This class specifies information on rendering a strip line. A strip line is a horizontal or vertical band rendered on the background of a chart 
            to indicate some areas of interest.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartStripLine.Changed">
            <summary>
            Occurs when the properties was changed.
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.ZOrder">
            <summary>
            Indicates the depth order of StripLine.
            </summary>    
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.StartAtAxisPosition">
            <summary>
            Indicates whether the strip line will start at the start of the axis range.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.Vertical">
            <summary>
            Indicates whether the text of strip line will be drawn vertical.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.TextAlignment">
            <summary>
            Gets or sets the alignment of text that is to be rendered within a strip line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.Font">
            <summary>
            Gets or sets the font with which text associated with this strip line is to be rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.TextColor">
            <summary>
            Gets or sets the color of the text rendered with this strip line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.Text">
            <summary>
            Gets or sets the text associated with this strip line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.BackImage">
            <summary>
            Gets or sets the background image associated with this strip line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.Interior">
            <summary>
            Gets or sets the interior brush information for this strip line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.Enabled">
            <summary>
            Indicates whether the strip line is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.DateOffset">
            <summary>
            Gets or sets the offset of the strip line if the chart's Primary X axis is of type DateTime and StartAtAxisPosition is True.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.Offset">
            <summary>
            Gets or sets the offset of the strip line if the chart's Primary X axis is of type double and StartAtAxisPosition is True.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.PeriodDate">
            <summary>
            Gets or sets the period over which this strip line appears when the value is DateTime.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.Period">
            <summary>
            Gets or sets the period over which this strip line appears.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.WidthDate">
            <summary>
            Gets or sets the width of each strip line as a TimeSpan.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.Width">
            <summary>
            Gets or sets the width of each strip line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.FixedWidth">
            <summary>
            Gets or sets the fixed width of each strip line. This property value represents real value not range between two Chart Points.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.StartDate">
            <summary>
            Gets or sets the date from which the strip line is to start.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.EndDate">
            <summary>
            Gets or sets the date after which the strip line should not be displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.Start">
            <summary>
            Gets or sets the start of this strip line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLine.End">
            <summary>
            Gets or sets the end range of this strip line.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStripLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartStripLine"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStripLine.Dispose">
            <summary>
            Method to dispose strip line.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.UnitType">
            <summary>
            Enumeration for the unit type
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.UnitType.Pixel">
            <summary>
            Pixel unit type
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.UnitType.Point">
            <summary>
            Point unit type
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.UnitType.Pica">
            <summary>
            Pica unit type
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.UnitType.Inch">
            <summary>
            Inch unit type
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.UnitType.Mm">
            <summary>
            Millimeter unit type
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.UnitType.Cm">
            <summary>
            Centimeter unit type
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.UnitType.Percentage">
            <summary>
            Percentage unit type
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.UnitType.Em">
            <summary>
            Em unit type relative to parent width
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.UnitType.Ex">
            <summary>
            Ex unit type relative to height
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.Unit">
            <summary>
            Custom implementation of the struct Unit missing in Net Standard library
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Unit.Empty">
            <summary>
            Empty unit
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Unit.IsEmpty">
            <summary>
            Gets a value indicating whether the unit is 0
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Unit.Type">
            <summary>
            Gets the unit type
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Unit.Value">
            <summary>
            Gets the value
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.GdiToSkiaExtension.GetFontName(Syncfusion.Drawing.Font)">
            New Method
        </member>
        <member name="M:Syncfusion.Chart.GdiToSkiaExtension.GetFontFamily(Syncfusion.Drawing.Font)">
            New Method
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisCollection">
            <summary>
            Collection of <see cref="T:Syncfusion.Chart.ChartAxis">ChartAxis</see> instances.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisCollection.Item(System.Int32)">
            <summary>
            Gets or sets <see cref="!:Syncfusion.Windows.Forms.Chart.ChartAxis"/> by index in collection.
            </summary>
            <value>The Chart Axis Object to add to the Chart Axis collection.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartAxisCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisCollection.Add(Syncfusion.Chart.ChartAxis)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The position into which the new axis element was inserted.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisCollection.AddRange(Syncfusion.Chart.ChartAxis[])">
            <summary>
            Adds the array of <see cref="T:Syncfusion.Chart.ChartAxis"/>.
            </summary>
            <param name="values">The values.</param>
            <returns>Returns the count of axis collection.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisCollection.Contains(Syncfusion.Chart.ChartAxis)">
            <summary>
            Determines whether collection contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if collection contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisCollection.Remove(Syncfusion.Chart.ChartAxis)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisCollection.IndexOf(Syncfusion.Chart.ChartAxis)">
            <summary>
            Returns the specified index of <see cref="T:Syncfusion.Chart.ChartAxis"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisCollection.Insert(System.Int32,Syncfusion.Chart.ChartAxis)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisCollection.Validate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="obj">The object to validate.</param>
            <returns>If is true, value is approved.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Chart.IChartAxisGroupingLabelModel">
            <summary>
               Interface that needs to be implemented to display custom axis Grouping Labels. 
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.IChartAxisGroupingLabelModel.GetGroupingLabelAt(System.Int32)">
            <summary>
                Returns the Grouping Label at the specified index.
            </summary>
            <param name="index" type="int">
                <para>
                Index value to look for.    
                </para>
            </param>
            <returns>
                ChartAxisGroupingLabel to be used as Grouping Label.
            </returns>
        </member>
        <member name="P:Syncfusion.Chart.IChartAxisGroupingLabelModel.Count">
            <summary>
            Returns the number of Grouping Labels.    
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisGroupingLabelCollection">
            <summary>
            Collection of custom ChartAxisGroupingLabel.
            <seealso cref="T:Syncfusion.Chart.ChartValueType"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisGroupingLabelCollection.Item(System.Int32)">
             <summary>
            Returns the axis Grouping Label at the specified index value.
             </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartAxisGroupingLabelCollection.Changed">
            <summary>
            Event that is raised when a custom axis Grouping Label is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisGroupingLabelCollection.#ctor">
            <summary>
            To prevent collection construction without ChartAxis reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisGroupingLabelCollection.IndexOf(Syncfusion.Chart.ChartAxisGroupingLabel)">
            <summary>
                Looks up this collection and returns the index value of the specified Grouping Label.
            </summary>
            <param name="label" type="ChartGroupingAxisLabel">
                <para>
                Grouping Label to look for in this collection.   
                </para>
            </param>
            <returns>
                The index value of the Grouping Label if the look up is successful; -1 otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisGroupingLabelCollection.Add(Syncfusion.Chart.ChartAxisGroupingLabel)">
            <summary>
                Adds the specified Grouping Label to this collection.
            </summary>
            <param name="label" type="ChartAxisGroupingLabel">
                <para>
                An instance of the Grouping Label that is to be to add.    
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisGroupingLabelCollection.Insert(System.Int32,Syncfusion.Chart.ChartAxisGroupingLabel)">
            <summary>
                Inserts the specified Grouping Label at the specified index.
            </summary>
            <param name="index" type="int">
                <para>
                Index value where the Grouping Label that is to be inserted.   
                </para>
            </param>
            <param name="label" type="ChartAxisGroupingLabel">
                <para>
                An instance of the Grouping Label that is to be added.    
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisGroupingLabelCollection.Remove(Syncfusion.Chart.ChartAxisGroupingLabel)">
            <summary>
                Removes the specified Grouping Label from this collection.
            </summary>
            <param name="label" type="ChartAxisGroupingLabel">
                <para>
                 Grouping Label that is to be removed.   
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisGroupingLabelCollection.GetGroupingLabelAt(System.Int32)">
            <summary>
                Gets the Grouping Label at the specified index.
            </summary>
            <param name="index" type="int">
                <para>
                 The index value to look for.   
                </para>
            </param>
            <returns>
                The ChartAxis Grouping Label at the specified index.
            </returns>
        </member>
        <member name="T:Syncfusion.Chart.IChartAxisLabelModel">
            <summary>
               Interface that needs to be implemented to display custom axis labels. 
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.IChartAxisLabelModel.GetLabelAt(System.Int32)">
            <summary>
                Returns the label at the specified index.
            </summary>
            <param name="index" type="int">
                <para>
                Index value to look for.    
                </para>
            </param>
            <returns>
                ChartAxisLabel to be used as label.
            </returns>
        </member>
        <member name="P:Syncfusion.Chart.IChartAxisLabelModel.Count">
            <summary>
            Returns the number of labels.    
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisLabelCollection">
            <summary>
            Collection of custom ChartAxis labels. These labels will be used as axis labels when
            the value type of the ChartAxis is set to custom.
            <seealso cref="T:Syncfusion.Chart.ChartValueType"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxisLabelCollection.Item(System.Int32)">
            <summary>
            Returns the axis label at the specified index value.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartAxisLabelCollection.Changed">
            <summary>
            An event that is triggered when a custom axis label is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabelCollection.#ctor">
            <summary>
            To prevent collection construction without ChartAxis reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabelCollection.IndexOf(Syncfusion.Chart.ChartAxisLabel)">
            <summary>
                Looks up this collection and returns the index value of the specified label.
            </summary>
            <param name="label" type="ChartAxisLabel">
                <para>
                 Label to look for in this collection.   
                </para>
            </param>
            <returns>
                The index value of the label if the look up is successful; -1 otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabelCollection.Add(Syncfusion.Chart.ChartAxisLabel)">
            <summary>
                Adds the specified label to this collection.
            </summary>
            <param name="label" type="ChartAxisLabel">
                <para>
                An instance of the label that is to be to add.    
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabelCollection.Insert(System.Int32,Syncfusion.Chart.ChartAxisLabel)">
            <summary>
                Inserts the specified label at the specified index.
            </summary>
            <param name="index" type="int">
                <para>
                Index value where the label that is to be inserted.   
                </para>
            </param>
            <param name="label" type="ChartAxisLabel">
                <para>
                An instance of the label that is to be added.    
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabelCollection.Remove(Syncfusion.Chart.ChartAxisLabel)">
            <summary>
                Removes the specified label from this collection.
            </summary>
            <param name="label" type="ChartAxisLabel">
                <para>
                 Label that is to be removed.   
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxisLabelCollection.GetLabelAt(System.Int32)">
            <summary>
                Gets the label at the specified index.
            </summary>
            <param name="index" type="int">
                <para>
                 The index value to look for.   
                </para>
            </param>
            <returns>
                The ChartAxis label at the specified index.
            </returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartListChangeArgs">
            <summary>
            Provides data for the <see cref="T:Syncfusion.Chart.ChartListChangeHandler"/> delegate.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartListChangeArgs.Index">
            <summary>
            Gets the index of the items affected by the change.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartListChangeArgs.OldItems">
            <summary>
            Gets array of items has removed from list.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartListChangeArgs.NewItems">
            <summary>
            Gets array of items has added to list.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartListChangeArgs.#ctor(System.Int32,System.Object[],System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartListChangeArgs"/> class. 
            </summary>
            <param name="index">Index of the items affected by the change.</param>
            <param name="oldItems">Array of items has added to list.</param>
            <param name="newItems">Array of items has removed from list.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartListChangeHandler">
            <summary>
            Represents the method that will handle an event that has <see cref="T:Syncfusion.Chart.ChartListChangeArgs"/> data. 
            </summary>
            <param name="list">The source of the event.</param>
            <param name="args">Instance of <see cref="T:Syncfusion.Chart.ChartListChangeArgs"/> class.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartBaseList">
            <summary>
            Provides the base class for a strongly typed collection. 
            This class has <see cref="E:Syncfusion.Chart.ChartBaseList.Changed"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartBaseList.ChartBaseEnumerator">
            <summary>
            Internal enumerator for <see cref="T:Syncfusion.Chart.ChartBaseList"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartBaseList.ChartBaseEnumerator.Current">
            <summary>
            Gets the current element in the collection. 
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseList.ChartBaseEnumerator.#ctor(Syncfusion.Chart.ChartBaseList)">
            <summary>
            Initializes a new instance of the ChartBaseEnumerator class.
            </summary>
            <param name="list">Instance of <see cref="T:Syncfusion.Chart.ChartBaseList"/> class.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseList.ChartBaseEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseList.ChartBaseEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection. 
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartBaseList.Changed">
            <summary>
            An event that is triggered when the collection is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartBaseList.FreezeEvent">
            <summary>
            Gets or sets a value indicating whether the <see cref="E:Syncfusion.Chart.ChartBaseList.Changed"/> will be raised.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.ChartBaseList.List">
            <summary>
            Gets an IList containing the list of elements in the ChartBaseList instance.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.ChartBaseList.IsFixedSize">
            <summary>
            Gets a value indicating whether the ChartBaseList has a fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartBaseList.IsReadOnly">
            <summary>
            Gets a value indicating whether the ChartBaseList is read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartBaseList.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ChartBaseList is synchronized (thread safe). 
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartBaseList.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ChartBaseList.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartBaseList.Count">
            <summary>
            Gets the number of elements contained in the ChartBaseList instance. This property cannot be overridden.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseList.#ctor">
            <summary>
            Initializes a new instance of the ChartBaseList class that is empty and has the default initial capacity. 
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseList.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ChartBaseList class that is empty and has the specified initial capacity. 
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseList.Clear">
            <summary>
            Removes all items from the ChartBaseList.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseList.RemoveAt(System.Int32)">
            <summary>
            Removes the ChartBaseList item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire ChartBaseList to a compatible one-dimensional Array, starting at the specified index of the target array. 
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ChartBaseList. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseList.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the elements in the entire ChartBaseList using the specified comparer
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseList.ToArray">
            <summary>
            Copies the elements of the ChartBaseList to a new <see cref="T:System.Object"/> array.
            </summary>
            <returns>An <see cref="T:System.Object"/> array containing copies of the elements of the ChartBaseList.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseList.ToArray(System.Type)">
            <summary>
            Copies the elements of the ChartBaseList to a new array of the specified element type. 
            </summary>
            <param name="type">The element <see cref="T:System.Type"/> of the destination array to create and copy elements to.</param>
            <returns>An array of the specified element type containing copies of the elements of the ChartBaseList.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseList.GetEnumerator">
            <summary>
            Returns an enumerator for the entire ChartBaseList. 
            </summary>
            <returns>An IEnumerator for the entire ChartBaseList.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartBaseList.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseList.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the ChartBaseList.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the ChartBaseList.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseList.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the ChartBaseList at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"/> to insert into the ChartBaseList.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseList.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the ChartBaseList.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the ChartBaseList. </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseList.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the ChartBaseList.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the ChartBaseList.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseList.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the ChartBaseList contains a specific value. 
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the ChartBaseList.</param>
            <returns>true if the <see cref="T:System.Object"/> is found in the IList; otherwise, false</returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartCustomPointCollection">
            <summary>
            Collection of custom points that are registered for display.
            Custom points can be tied to specific positions on the chart or to specific points on any series.
            <seealso cref="T:Syncfusion.Chart.ChartCustomPoint"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPointCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Syncfusion.Chart.ChartCustomPointCollection"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPointCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:Syncfusion.Windows.Forms.Chart.ChartCustomPoint"/> at the specified index.
            </summary>                
            <value>Add the ChartCustomPoint.</value>        
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPointCollection.Add(Syncfusion.Chart.ChartCustomPoint)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPointCollection.Contains(Syncfusion.Chart.ChartCustomPoint)">
            <summary>
            Determines whether collection contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <c>true</c> if collection contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPointCollection.Remove(Syncfusion.Chart.ChartCustomPoint)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPointCollection.IndexOf(Syncfusion.Chart.ChartCustomPoint)">
            <summary>
            Returns the index of the custom point collection.
            </summary>
            <param name="value">The value.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPointCollection.Insert(System.Int32,Syncfusion.Chart.ChartCustomPoint)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPointCollection.Validate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="obj">The object to validate.</param>
            <returns>If is true, value is approved.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Chart.ChartImageCollection">
            <summary>
            Collection of Image instances.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartImageCollection.Item(System.Int32)">
            <summary>
            Gets image by specified index in collection.
            </summary>
            <value>The position into which the new element was inserted.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageCollection.#ctor">
            <summary>
            Initializes a new instance of the ChartImageCollection.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageCollection.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of the ChartImageCollection with collection of images.
            </summary>
            <param name="source">Collection of images to copy to array.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageCollection.MakeTransparent(Syncfusion.Drawing.Color)">
            <summary>
            At this moment all images in this collection is Bitmaps 
            and this color is transparent color.
            </summary>
            <param name="color">Color to make transparent.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageCollection.Add(Syncfusion.Drawing.Image)">
            <summary>
            Add image to collection.
            </summary>
            <param name="image">Image to add.</param>
            <returns>Index of added image.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageCollection.AddFromList(System.Collections.IList)">
            <summary>
            Adds image from a list to the collection.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageCollection.AddRange(Syncfusion.Drawing.Image[])">
            <summary>
            Adds an array of images to this collection.
            </summary>        
        </member>
        <member name="M:Syncfusion.Chart.ChartImageCollection.Remove(Syncfusion.Drawing.Image)">
            <summary>
            Removes the image from the list.
            </summary>
            <param name="image">Image to remove.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageCollection.Contains(Syncfusion.Drawing.Image)">
            <summary>
            Check collection to constrains image.
            </summary>
            <param name="image">Image to check.</param>
            <returns>True if collection constrains image, otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageCollection.IndexOf(Syncfusion.Drawing.Image)">
            <summary>
            Returns the index of the specified image.
            </summary>
            <param name="image">Image to get index.</param>
            <returns>Index of given image. If collection doesn't constrains image return -1.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageCollection.Insert(System.Int32,Syncfusion.Drawing.Image)">
            <summary>
            Inserts the image at the specified index.
            </summary>
            <param name="index">Index to insert image.</param>
            <param name="image">Image to insert.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageCollection.CopyTo(Syncfusion.Drawing.Image[],System.Int32)">
            <summary>
            Copies the images to a one dimensional array starting at the specified index of the target array.
            </summary>
            <param name="images">Destination array where the elements are to be stored.</param>
            <param name="index">Index value from which copy is to start.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointSortedList.#ctor">
            <summary>
            Creates instance of the ChartPointWithIndexArray.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointSortedList.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPointSortedList"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointSortedList.Add(Syncfusion.Chart.ChartPointWithIndex)">
            <summary>
            Add ChartPointWithIndex to collection
            </summary>
            <param name="item">ChartPointWithIndex to add</param>
            <returns>Index of added ChartPointWithIndex</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointSortedList.Clear">
            <summary>
            Clear collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointSortedList.Contains(Syncfusion.Chart.ChartPointWithIndex)">
            <summary>
            Gets value indicates is ChartPointWithIndex in collection
            </summary>
            <param name="point">ChartPointWithIndex to check</param>
            <returns>TRUE in point belongs to collection otherwise FALSE.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointSortedList.RemoveAt(System.Int32)">
            <summary>
            Remove point by its index in collection
            </summary>
            <param name="index">Index of point</param>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointSortedList.Capacity">
            <summary>
            Gets or sets collection capacity.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointSortedList.Item(System.Int32)">
            <summary>
            Gets or sets ChartPointWithIndex by its index.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointSortedList.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointSortedList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets IEnumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointSortedList.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="start"></param>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointSortedList.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets value indicates that collection is synchronized.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointSortedList.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets SyncRoot.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointSortedList.Count">
            <summary>
            Gets count of elements in collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartPointSortedList.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPointSortedList.Enumerator.m_collection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPointSortedList.Enumerator.m_index">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointSortedList.Enumerator.#ctor(Syncfusion.Chart.ChartPointSortedList)">
            <summary>
            
            </summary>
            <param name="tc"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointSortedList.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointSortedList.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointSortedList.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointSortedList.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartConfigItem">
            <summary>
                Base class of configuration items that are created for specific chart-types. Configuration items are a convenient way to store
                information specific to certain chart types that may not be applicable to other chart types.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartConfigItem.PropertyChanged">
            <summary>
            An event that is raised when a property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartConfigItem.NoEvents">
            <summary>
            Controls whether events are raised or not. If set to True, events are not raised.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Chart.ChartBubbleType">
            <summary>
              The type of bubble that is to be rendered with Bubble charts.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBubbleType.Circle">
            <summary>
              Circular shaped bubbles are rendered with Bubble charts.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBubbleType.Square">
            <summary>
              Square shaped bubbles are rendered with Bubble charts.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBubbleType.Image">
            <summary>
              Images are rendered as bubbles with Bubble charts.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartBubbleSizingBehavior">
            <summary>
                Defines the behavior in which bubble sizes vary.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBubbleSizingBehavior.Fixed">
            <summary>
              Bubble sizes are fixed. This behavior is not supported in the current version.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBubbleSizingBehavior.Proportional">
            <summary>
              Bubble sizes are proportional to value.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartRadarDrawType">
            <summary>
            The type of Radar chart that is to be rendered.    
            </summary>
            <example>
            <code lang="C#">
            series.ConfigItems.RadarItem.Type = ChartRadarDrawType.Symbol;
            </code>    
            </example>
        </member>
        <member name="F:Syncfusion.Chart.ChartRadarDrawType.Area">
            <summary>
            Renders a Radar chart such that points are connected and the enclosed region is filled.    
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartRadarDrawType.Line">
            <summary>
            Renders a Radar chart such that points are connected but the enclosed region is not filled.    
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartRadarDrawType.Symbol">
            <summary>
            Renders a Radar chart such that points are rendered with the associated symbol. They are not connected to each other.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartPieFillMode">
            <summary>
            Lists the mode in which the pie Gradient should be rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPieFillMode.AllPie">
            <summary>
            Apply the colors as a whole to the full pie.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPieFillMode.EveryPie">
            <summary>
            Apply the colors to each individual slice.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartPieType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPieType.None">
            <summary>
            None of the painting style will be applied.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPieType.OutSide">
            <summary>
            Applies the painting style at outside of PieChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPieType.InSide">
            <summary>
            Applies the painting style at inside of PieChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPieType.Round">
            <summary>
            Applies the round painting style PieChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPieType.Bevel">
            <summary>
            Applies the painting style at a sloping surface or edge of PieChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPieType.Custom">
            <summary>
            Custom painting style will be applied.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartColumnShadingMode">
            <summary>
            Lists the shading mode options for bars and charts.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColumnShadingMode.FlatRectangle">
            <summary>
            Rendered as a flat rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColumnShadingMode.PhongCylinder">
            <summary>
            Rendered in phong style.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartColumnType">
            <summary>
            Lists the rendering options for columns when in 3D mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColumnType.Box">
            <summary>
            Rendered as a box.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColumnType.Cylinder">
            <summary>
            Rendered as a cylinder.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartFinancialColorMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartFinancialColorMode.Fixed">
            <summary>
            PriceUpColor will be applied for Financial ChartSeries points.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartFinancialColorMode.Mixed">
            <summary>
            Original color with PriceUpColor which means mixed color will be applied for Financial ChartSeries points.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartFinancialColorMode.DarkLight">
            <summary>
            Dark and light colors will be applied for Financial ChartSeries points.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesParameters">
            <summary>
            Configuration item that pertains to "all" chart types.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesParameters.SeriesSpacing">
            <summary>
            Gets or sets the spacing between series.
            </summary>
            <value>The series spacing.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesParameters.PointSpacing">
            <summary>
            Gets or sets the spacing between points.
            </summary>
            <value>The point spacing.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesParameters.SeriesDepthSpacing">
            <summary>
            Gets or sets the depth spacing between series.
            </summary>
            <value>The series depth spacing.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesParameters.#ctor(Syncfusion.Chart.ChartArea)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartArea"/> class.
            </summary>
            <param name="area">The area.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartGanttConfigItem">
            <summary>
            Configuration item that pertains to Gantt charts.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartGanttConfigItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartGanttConfigItem"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartGanttConfigItem.DrawMode">
            <summary>
            Specifies the drawing mode of Gantt chart.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartBubbleConfigItem">
            <summary>
            Configuration item that pertains to Bubble charts.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBubbleConfigItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartBubbleConfigItem"/> class..
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartBubbleConfigItem.MinBounds">
            <summary>
                The minimum bounds to be used by a bubble. Default is (25, 25).
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartBubbleConfigItem.MaxBounds">
            <summary>
                The maximum bounds to be used by a bubble. Default is (50, 50)
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartBubbleConfigItem.BubbleType">
            <summary>
            	The type of the bubble that is to be rendered. Default is Circle.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartBubbleConfigItem.EnablePhongStyle">
            <summary>
            Specifies if the PhongStyle is enable. Default is true.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartPieConfigItem">
            <summary>
                Configuration item that pertains to Pie charts.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPieConfigItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPieConfigItem"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPieConfigItem.AngleOffset">
            <summary>
              The offset angle that is to be used when rendering Pie charts. Default is 0f.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPieConfigItem.PieWithSameRadius">
            <summary>
              Gets or sets whether the pie chart render in same radius when the LabelStyle is in Outside or OutsideInCoulmn. Default is false.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPieConfigItem.PieRadius">
            <summary>
            Gets or sets the pie radius. 
            </summary>
            <value>The pie radius.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPieConfigItem.PieTilt">
            <summary>
            Gets or sets the pie tilt. Use this property when MultiplePies is enabled.
            </summary>
            <value>The pie tilt.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPieConfigItem.PieHeight">
            <summary>
            Gets or sets the height of the pie. Use this property when MultiplePies is enabled.
            </summary>
            <value>The height of the pie.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPieConfigItem.PieSize">
            <summary>
            Gets or sets the size of the pie. Added for internal purposed and used only when MultiplePies is enabled.
            </summary>
            <value>The size of the pie.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPieConfigItem.PieType">
            <summary>
            Gets or sets the painting type of the pie.
            </summary>
            <value>The painting type of the pie.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPieConfigItem.FillMode">
            <summary>
            Specifies how the <see cref="P:Syncfusion.Chart.ChartPieConfigItem.Gradient"/> should be applied. Default is AllPie.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPieConfigItem.Gradient">
            <summary>
            Specifies the gradient colors to use in the chart when PieType is set to Custom. Default is null.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPieConfigItem.HeightByAreaDepth">
            <summary>
            Specifies whether the height for the pie is determined through the <see cref="P:Syncfusion.Chart.ChartPieConfigItem.HeightCoeficient"/> property or through the <see cref="P:Syncfusion.Chart.ChartArea.Depth"/> property. Default is false (uses HeightCoefficient).
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPieConfigItem.LabelStyle">
            <summary>
            Specifies the style in which the labels are rendered. Default is Outside.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPieConfigItem.HeightCoeficient">
            <summary>
            Specifies the height of the pie as a factor of the radius of the pie. Valid range is 0f - 1f. Default is 0.2f.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPieConfigItem.DoughnutCoeficient">
            <summary>
            Specifies the radius of the doughnut hole in the center as a factor of the radius. Default is 0f.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPieConfigItem.ShowSeriesTitle">
            <summary>
            Gets or sets a value indicating whether series title is displayed.
            </summary>
            <value><c>true</c> if series title is displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPieConfigItem.ShowDataBindLabels">
            <summary>
            Gets or sets a value indicating whether databind labels are displayed.
            </summary>
            <value><c>true</c> if databind labels are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Chart.ChartRadarConfigItem">
            <summary>
                Configuration item that pertains to Radar charts.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartRadarConfigItem.Type">
            <summary>
            The type of Radar chart to be rendered. Default is Area.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartRadarConfigItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartRadarConfigItem"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartStepConfigItem">
            <summary>
                Configuration item that pertains to Step charts.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStepConfigItem.Inverted">
            <summary>
            Specifies if the step line is inverted. Default is false.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStepConfigItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartStepConfigItem"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartFunnelConfigItem">
            <summary>
                Configuration item that pertains to Funnel charts.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFunnelConfigItem.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Syncfusion.Chart.ChartFunnelConfigItem"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFunnelConfigItem.FunnelMode">
            <summary>
            Specifies how the Y values should be interpreted. Default is YIsHeight.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFunnelConfigItem.LabelPlacement">
            <summary>
            Specifies the positioning of the lables in addition to <see cref="P:Syncfusion.Chart.ChartFunnelConfigItem.LabelStyle"/>. Default is Right.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFunnelConfigItem.LabelStyle">
            <summary>
            Specifies the positioning of the labels in addition to <see cref="P:Syncfusion.Chart.ChartFunnelConfigItem.LabelPlacement"/>. Default is Outside.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFunnelConfigItem.GapRatio">
            <summary>
            Specifies the co-efficient for the gap between the blocks. Default is 0.0f.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFunnelConfigItem.FigureBase">
            <summary>
            Specifies the type of base for the funnel. Default is Circle.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFunnelConfigItem.ShowSeriesTitle">
            <summary>
            Gets or sets a value indicating whether series title is displayed.
            </summary>
            <value><c>true</c> if series title is displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartFunnelConfigItem.ShowDataBindLabels">
            <summary>
            Gets or sets a value indicating whether databind labels are displayed.
            </summary>
            <value><c>true</c> if databind labels are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Chart.ChartPyramidConfigItem">
            <summary>
                Configuration item that pertains to Pyramid charts.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPyramidConfigItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPyramidConfigItem"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPyramidConfigItem.PyramidMode">
            <summary>
            Specifies the mode in which the Y values should be interpreted. Default is Linear.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPyramidConfigItem.LabelPlacement">
            <summary>
            Specifies the positioning of the labels in addition to the <see cref="P:Syncfusion.Chart.ChartPyramidConfigItem.LabelStyle"/> property.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPyramidConfigItem.LabelStyle">
            <summary>
            Specifies the positioning of the labels in addition to the <see cref="P:Syncfusion.Chart.ChartPyramidConfigItem.LabelPlacement"/> property.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPyramidConfigItem.GapRatio">
            <summary>
            Specifies the co-efficient that determines the gap between the blocks. Default is 0.0f.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPyramidConfigItem.FigureBase">
            <summary>
            Specifies the way in which the pyramid base should be rendered in 3D mode. Default is Square.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPyramidConfigItem.ShowSeriesTitle">
            <summary>
            Gets or sets a value indicating whether series title is displayed.
            </summary>
            <value><c>true</c> if series title is displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPyramidConfigItem.ShowDataBindLabels">
            <summary>
            Gets or sets a value indicating whether databind labels are displayed.
            </summary>
            <value><c>true</c> if databind labels are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Chart.ChartHiLoOpenCloseConfigItem">
            <summary>
            Configuration item that pertains to Pyramid charts.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartHiLoOpenCloseConfigItem.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Syncfusion.Chart.ChartHiLoOpenCloseConfigItem"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartHiLoOpenCloseConfigItem.DrawMode">
            <summary>
            Specifies the mode in which the Y values should be interpreted. Default is Linear.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartHiLoOpenCloseConfigItem.OpenTipColor">
            <summary>
            Specifies the color for open tip.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartHiLoOpenCloseConfigItem.CloseTipColor">
            <summary>
            Specifies the color for close tip.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartColumnConfigItem">
            <summary>
                Configuration item that pertains to Column charts.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartColumnConfigItem.ColumnType">
            <summary>
            Specifies the column type. Default is Box.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartColumnConfigItem.ShadingMode">
            <summary>
            Specifies the shading mode used for columns or bars.
            Default is ChartColumnShadingMode.PhongCylinder.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartColumnConfigItem.LightColor">
            <summary>
            Specifies the color of light when ShadingMode is set to PhongCylinder.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartColumnConfigItem.LightAngle">
            <summary>
            Specifies the light angle in horizontal plane when ShadingMode is set to PhongCylinder. Default is (-PI/4).
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartColumnConfigItem.PhongAlpha">
            <summary>
            Specifies the Phong's alpha coefficient used for calculation of specular lighting. Default is 20d.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartColumnConfigItem.CornerRadius">
            <summary>
            Specifies the radius of round corners. Default is SizeF.Empty.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColumnConfigItem.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Syncfusion.Chart.ChartColumnConfigItem"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartFinancialConfigItem">
            <summary>
            Configuration item that pertains to Financial charts.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFinancialConfigItem.ColorsMode">
            <summary>
            Gets or sets the colors mode.
            </summary>
            <value>The colors mode.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartFinancialConfigItem.PriceUpColor">
            <summary>
            Specifies the color with which price-up should be indicated. Default is Green.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFinancialConfigItem.PriceDownColor">
            <summary>
            Specifies the color with which price-down should be indicated. Default is Red.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFinancialConfigItem.DarkLightPower">
            <summary>
            Specifies the difference between the dark and light colors. Default is 0x64.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFinancialConfigItem.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Syncfusion.Chart.ChartFinancialConfigItem"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartHistogramConfigItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartHistogramConfigItem.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Syncfusion.Chart.ChartHistogramConfigItem"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartHistogramConfigItem.ShowNormalDistribution">
            <summary>
            Gets or sets a value indicating whether normal distribution is shown.
            </summary>
            <value>
            	<c>true</c> if normal distribution is shown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartHistogramConfigItem.ShowDataPoints">
            <summary>
            Gets or sets a value indicating whether data points is shown.
            </summary>
            <value><c>true</c> if data points is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartHistogramConfigItem.NumberOfIntervals">
            <summary>
            Gets or sets the number of intervals.
            </summary>
            <value>The number of intervals.</value>
        </member>
        <member name="T:Syncfusion.Chart.ChartErrorBarsConfigItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartErrorBarsConfigItem.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Syncfusion.Chart.ChartErrorBarsConfigItem"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartErrorBarsConfigItem.SymbolSize">
            <summary>
            Gets or sets the size of the error bar symbol.
            </summary>
            <value>The size of the symbol.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartErrorBarsConfigItem.SymbolShape">
            <summary>
            Gets or sets the error bar symbol shape.
            </summary>
            <value>The symbol shape.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartErrorBarsConfigItem.Orientation">
            <summary>
            Gets or sets the error bar orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartErrorBarsConfigItem.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Chart.ChartErrorBarsConfigItem"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Chart.ChartBoxAndWhiskerConfigItem">
            <summary>
            Configuration item that pertains to BoxAndWhisker chart.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBoxAndWhiskerConfigItem.#ctor">
            <summary>
            Initializes the new instance of the <see cref="T:Syncfusion.Chart.ChartBoxAndWhiskerConfigItem"/> class.
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.ChartBoxAndWhiskerConfigItem.PercentileMode">
            <summary>
            Gets or sets a value indicating whether chart render in percentile mode or in normal mode.  
            </summary>
            <value><c>true</c> if [percentile mode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartBoxAndWhiskerConfigItem.Percentile">
            <summary>
            Gets or sets the percentile. It should be lie between 0.0 to 0.25 . This value decides the outliers in the chart.
            </summary>
            <value>The percentile.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartBoxAndWhiskerConfigItem.OutLierWidth">
            <summary>
            Gets or sets the width of the outlier. Value should be greater than zero and it starts from 1.
            </summary>
            <value>The width of the outlier.</value>
        </member>
        <member name="T:Syncfusion.Chart.ChartHeatMapConfigItem">
            <summary>
            Configuration item that pertains to HeatMap charts.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartHeatMapConfigItem.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Syncfusion.Chart.ChartHeatMapConfigItem"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartHeatMapConfigItem.DisplayColorSwatch">
            <summary>
            Gets or sets a value indicating whether color swatch is displayed.
            </summary>
            <value><c>true</c> if color swatch is displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartHeatMapConfigItem.LowestValueColor">
            <summary>
            Gets or sets the color of the lowest value.
            </summary>
            <value>The color of the lowest value.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartHeatMapConfigItem.MiddleValueColor">
            <summary>
            Gets or sets the color of the middle value.
            </summary>
            <value>The color of the middle value.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartHeatMapConfigItem.HighestValueColor">
            <summary>
            Gets or sets the color of the highest value.
            </summary>
            <value>The color of the highest value.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartHeatMapConfigItem.StartText">
            <summary>
            Gets or sets "from" text.
            </summary>
            <value>From text.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartHeatMapConfigItem.EndText">
            <summary>
            Gets or sets "to" text.
            </summary>
            <value>To text.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartHeatMapConfigItem.LabelMargins">
            <summary>
            Gets or sets the margins.
            </summary>
            <value>The margins.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartHeatMapConfigItem.DisplayTitle">
            <summary>
            Gets or sets a value indicating whether title is displayed.
            </summary>
            <value><c>true</c> if title is displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartHeatMapConfigItem.MaximumCharacters">
            <summary>
            Gets or sets the max characters.
            </summary>
            <value>The max characters.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartHeatMapConfigItem.EnableLabelsTruncation">
            <summary>
            Gets or sets a value indicating whether the large labels should be truncated.
            </summary>
            <value><c>true</c> if the latge labels should be truncated; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartHeatMapConfigItem.EnableLabelRotation">
            <summary>
            Gets or sets a value indicating whether is allowed to rotation labels.
            </summary>
            <value><c>true</c> if is allowed to rotation labels; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartHeatMapConfigItem.AllowLabelsAutoFit">
            <summary>
            Gets or sets a value indicating whether labels auto fit is enebled.
            </summary>
            <value><c>true</c> if labels auto fit is enebled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartHeatMapConfigItem.MinimumFontSize">
            <summary>
            Gets or sets the minimal size of the font.
            </summary>
            <value>The minimal size of the font.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartHeatMapConfigItem.ShowLargeLabels">
            <summary>
            Gets or sets a value indicating whether the large labels should be hiden.
            </summary>
            <value><c>true</c> if the large labels should be hiden; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartHeatMapConfigItem.HeatMapStyle">
            <summary>
            Gets or sets the layout style.
            </summary>
            <value>The layout style.</value>
        </member>
        <member name="T:Syncfusion.Chart.ChartLineConfigItem">
            <summary>
            Configuration Line that pertains to Line,Spline charts.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineConfigItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartLineConfigItem"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLineConfigItem.DisableLineCap">
            <summary>
            Gets or sets a value indicating whether Line cap is enabled or disabled for drawing Line series.  
            </summary>
            <value><c>true</c> if [disable LineCap]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLineConfigItem.DisableLineRegion">
            <summary>
            Enable/Disable the Line segement(line between two points) for Line and Spline type.Default value is false.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartRangeAreaConfigItem">
            <summary>
            Configuration for range area chart.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartRangeAreaConfigItem.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartRangeAreaConfigItem"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartRangeAreaConfigItem.SwapHighLowPoint">
            <summary>
            Gets or sets a value indicating whether High and Low point should be swapped when low point value is higher than high point value..  
            </summary>
            <value><c>true</c> if [disable SwapHighLowPoint]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesConfigCollection">
            <summary>
            Collection of Configuration Items. These items store datas that can be used by the chart and its elements in any
            manner.
            <seealso cref="T:Syncfusion.Chart.ChartConfigItem"/>
            </summary>
            <remarks>
            Pre-defined configuration items may be accessed as shown below.
            <code lang="C#">
            // access the RadarItem ConfigItem to configure radar charts
            series.ConfigItems.RadarItem.Type = ChartRadarDrawType.Symbol;
            </code>
            </remarks>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesConfigCollection.BubbleItemName">
            <summary>
                Standard identifier for Bubble chart configuration information.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesConfigCollection.PieItemName">
            <summary>
                Standard identifier for Pie chart configuration information.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesConfigCollection.RadarItemName">
            <summary>
            	Standard identifier for Radar chart configuration information.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesConfigCollection.StepItemName">
            <summary>
            	Standard identifier for Step chart configuration information.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesConfigCollection.ColumnItemName">
            <summary>
            	Standard identifier for Column chart configuration information.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesConfigCollection.FunnelItemName">
            <summary>
            	Standard identifier for Column chart configuration information.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesConfigCollection.PyramidItemName">
            <summary>
            	Standard identifier for Column chart configuration information.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesConfigCollection.FinancialItemName">
            <summary>
            	Standard identifier for financial charts configuration information.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesConfigCollection.GanttItemName">
            <summary>
            	Standard identifier for Gantt chart configuration information.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesConfigCollection.HiLoOpenCloseItemName">
            <summary>
            	Standard identifier for Gantt chart configuration information.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesConfigCollection.HistogramItemName">
            <summary>
             Standard identifier for Histogram chart configuration information.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesConfigCollection.ErrorBarsItemName">
            <summary>
            Standard identifier for Histogram chart configuration information.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesConfigCollection.HeatMapItemName">
            <summary>
            	Standard identifier for HeatMap chart configuration information.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesConfigCollection.BoxAndWhiskerItemName">
            <summary>
            	Standard identifier for BoxAndWhisker chart configuration information.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesConfigCollection.LineSegmentName">
            <summary>
            	Standard identifier for Line and Spline chart configuration information.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesConfigCollection.RangeAreaName">
            <summary>
            Standard identifier for Range Area chart configuration information.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartSeriesConfigCollection.Changed">
            <summary>
                Event that is raised when configuration information is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.BubbleItem">
            <summary>
                Standard configuration information for Bubble charts.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.PieItem">
            <summary>
                Standard configuration information for Pie charts.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.RadarItem">
            <summary>
                Standard configuration information for Radar charts.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.StepItem">
            <summary>
                Standard configuration information for Step charts.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.ColumnItem">
            <summary>
                Standard configuration information for Step charts.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.FunnelItem">
            <summary>
                Standard configuration information for Funnel charts.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.PyramidItem">
            <summary>
                Standard configuration information for Pyramid charts.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.FinancialItem">
            <summary>
                Standard configuration information for financial charts.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.GanttItem">
            <summary>
            Standard configuration information for Gantt chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.HiLoOpenCloseItem">
            <summary>
             Standard configuration information for HiLoOpenClose chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.HistogramItem">
            <summary>
             Standard configuration information for Histogram chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.ErrorBars">
            <summary>
             Standard configuration information for error bars.
            </summary>
            <value>The error bars.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.BoxAndWhiskerItem">
            <summary>
             Standard configuration information for BoxAndWhisker chart.
            </summary>     
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.HeatMapItem">
            <summary>
            Standard configuration information for HeatMap chart.
            </summary>
            <value>The heat map item.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.LineSegment">
            <summary>
                Standard configuration information for Bubble charts.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.LineItem">
            <summary>
             Standard configuration information for Line chart.
            </summary>     
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.RangeAreaItem">
            <summary>
             Standard configuration information for Range Area chart.
            </summary>     
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesConfigCollection.Item(System.String)">
            <summary>
                Looks up the collection by name and returns the configuration item.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesConfigCollection.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSeriesConfigCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesConfigCollection.Add(System.String,Syncfusion.Chart.ChartConfigItem)">
            <summary>
                Adds the specified configuration item to this collection, with the specified name used for referencing it.
            </summary>
            <param name="name" type="string">
                <para>
                Name to be used for referencing the specified configuration item.
                </para>
            </param>
            <param name="item" type="Syncfusion.Windows.Forms.Chart.ChartConfigItem">
                <para>
                Configuration Item to be added.
                </para>
            </param>
            <returns>
                A void value.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesConfigCollection.Remove(System.String)">
            <summary>
                Removes specified configuration item from the collection.
            </summary>
            <param name="name" type="string">
                <para>
                Reference name of the item to be removed.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesConfigCollection.OnInsertComplete(System.Object,System.Object)">
            <summary>
            Performs additional custom processes after inserting a new element into the <see cref="T:System.Collections.DictionaryBase"/> instance.
            </summary>
            <param name="key">The key of the element to insert.</param>
            <param name="value">The value of the element to insert.</param>
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesConfigCollection.OnRemove(System.Object,System.Object)">
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesConfigCollection.OnRemoveComplete(System.Object,System.Object)">
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesConfigCollection.OnSet(System.Object,System.Object,System.Object)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesConfigCollection.OnSetComplete(System.Object,System.Object,System.Object)">
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesConfigCollection.OnClear">
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesConfigCollection.OnClearComplete">
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesConfigCollection.WireItem(System.Object)">
            <summary>
            Connects the event handlers.
            </summary>
            <param name="value">The value.</param>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesConfigCollection.UnwireItem(System.Object)">
            <summary>
            Unconnects the event handlers.
            </summary>
            <param name="value">The value.</param>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesConfigCollection.OnContainedObjectPropertyChanged(System.Object,Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs)">
            <summary>
            Called when property of contained object is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs"/> instance containing the event data.</param>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesConfigCollection.BroadcastChange">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesConfigCollection.ChangeConfig(System.String,System.Object)">
            <summary>
            Changes the config.
            </summary>
            <param name="key">The key.</param>
            <param name="newValue">The new config.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartStripLineCollection">
            <summary>
            	Collection of ChartStripLines. A strip line is a band that is drawn on the background of the chart, to highlight areas of interest.
            <seealso cref="T:Syncfusion.Chart.ChartStripLine"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStripLineCollection.Item(System.Int32)">
            <summary>
            Returns the strip line stored in the specified index.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartStripLineCollection.Changed">
            <summary>
                Event that is raised when this collection is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStripLineCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartStripLineCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStripLineCollection.IndexOf(Syncfusion.Chart.ChartStripLine)">
            <summary>
                Looks up the collection and returns the index value of the specified strip line.
            </summary>
            <param name="stripLine" type="Syncfusion.Windows.Forms.Chart.ChartStripLine">
                <para>
                An instance of the strip line that is to be looked up in the collection.
                </para>
            </param>
            <returns>
                The index value if the look up was successful; -1 otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartStripLineCollection.Add(Syncfusion.Chart.ChartStripLine)">
            <summary>
                Adds the specified strip line to this collection.
            </summary>
            <param name="stripLine" type="Syncfusion.Windows.Forms.Chart.ChartStripLine">
                <para>
                An instance of the strip line that is to be added to the collection.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartStripLineCollection.Insert(System.Int32,Syncfusion.Chart.ChartStripLine)">
            <summary>
                Inserts the specified strip line at the specified index value.
            </summary>
            <param name="index" type="int">
                <para>
                Index value where the instance of the specified strip line is to be inserted.
                </para>
            </param>
            <param name="stripLine" type="Syncfusion.Windows.Forms.Chart.ChartStripLine">
                <para>
               An instance of the stripline that is to be inserted at the specified index value.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartStripLineCollection.Remove(Syncfusion.Chart.ChartStripLine)">
            <summary>
                Removes the specified strip line from this collection.
            </summary>
            <param name="stripLine" type="Syncfusion.Windows.Forms.Chart.ChartStripLine">
                <para>
                 Strip line that is to be removed.
                </para>
            </param>
        </member>
        <member name="T:Syncfusion.Chart.TrendlineCollection">
            <summary>
            	Collection of TrendLines. A trend line is a  graph drawn to indicate the price value of comparisons.
            <seealso cref="!:CharttrendLine"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.TrendlineCollection.Item(System.Int32)">
            <summary>
            Returns the trend line stored in the specified index.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.TrendlineCollection.Changed">
            <summary>
                Event that is raised when this collection is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.TrendlineCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:TrendLineCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.TrendlineCollection.IndexOf(Syncfusion.Chart.Trendline)">
            <summary>
                Looks up the collection and returns the index value of the specified trend line.
            </summary>
            <param name="trendLine" type="Syncfusion.Windows.Forms.Chart.CharttrendLine">
                <para>
                An instance of the trend line that is to be looked up in the collection.
                </para>
            </param>
            <returns>
                The index value if the look up was successful; -1 otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.TrendlineCollection.Add(Syncfusion.Chart.Trendline)">
            <summary>
                Adds the specified trend line to this collection.
            </summary>
            <param name="trendLine" type="Syncfusion.Windows.Forms.Chart.CharttrendLine">
                <para>
                An instance of the trend line that is to be added to the collection.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.TrendlineCollection.Insert(System.Int32,Syncfusion.Chart.Trendline)">
            <summary>
                Inserts the specified trend line at the specified index value.
            </summary>
            <param name="index" type="int">
                <para>
                Index value where the instance of the specified trend line is to be inserted.
                </para>
            </param>
            <param name="trendLine" type="Syncfusion.Windows.Forms.Chart.TrendLine">
                <para>
               An instance of the trendline that is to be inserted at the specified index value.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.TrendlineCollection.Remove(Syncfusion.Chart.Trendline)">
            <summary>
                Removes the specified trend line from this collection.
            </summary>
            <param name="trendLine" type="Syncfusion.Windows.Forms.Chart.TrendLine">
                <para>
                 trend line that is to be removed.
                </para>
            </param>
        </member>
        <member name="T:Syncfusion.Chart.ChartArea">
            <summary>
            The ChartArea is the actual rendering area of the plot.
            It provides a canvas on which the chart is rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartArea.m_largeValueAxisLabelLength">
            <summary>
            Represent the chart value axis large label length.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartArea.m_largeValueAxisLabelFontSize">
            <summary>
            Represent the chart value axis large font size.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartArea.m_isAxisVisible">
            <summary>
            Represent the indicate wheather the chart axis has visible or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartArea.m_displayUnits">
            <summary>
            Represents display unit.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartArea.m_graphics">
            <summary>
            Represents the graphics object
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.IsAxisVisible">
            <summary>
            Get or set the indicate wheather the chart axis has visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.LargeValueAxisLabelLength">
            <summary>
            Get or set the chart value axis large label length.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.LargeValueAxisLabelFontSize">
            <summary>
            Get or set the chart value axis large font size.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.UpdateClientBounds">
            <summary>
            Gets a value indicating whether client bounds will be updated or not.
            </summary>
            <value>
            	<c>true</c> if skin style is set for border appearance, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.IsIndexed">
            <summary>
            Gets or sets a value indicating whether this instance is indexed.
            </summary>
            <value>
            	<c>true</c> if this instance is indexed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.IsAllowGap">
            <summary>
            Gets or sets a value indicating whether this instance is indexed with gap or not when empty points are used.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Chart">
            <summary>
            Owner of this chart area.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.BorderWidth">
            <summary>
            Gets or sets the border width of the ChartArea. Default is 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.BorderColor">
            <summary>
            Gets or sets the bordercolor of the ChartArea. Default is SystemColors.ControlText.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.BorderStyle">
            <summary>
            Gets or sets the style of the border that is to be rendered around the ChartArea. Default is None.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Width">
            <summary>
            Gets or sets the width of the rectangular area that is to be occupied by this ChartArea.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Height">
            <summary>
            Gets or sets the height of the rectangular area that is to be occupied by this ChartArea.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Top">
            <summary>
            Returns the y coordinate of the top edge of the rectangular area that is to be occupied by this ChartArea.     
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Right">
            <summary>
            Returns the x coordinate of the right edge of the rectangular area that is to be occupied by the ChartArea.   
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Left">
            <summary>
            Returns the x coordinate of the left edge of the rectangular area that is to be occupied by the ChartArea.   
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Bottom">
            <summary>
            Returns the y coordinate of the bottom edge of the rectangular area that is to be occupied by this ChartArea.   
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Bounds">
            <summary>
            Returns the bounds occupied by this ChartArea.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.ClientRectangle">
            <summary>
            Returns the Rectangle in client co-ordinates that is occupied by this ChartArea.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Size">
            <summary>
            Gets or sets the size of the rectangular area that is to be occupied by the ChartArea.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Location">
            <summary>
                Gets or sets the location of the rectangular area that is to be occupied by this ChartArea.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Radius">
            <summary>
            Returns the radius of the Radar chart occupied by this ChartArea.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.DivideArea">
            <summary>
            Gets or sets a value indicating whether area should be divided for each simple chart (Pie, Funnel...).
            </summary>
            <value><c>true</c> if area should be divided; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.MultiplePies">
            <summary>
            If set to true, multiple pie chart series will be rendered in the same chart area.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.ReDrawAxes">
            <summary>
            If set to true, Chart axes labels will be rendered each time chart updates.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Center">
            <summary>
            Returns the center point of this ChartArea.     
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.RenderGlobalBounds">
            <summary>
            Returns the global rectangular bounds used for rendering.  
            </summary>
            <value>The render global bounds.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.RenderBounds">
            <summary>
            Returns the actual rectangular bounds used for rendering.   
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.ChartAreaMargins">
            <summary>
            Returns the margins that will be deduced from the rectangular area that represents the ChartArea.
            Negative values are supported.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.OffsetX">
            <summary>
            Returns the X axis offset value that is to be used when rendering in 3D mode.   
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.OffsetY">
            <summary>
            Returns the Y axis offset value that is to be used when rendering in 3D mode.   
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Series3D">
            <summary>
            Indicates whether the ChartArea is to be rendered in 3D. Default value is false.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.RealSeries3D">
            <summary>
            Indicates whether the ChartArea is to be rendered in 3D. Default value is false.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Depth">
            <summary>
            Gets or sets the perception of depth that is to be used when the ChartArea is rendered in 3D. Default is 50.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Rotation">
            <summary>
            Gets or sets the rotational angle that is to be used when the ChartArea is rendered in 3D. Default is 30.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Tilt">
            <summary>
            Gets or sets the tilt that is to be used when the ChartArea is rendered in 3D. Default is 30.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Turn">
            <summary>
            Gets or sets the turn that is to be used when the ChartArea is rendered in real 3D only. Default is 0.0f.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.AutoScale">
            <summary>
            Gets or sets a value indicating whether area should scale automatically in 3D mode.
            </summary>
            <value>
            	<c>true</c> if area should scale automatically; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Scale3DCoeficient">
            <summary>
            Gets or sets a scale value in 3D mode.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Transform3D">
            <summary>
            Gets transformation for real 3d mode.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Settings3D">
            <summary>
            Gets the real 3D mode settings.
            </summary>
            <value>The real 3D mode settings.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.BackInterior">
            <summary>
            Gets or sets the background brush of the chart area.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.GridBackInterior">
            <summary>
            Gets or sets the grid back interior.
            </summary>
            <value>The grid back interior.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.BackImage">
            <summary>
            Gets or sets the image that is to be used as the background for this ChartArea.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.InteriorBackImage">
            <summary>
            Gets or sets the image that is to be used as the background for this ChartArea Interior.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.RequireAxes">
            <summary>
            Specifies whether the ChartArea requires axes to be rendered (for the Chart types being rendered).
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.LegacyAppearance">
            <summary>
            Specifies whether to change the appearance of chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.RequireInvertedAxes">
            <summary>
            Indicates whether Chart requires Inverted Axes
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Axes">
            <summary>
            Collection of axes associated with this chart. You can add and remove axes from this collection.
            Primary X and Y axes may not be removed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.AxisSpacing">
            <summary>
            Gets or sets the spacing between different axes on the same side of the ChartArea. This spacing is useful when you display multiple
            axes side by side.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.PrimaryXAxis">
            <summary>
            The primary X axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.PrimaryYAxis">
            <summary>
            The primary Y axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.MinSize">
            <summary>
            Gets or sets the minimum size of this ChartArea.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.ChartPlotAreaMargins">
            <summary>
            Returns the margins of ChartArea (excluding label width and height).
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.AdjustPlotAreaMargins">
            <summary>
            Gets or sets the mode of drawing the edge labels. Default is AutoSet.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.AxesInfoBar">
            <summary>
            Gets the information of axes bar representation.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.FullStackMax">
            <summary>
            Gets or sets the maximal value of full stracking charts.
            </summary>
            <value>The maximal value of full stracking charts.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.XAxesLayoutMode">
            <summary>
            Specifies the way in which multiple X-axes will be rendered. Default is Stacking.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.YAxesLayoutMode">
            <summary>
            Specifies the way in which multiple Y-axes will be rendered. Default is Stacking.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.XLayouts">
            <summary>
            Gets the X axes layouts.
            </summary>
            <value>The X axes layouts.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.YLayouts">
            <summary>
            Gets the Y axes layouts.
            </summary>
            <value>The Y axes layouts.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.NeedRedraw">
            <summary>
            Gets or sets the current Redraw flag state. If true, the ChartArea representation is out of date and needs to be refreshed.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.HidePartialLabels">
            <summary>
            Indicates whether partially visible axis labels are hidden.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.RotateCenter">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.VisibleAllPies">
            <summary>
            In a PieChart, if set to false, the legend will be displayed with one legend item for each slice in the Pie. Default is false.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.AxesSideBySide">
            <summary>
            Old (obsolete) property. Use XAxesLayoutMode and YAxesLayoutMode instead. 
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.TextRenderingHint">
            <summary>
            Gets or sets the quality of text rendering. Default is AntiAlias.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.BoundsByAxes">
            <summary>
            Indicates if <see cref="P:Syncfusion.Chart.ChartArea.RenderBounds"/> is calculated by including the label width and height of the axes. Default is true. 
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.Watermark">
            <summary>
            Gets the water mark information.
            </summary>
            <value>The water mark.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.ChartAreaToolTip">
            <summary>
            Gets or sets the ToolTip text associated with this ChartArea.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.CustomPoints">
            <summary>
            Collection of custom points that are to be rendered in this ChartArea. 
            Custom points can be added as markers at a specific location in the chart.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Chart.ChartCustomPointCollection"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.SeriesParameters">
            <summary>
            Gets the series rendering parameters.
            </summary>
            <value>The series parameters.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.DrawingMode">
            <summary>
            Gets the drawing mode.
            </summary>
            <value>The drawing mode.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.AxesType">
            <summary>
            Gets or sets the type of the axes.
            </summary>
            <value>The type of the axes.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.BackMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.BottomMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.TopMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.LeftMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.RightMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartArea.DisplayUnits">
            <summary>
            Represents display unit.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.#ctor(Syncfusion.Chart.IChartAreaHost)">
            <summary>
            ChartArea requires a host which implements <see cref="T:Syncfusion.Chart.IChartAreaHost"/>. Currently this is implemented
            only by the chart. However, it is possible that other controls that wish to aggregate the chart will implement this
            interface.    
            </summary>
            <param name="chart" type="Syncfusion.Windows.Forms.Chart.IChartAreaHost">
                <para>
                Host interface.   
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.Draw(Syncfusion.Chart.PaintEventArgs)">
            <summary>
            Method used to draw the Chart.
            </summary>
            <param name="e">Specifies flags that control the elements painting.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.GetSeriesBounds(Syncfusion.Chart.ChartSeries)">
            <summary>
            Gets the series bounds.
            </summary>
            <param name="series">The series.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.GetXAxis(Syncfusion.Chart.ChartSeries)">
            <summary>
            Returns the x axis associated with this chartseries.
            </summary>
            <param name="series">A ChartSeries whose ChartAxis we are interested in.</param>
            <returns>The corresponding ChartAxis.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.GetYAxis(Syncfusion.Chart.ChartSeries)">
            <summary>
            Returns the y axis associated with this chartseries.
            </summary>
            <param name="series">A ChartSeries whose ChartAxis we are interested in.</param>
            <returns>The corresponding ChartAxis.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.CalculateSizes(Syncfusion.Drawing.Rectangle,Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Arranges the <see cref="T:Syncfusion.Chart.ChartArea"/> elements.
            </summary>
            <param name="rect">The bounds of <see cref="T:Syncfusion.Chart.ChartArea"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.GetValueByPoint(Syncfusion.Drawing.Point)">
            <summary>
            Returns the chartpoint value at this real point (in client co-ordinates).
            </summary>
            <returns>The corresponding ChartPoint.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.GetPointByValue(Syncfusion.Chart.ChartPoint)">
            <summary>
            Gets the real point value at this chart point.
            </summary>
            <returns>The corresponding Point in client-coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.GetPointByValue(Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartPoint)">
            <summary>
            Gets the real point value at this chart point. Use this method when multiple axes are used in the chart
            </summary>
            <returns>The corresponding Point in client-coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.DisposeSeriesStyle">
            <summary>
            Method to dispose series style of chart area.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.ValueToPolarCoefficient(System.Double)">
            <summary>
            Converting value to polar coefficient
            </summary>
            <param name="value">The value is the count of chart label Index Values</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.ValueBasedOnAngle(System.Double)">
            <summary>
            Get the value based on the angle
            </summary>
            <param name="result">Value of the result from ValueToPolarCoefficient method.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.UpdatePlotareaWidth(Syncfusion.Drawing.RectangleF@)">
            <summary>
            Update the bar chart plotarea width.
            </summary>
            <param name="rec"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.UpdatePlotareaWidthForScatter(Syncfusion.Drawing.RectangleF@)">
            <summary>
            Update the scatter chart plotarea width to ensure that the last label of category axis is not cropped
            </summary>
            <param name="rec"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.CorrectionFrom(Syncfusion.Drawing.Point)">
            <summary>
            Transforms the specified point to the chart plane.
            </summary>
            <param name="pt"></param>
            <returns></returns>
            <remarks>
             Only for real 3D mode.
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.CorrectionFrom(Syncfusion.Drawing.PointF)">
            <summary>
            Transforms the specified point to the screen plane.
            </summary>
            <param name="pt"></param>
            <returns></returns>
            <remarks>
             Only for real 3D mode.
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.DoAppearanceChange">
            <summary>
            Change the default appearance of chart.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.CorrectionTo(Syncfusion.Drawing.Point)">
            <summary>
            Transforms the specified point to the screen plane.
            </summary>
            <param name="pt"></param>
            <returns></returns>
            <remarks>
             Only for real 3D mode.
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.CorrectionTo(Syncfusion.Drawing.PointF)">
            <summary>
            Transforms the specified point to the chart plane.
            </summary>
            <param name="pt"></param>
            <returns></returns>
            <remarks>
             Only for real 3D mode.
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.OnChangingRedraw(System.Object,System.EventArgs)">
            <summary>
            Called when is need to redraw the chart.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.GetFrontBoundByAxes">
            <summary>
            Gets the front bound by axes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.GetFrontBoundByAxes(System.Boolean)">
            <summary>
            Gets the front bound by axes.
            </summary>
            <param name="byAllAxes">if set to <c>true</c> [by all axes].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.GetAxesRect(Syncfusion.Chart.ChartAxis,Syncfusion.Chart.ChartAxis)">
            <summary>
            Returns the rectangle encompassing the specified axes.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.CalculateXZoomFactorAndZoomPosition(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Calculates zoomfactor and zoomposition for x axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartArea.CalculateYZoomFactorAndZoomPosition(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Calculates zoomfactor and zoomposition for y axis.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxesInfoBar">
            <summary>
            The ChartAxesInfoBar display the labels between the rectangular axes.
            </summary>
            <example>
            ChartArea.AxesInfoBar.Visible = true;
            ChartArea.AxesInfoBar.Text = "";
            ChartArea.AxesInfoBar.ShowBorder = true;
            </example>
        </member>
        <member name="E:Syncfusion.Chart.ChartAxesInfoBar.Changed">
            <summary>
            An event that is triggered when <see cref="!:Syncfusion.Windows.Forms.Chart.ChartAxesInfoBar"/> properties are changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxesInfoBar.Visible">
            <summary>
            Gets or sets value indicates that bar is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxesInfoBar.Text">
            <summary>
            Gets or sets text.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxesInfoBar.Font">
            <summary>
            Gets or sets <see cref="!:System.Drawing.Font"/> to customize the text appearance.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxesInfoBar.TextColor">
            <summary>
            Gets or sets color of text.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxesInfoBar.ShowBorder">
            <summary>
            Gets or sets value indicates that need to render border.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxesInfoBar.Border">
            <summary>
            Gets or sets <see cref="!:Syncfusion.Windows.Forms.Chart.LineInfo"/> of the border.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxesInfoBar.TextFormat">
            <summary>
            Gets or sets <see cref="!:System.Drawing.StringFormat"/> of the text to render.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartAxesInfoBar.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets grouping cell's text by its and row index.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxesInfoBar.#ctor">
            <summary>
            Creates instance of the ChartAxesInfoBar.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxesInfoBar.Draw(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartAxis,Syncfusion.Chart.ChartAxis)">
            <summary>
            Draws to the specified graphics.
            </summary>
            <param name="g">The graphics.</param>
            <param name="xAxis">The x axis.</param>
            <param name="yAxis">The y axis.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartAxesInfoBar.Draw(Syncfusion.Chart.Graphics3D,Syncfusion.Chart.ChartAxis,Syncfusion.Chart.ChartAxis)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="xAxis"></param>
            <param name="yAxis"></param>
        </member>
        <member name="T:Syncfusion.Chart.ChartImageBorder">
            <summary>
            Provides methods to drawing the border by images.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartImageBorder.Padding">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageBorder.#ctor(System.Resources.ResourceManager,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartImageBorder"/> class.
            </summary>
            <param name="resources">The resources.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageBorder.Draw(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.Color)">
            <summary>
            Draws the specified g.
            </summary>
            <param name="g">The g.</param>
            <param name="rect">The rect.</param>
            <param name="baseColor">Color of the base.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageBorder.Build(Syncfusion.Drawing.RectangleF)">
            <summary>
            Builds the specified rect.
            </summary>
            <param name="rect">The rect.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageBorder.GetRegion(Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the region.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageBorder.DrawImage(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.ImageAttributes)">
            <summary>
            Draws the image.
            </summary>
            <param name="g">The g.</param>
            <param name="srcRect">The SRC rect.</param>
            <param name="destRect">The dest rect.</param>
            <param name="attr">The attr.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageBorder.GetRecolorAttributes(Syncfusion.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageBorder.GetRegion(Syncfusion.Drawing.SkiaSharpHelper.Bitmap,Syncfusion.Drawing.Rectangle,Syncfusion.Drawing.Color)">
            <summary>
            Gets the region.
            </summary>
            <param name="bmp">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Bitmap"/>.</param>
            <param name="rect">The rect.</param>
            <param name="maskColor">Color of the mask.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageBorder.ParseRectangle(System.String)">
            <summary>
            Parses the rectangle.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartImageBorder.ParseColor(System.String)">
            <summary>
            Parses the color.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.LocationEventArgs">
            <summary>
            Represents the data of <see cref="T:Syncfusion.Chart.LocationEventHandler"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.LocationEventArgs.Location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Syncfusion.Chart.LocationEventArgs.Allowed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Chart.LocationEventArgs"/> is allowed.
            </summary>
            <value><c>true</c> if allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.Chart.LocationEventArgs.#ctor(Syncfusion.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.LocationEventArgs"/> class.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="T:Syncfusion.Chart.LocationEventHandler">
            <summary>
            Represents the the method that handles the <see cref="E:Syncfusion.Chart.ChartDockControl.LocationChanging"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartDockingFlags">
            <summary>
            Specifies behavior of <see cref="T:Syncfusion.Chart.IChartDockControl"/>
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDockingFlags.None">
            <summary>
            Element doesn't suppport docking or moving.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDockingFlags.Movable">
            <summary>
            Element suppports moving.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDockingFlags.Dockable">
            <summary>
            Element suppports docking.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDockingFlags.All">
            <summary>
            Element supports both behaviours.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartDockControl">
            <summary>
            That class that implements the basic functionality of <see cref="T:Syncfusion.Chart.IChartDockControl"/> interface.
            </summary>
            <remarks>
            This class can be used as the host for other controls.
            </remarks>
            <example>
            Button button1 = new Button();<p/>
            button1.Text = "Button";<p/>
            chartControl1.DockingManager.Add( new ChartDockControl( button1 ));
            </example>
            <seealso cref="T:Syncfusion.Chart.ChartDockingManager"/>	
        </member>
        <member name="F:Syncfusion.Chart.ChartDockControl.m_position">
            <summary>
            The dock position of element.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartDockControl.m_alignment">
            <summary>
            The alignment of element.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartDockControl.m_orientation">
            <summary>
            The orientation of element.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartDockControl.m_dockingFree">
            <summary>
            Indicates whether element should be docked.
            </summary>
            <exclude/>
        </member>
        <member name="E:Syncfusion.Chart.ChartDockControl.LocationChanging">
            <summary>
            An event that is triggered when Location is changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartDockControl.ChartDockChanged">
            <summary>
            An event that is triggered when Position is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartDockControl.ChartAlignmentChanged">
            <summary>
            An event that is triggered when Alignment is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockControl.IsVisible">
            <summary>
            Ensuring visibility of control
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.ChartDockControl.Position">
            <summary>
            Specifies the docking position of the control
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartDockControl.Alignment">
            <summary>
            Controls the alignment of the Docked Control inside the ChartArea
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartDockControl.Orientation">
            <summary>
            Specifies the orientation of the docked control  inside ChartArea
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartDockControl.DockingFree">
            <summary>
            Indicates if the control is docking free.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartDockControl.Behavior">
            <summary>
            Gets or sets the docking behaviour.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartDockControl"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockControl.#ctor(Syncfusion.Chart.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartDockControl"/> class.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockControl.Measure(Syncfusion.Drawing.SizeF)">
            <summary>
            Measure size of control.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockControl.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged"></see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockControl.Control_SizeChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SizeChanged event of the Control control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockControl.SetOrientationByPosition">
            <summary>
            Specifies the orientation of the dock control based on dock position.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockControl.RaiseChartDockChanged(System.EventArgs)">
            <summary>
            Event is raised when the docking position is changed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockControl.RaiseChartAlignmentChanged(System.EventArgs)">
            <summary>
            Event is raised when alignment is changed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockControl.CheckLocation(Syncfusion.Drawing.Point)">
            <summary>
            Checks the location.
            </summary>
            <param name="pt">The pt.</param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Chart.ChartWaterMarkOrder">
            <summary>
            Represents the watermark
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartWaterMarkOrder.Over">
            <summary>
            The watermark will be rendered over chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartWaterMarkOrder.Behind">
            <summary>
            The watermark will be rendered behind chart.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartWatermark">
            <summary>
            Represents the watermark properties.
            </summary>    
        </member>
        <member name="P:Syncfusion.Chart.ChartWatermark.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartWatermark.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartWatermark.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>The vertical alignment.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartWatermark.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>The horizontal alignment.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartWatermark.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartWatermark.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartWatermark.ImageSize">
            <summary>
            Gets or sets the size of the image.
            </summary>
            <value>The size of the image.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartWatermark.ZOrder">
            <summary>
            Gets or sets the depth order.
            </summary>
            <value>The depth order.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartWatermark.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>The margin.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartWatermark.Opacity">
            <summary>
            Gets or sets the opacity.
            </summary>
            <value>The opacity.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartWatermark.IsVisible">
            <summary>
            Gets a value indicating whether watermark is visible.
            </summary>
            <value>
            	<c>True</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.Chart.ChartWatermark.#ctor(Syncfusion.Chart.ChartArea)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartWatermark"/> class.
            </summary>
            <param name="chartArea">The chart area.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartLayoutMode">
            <summary>
            Specifies how the chart elements will be arranged.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLayoutMode.Stack">
            <summary>
            The elements will be stacked.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLayoutMode.Wrap">
            <summary>
            The elements will be wrapped.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartDockingManager">
            <summary>
            ChartDockingManager provides docking feature of chart elements (Legends, Titles, ToolBar...).
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartDockingManager.WrapLayouter">
            <summary>
            Implements the wraping of elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartDockingManager.WrapLayouter.Elements">
            <summary>
            Gets the elements.
            </summary>
            <value>The elements.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartDockingManager.WrapLayouter.Dimension">
            <summary>
            Gets or sets the dimension.
            </summary>
            <value>The dimension.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockingManager.WrapLayouter.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartDockingManager.WrapLayouter"/> class.
            </summary>
            <param name="isVertical">if set to <c>true</c> [is vertical].</param>
            <param name="spacing">The spacing.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockingManager.WrapLayouter.Measure(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Size)">
            <summary>
            Measures elements by the specified size.
            </summary>
            <param name="measureSize">The maximal size.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockingManager.WrapLayouter.Arrange(Syncfusion.Drawing.Rectangle)">
            <summary>
            Arranges elements by the specified rect.
            </summary>
            <param name="rect">The rect.</param>
        </member>
        <member name="E:Syncfusion.Chart.ChartDockingManager.SizeChanged">
            <summary>
            An event that is raised when the size of the docking manager is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartDockingManager.Spacing">
            <summary>
            Indicates space between chart elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartDockingManager.DockAlignment">
            <summary>
            If it's enable, user can set using mouse alignment for controls.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartDockingManager.Placement">
            <summary>
            Determines if the docked element is placed inside or outside the host.
            </summary>
            <value>The placement.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartDockingManager.LayoutMode">
            <summary>
            Gets or sets the layout mode.
            </summary>
            <value>The layout mode.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockingManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartDockingManager"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockingManager.#ctor(Syncfusion.Chart.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartDockingManager"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockingManager.Freeze">
            <summary>
            This method prevents manager from any processing and firing of events.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockingManager.Melt">
            <summary>
            This method restores the original state of manager (before freezing).
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockingManager.Add(Syncfusion.Chart.IChartDockControl)">
            <summary>
            Adds the specified control to the ChartDockingManager.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockingManager.Remove(Syncfusion.Chart.IChartDockControl)">
            <summary>
            Removes the specified control from the Docking manager.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockingManager.DoLayout(Syncfusion.Drawing.Rectangle,Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Returns the size of the specified rectangle.
            </summary>
            <param name="rect">The bounds of host element.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockingManager.Clear">
            <summary>
            Clears all dock controls.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockingManager.GetAllControls">
            <summary>
            Returns the controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDockingManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.IChartArea">
            <summary>
            The interface that the <see cref="T:Syncfusion.Chart.ChartArea"/> type implements.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.BorderColor">
            <summary>
            Gets or sets the border color of the rectangular area occupied by this ChartArea.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.Width">
            <summary>
            Gets or sets the width of the rectangular area occupied by this ChartArea.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.Height">
            <summary>
            Gets or sets the height of the rectangular area that is occupied by this ChartArea.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.Bounds">
            <summary>
            Returns the bounds associated with this ChartArea.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.ClientRectangle">
            <summary>
            Gets or sets the ClientRectangle associated with this ChartArea.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.OffsetX">
            <summary>
            Returns the X axis offset value used when rendering in 3D mode.   
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.OffsetY">
            <summary>
            Returns the Y axis offset value used when rendering in 3D mode.   
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.Size">
            <summary>
            Gets or sets the size of the rectangular area occupied by the ChartArea.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.Location">
            <summary>
            Gets or sets the location of the rectangular area occupied by this ChartArea.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.Series3D">
            <summary>
            Indicates if the ChartArea is to be rendered in 3D. Default value is false.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.RealSeries3D">
            <summary>
            Indicates if the ChartArea is to be rendered in 3D. Default value is false.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.Depth">
            <summary>
            Gets or sets the perception of depth that is to be used when the ChartArea is rendered in 3D.   
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.Rotation">
            <summary>
            Gets or sets the rotational angle that is to be used when the ChartArea is rendered in 3D.   
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.Tilt">
            <summary>
            Gets or sets the tilt that is to be used when the ChartArea is rendered in 3D.   
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.Turn">
            <summary>
            Gets or sets the turn that is to be used when the ChartArea is rendered in Real 3D only.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.AutoScale">
            <summary>
            Gets or sets a value indicating whether area should scale automatically in 3D mode.
            </summary>
            <value><c>true</c> if area should scale automatically; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.BackInterior">
            <summary>
            Gets or sets the color with which the ChartArea is to be filled initially before any rendering takes place.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.BackImage">
            <summary>
            Gets or sets the image that is to be used as the background for this ChartArea.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.DivideArea">
            <summary>
            If set to true, the legend will show the series text (for Pie Chart).
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.MultiplePies">
            <summary>
            If set to true, multiple pie chart series will be rendered in the same chart area.
            </summary>        
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.RequireAxes">
            <summary>
            Indicates if the ChartArea requires axes to be rendered (for the Chart types being rendered).
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.LegacyAppearance">
            <summary>
            Indicates to change the appearance of chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.RequireInvertedAxes">
            <summary>
            Indicates if Chart requires Inverted Axes.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.Axes">
            <summary>
            Collection of axes associated with this chart. You can add and remove axes from this collection.
            Primary X and Y axes may not be removed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.AxisSpacing">
            <summary>
            Gets or sets the spacing between different axes on the same side of the ChartArea. This spacing is useful when you display multiple
            axes side by side.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.PrimaryXAxis">
            <summary>
            The primary X axis of Chart.
            </summary>  
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.PrimaryYAxis">
            <summary>
            The primary Y axis of Chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.MinSize">
            <summary>
            Gets or sets the minimum size of this ChartArea.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.Scale3DCoeficient">
            <summary>
            Gets or sets a scale value in 3D mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.ChartAreaMargins">
            <summary>
            Returns the margins that will be deduced from the rectangular area that represents the ChartArea.
            Negative values are supported.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.Center">
            <summary>
            Returns the center point of this ChartArea.     
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.Radius">
            <summary>
            Returns the radius of the Radar chart occupied by this ChartArea.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.RenderBounds">
            <summary>
            Returns the actual rectangular bounds used for rendering.   
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.ChartPlotAreaMargins">
            <summary>
            Returns the margins of ChartArea (excluding label width and height).
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.AdjustPlotAreaMargins">
            <summary>
            Gets or sets the mode of drawing the edge labels.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.AxesInfoBar">
            <summary>
            Gets or sets the ChartAxesInfoBar which displays the labels between the rectangular axes.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.IChartArea.Draw(Syncfusion.Chart.PaintEventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.IChartArea.Draw(Syncfusion.Chart.PaintEventArgs,Syncfusion.Chart.ChartPaintFlags)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.IChartArea.CalculateSizes(Syncfusion.Drawing.Rectangle,Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <internalonly/>
            <summary>
            Calculates the size of ChartArea.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Syncfusion.Chart.IChartArea.GetValueByPoint(Syncfusion.Drawing.Point)">
            <summary>
            Returns the chartpoint value at this real point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartArea.GetPointByValue(Syncfusion.Chart.ChartPoint)">
            <summary>
            Gets the real point value at this chart point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartArea.CorrectionFrom(Syncfusion.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartArea.CorrectionFrom(Syncfusion.Drawing.PointF)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartArea.CorrectionTo(Syncfusion.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartArea.CorrectionTo(Syncfusion.Drawing.PointF)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.CustomPoints">
            <summary>
            Collection of custom points associated with this ChartArea. Custom points can be used to add labels to chart points.    
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Chart.ChartCustomPointCollection"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.IChartArea.GetXAxis(Syncfusion.Chart.ChartSeries)">
            <summary>
            Returns the x axis of associated with this chartseries.
            </summary>
            <param name="ser"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartArea.GetYAxis(Syncfusion.Chart.ChartSeries)">
            <summary>
            Returns the y axis associated with this chartseries.
            </summary>
            <param name="ser"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.Transform3D">
            <summary>
            Gets transformation for real 3d mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.FullStackMax">
            <summary>
            Gets or sets the maximal value of full stracking charts.
            </summary>
            <value>The maximal value of full stracking charts.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.Chart">
            <summary>
            Gets the chart.
            </summary>
            <value>The chart.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.XAxesLayoutMode">
            <summary>
            Gets or sets the X axes layout mode.
            </summary>
            <value>The X axes layout mode.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.YAxesLayoutMode">
            <summary>
            Gets or sets the Y axes layout mode.
            </summary>
            <value>The Y axes layout mode.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartArea.SeriesParameters">
            <summary>
            Gets the series rendering parameters.
            </summary>
            <value>The series parameters.</value>
        </member>
        <member name="T:Syncfusion.Chart.IChartAreaHost">
            <summary>
            
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.IChartAreaHost.Draw(Syncfusion.Drawing.Image)">
            <summary>
            
            </summary>
            <param name="img"></param>
        </member>
        <member name="M:Syncfusion.Chart.IChartAreaHost.Draw(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="sz"></param>
        </member>
        <member name="M:Syncfusion.Chart.IChartAreaHost.Draw(Syncfusion.Drawing.Image,Syncfusion.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <param name="sz"></param>
        </member>
        <member name="M:Syncfusion.Chart.IChartAreaHost.SaveImage(System.IO.Stream)">
            <summary>
            Saves the chart as an image in the specified format.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Syncfusion.Chart.IChartAreaHost.SeriesChanged(System.Object,Syncfusion.Chart.ChartSeriesCollectionChangedEventArgs)">
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.IChartAreaHost.GetChartArea">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.ColumnDrawMode">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.ColumnWidthMode">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.ColumnFixedWidth">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.CompatibleSeries">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.ElementsSpacing">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.Indexed">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.AllowGapForEmptyPoints">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.IndexValues">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.LegendPosition">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.Model">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.Radar">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.Bar">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.Polar">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.RadarStyle">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.RequireAxes">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.RequireInvertedAxes">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.Series">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.Series3D">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.Style3D">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.SmoothingMode">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.TextRenderingHint">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.Spacing">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.SpacingBetweenSeries">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.RealMode3D">
            <summary>
            Gets or sets a value indicating whether is real 3D mode.
            </summary>
            <value><c>true</c> if is real 3D mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.DropSeriesPoints">
            <summary>
            Gets or sets a value indicating whether [drop series points].
            </summary>
            <value><c>true</c> if [drop series points]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.ShowLegend">
            <summary>
            Gets or sets a value indicating whether legend is shown.
            </summary>
            <value><c>true</c> if legend is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.ChartInterior">
            <summary>
            Gets or sets the interior of axis grid.
            </summary>
            <value>The chart interior.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.BackInterior">
            <summary>
            Gets or sets the color with which the ChartArea is to be filled initially before any rendering takes place.
            </summary>List of chart regions.
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartAreaHost.ForeColor">
            <summary>
            Gets or sets the color of the fore.
            </summary>
            <value>The color of the fore.</value>
        </member>
        <member name="T:Syncfusion.Chart.IChartDockControl">
            <summary>
            Represents the properties and events required by the <see cref="T:Syncfusion.Chart.ChartDockingManager"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.IChartDockControl.LocationChanging">
            <summary>
            Event Raised when the Location of the Legend is changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.IChartDockControl.ChartDockChanged">
            <summary>
            Event Raised when the position of the Legend was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.IChartDockControl.ChartAlignmentChanged">
            <summary>
            Event Raised when the Alignment of the Legend was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.IChartDockControl.SizeChanged">
            <summary>
            Event Raised when the size of the Legend was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.IChartDockControl.LocationChanged">
            <summary>
            Event Raised when the location of the Legend was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.IChartDockControl.VisibleChanged">
            <summary>
            Event Raised when the Visible of the Legend was changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartDockControl.Position">
            <summary>
            Get and set the position of the Legend in chartControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartDockControl.Alignment">
            <summary>
            Get and set the Alignment of the Legend in chartControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartDockControl.Orientation">
            <summary>
            Get and set the Orientation of the Legend in chartControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartDockControl.Behavior">
            <summary>
            Get and set the docking as free.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartDockControl.Location">
            <summary>
            Get and set the Location of the Legend.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartDockControl.Size">
            <summary>
            Get and set the Size of the Legend. Its works when the FloatingAutosize property is false.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartDockControl.Visible">
            <summary>
            Get and set the Visibility of the Legend in chartControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartDockControl.Enabled">
            <summary>
            Gets or sets a value indicating whether the control can respond to user interaction.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.IChartDockControl.Measure(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.SizeF)">
            <summary>
            Measures the size of control.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartColorPalette">
            <summary>
            Pre-defined palettes for use with the ChartControl. Palettes are simply a group of colors that
            can be used to provide a better visual appearance when displaying multiple chart series.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.Default">
            <summary>
            Default palette.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.DefaultAlpha">
            <summary>
            Default palette with aplha.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.DefaultOld">
            <summary>
            Default palette used in older chart versions.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.DefaultOldAlpha">
            <summary>
            Default palette with alpha blending.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.EarthTone">
            <summary>
            Palette containing earth tone colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.Analog">
            <summary>
            Palette containing analog colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.Colorful">
            <summary>
            Colorful palette.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.Nature">
            <summary>
            Palette containing the colors of nature.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.Pastel">
            <summary>
            Palette containing pastel colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.Triad">
            <summary>
            Palette containing triad colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.WarmCold">
            <summary>
            Palette that contains mixed warm and cold colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.GrayScale">
            <summary>
            GrayScale color palette which can be used for monochrome printing.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.SkyBlueStyle">
            <summary>
            Palette that contains mixed SkyBlue and Violet colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.RedYellowStyle">
            <summary>
            Palette that contains mixed Red and yellow colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.GreenYellowStyle">
            <summary>
            Palette that contains mixed Green and yellow colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.PinkVioletStyle">
            <summary>
            Palette that contains pink Green and violet colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.Metro">
            <summary>
            Palette that contains Metro colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorPalette.Custom">
            <summary>
            Custom user assigned color palette.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartColorModel">
            <summary>
            The ChartColorModel class serves as a repository for color information. Color information is used by the chart to render colored series.
            A group of colors is referred to as a palette of colors. You have the option of choosing from several predefined palettes or creating your
            own color palette.
            <seealso cref="T:Syncfusion.Chart.ChartColorPalette"/>
            <seealso cref="P:Syncfusion.Chart.ChartColorModel.Palette"/>
            <seealso cref="P:Syncfusion.Chart.ChartColorModel.CustomColors"/>
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColorModel.NumColorsInPalette">
            <summary>
            The number of colors in the ChartColorModel's palette. If the number of series exceeds the number of colors in the palette (16 in the
            current version), colors will be repeated.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartColorModel.Changed">
            <summary>
            An event that is triggered when palette is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartColorModel.CustomColors">
            <summary>
                Gets or sets the table of custom colors to be used. Series will be colored with color data from this color table. Individual series
                color can still be overriden by specifying style attributes. Palette information is used only when no specific style information
                is available on the color to be used for the series.
                <seealso cref="T:Syncfusion.Chart.ChartColorModel"/>
                <seealso cref="P:Syncfusion.Chart.ChartColorModel.Palette"/>
            </summary>
            <value>The custom colors.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartColorModel.Palette">
            <summary>
                Gets or sets the color palette to be used. Series will be colored with color data from this palette (color table). Individual series
                color can still be overriden by specifying style attributes. Palette information is used only when no specific style information
                is available on the color to be used for the series.
                <seealso cref="T:Syncfusion.Chart.ChartColorModel"/>
                <seealso cref="P:Syncfusion.Chart.ChartColorModel.CustomColors"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartColorModel.AllowGradient">
            <summary>
            Gets or sets a value indicating whether [allow gradient].
            </summary>
            <value><c>True</c> if [allow gradient]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.#cctor">
            <summary>
            Initializes a new instance of <see cref="T:Syncfusion.Chart.ChartColorModel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartColorModel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.Dispose">
            <summary>
            Method to dispose Chart color model object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.GetColor(System.Int32)">
            <summary>
            Returns the color (from the palette) corresponding to the specified index value.
            </summary>
            <param name="index" type="int">
              <para>
            	The index value of the color to be returned.
              </para>
            </param>
            <returns>
                A System.Drawing.Color value that is used as the back color for the series.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.CreatePaletteIcon(Syncfusion.Drawing.Size,Syncfusion.Chart.ChartColorPalette,System.Int32)">
            <summary>
            Creates the palette icon.
            </summary>
            <param name="sz">The sz.</param>
            <param name="palette">The palette.</param>
            <param name="colorCount">The color count.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.InitializeSkyBlueStyle">
            <summary>
            Initializes the SkyBlue palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.InitializeRedYellowStyle">
            <summary>
            Initializes the Red-Yellow palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.InitializeGreenYellowStyle">
            <summary>
            Initializes the Green-Yellow palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.InitializePinkVioletStyle">
            <summary>
            Initializes the Pink-Violet palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.InitializeDefaultPalette">
            <summary>
            Initializes the default palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.InitializeDefaultAlphaPalette">
            <summary>
            Initializes the default alpha palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.InitializeDefaultOldAlphaPalette">
            <summary>
            Initializes the default old alpha palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.InitializeDefaultOldPalette">
            <summary>
            Initializes the default old palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.InitializeEarthTonePalette">
            <summary>
            Initializes the earth tone palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.InitializeAnalogPalette">
            <summary>
            Initializes the analog palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.InitializeColorfulPalette">
            <summary>
            Initializes the colorful palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.InitializeNaturePalette">
            <summary>
            Initializes the nature palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.InitializePastelPalette">
            <summary>
            Initializes the pastel palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.InitializeTriadPalette">
            <summary>
            Initializes the triad palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.InitializeWarmColdPalette">
            <summary>
            Initializes the warm cold palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.InitializeGrayScalePalette">
            <summary>
            Initializes the gray scale palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.InitializePalettes">
            <summary>
            Initializes the palettes.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.GetPalette(Syncfusion.Chart.ChartColorPalette)">
            <summary>
            Gets the palette.
            </summary>
            <param name="palette">The palette.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartColorModel.RaiseChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the Changed event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesChangedEventHandler">
            <summary>
            This event is raised by the <see cref="T:Syncfusion.Chart.ChartSeries"/> class when series class has changed.
            </summary>
            <param name="source" type="object">
                <para>
                Event source.
                </para>
            </param>
            <param name="args" type="Syncfusion.Windows.Forms.Chart.ChartDataChangedEventArgs">
                <para>
                Event arguments.
                </para>
            </param>
        </member>
        <member name="T:Syncfusion.Chart.IChartPointMinMax">
            <summary>
            This interface represents the minimum Y value, maximum Y value and the X value at any point in a series.
            This interface is used to compute summary information such as overall series minimum and maximum values for
            rendering the chart. In most cases, you have to simply loop through the Y values at an index and return the minimum
            and maximum values for that point.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartPointMinMax.X">
            <summary>
            Gets the X.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartPointMinMax.Min">
            <summary>
            Gets the min.
            </summary>
            <value>The min.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartPointMinMax.Max">
            <summary>
            Gets the max.
            </summary>
            <value>The max.</value>
        </member>
        <member name="M:Syncfusion.Chart.IChartPointMinMax.GetY(System.Int32,System.Int32)">
            <summary>
            Gets the Y.
            </summary>
            <param name="index">The index.</param>
            <param name="yIndex">Index of the y.</param>
            <returns>Returns the Y value.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointMinMax.Max">
            <summary>
            Gets the maximum value.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointMinMax.Min">
            <summary>
            Gets the minimaum value.
            </summary>
            <value>The minimaum value.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointMinMax.X">
            <summary>
            Gets the X Value.
            </summary>
            <value>The X Value.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartMinMaxEvaluator.CalcMin(System.Double[])">
            <summary>
            Calculates the minimum value.
            </summary>
            <param name="values">The values.</param>
            <returns>Returns the minimum value.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMinMaxEvaluator.CalcMax(System.Double[])">
            <summary>
            Calculates  the maximum value.
            </summary>
            <param name="values">The values.</param>
            <returns>Returns the maximum value.</returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartModel">
            <summary>
            The ChartModel object acts as the central repository of data associated with and displayed by a ChartControl.
            There are three parts to the ChartModel. The first part is the <see cref="T:Syncfusion.Chart.ChartSeriesCollection"/> instance that is held in the model.
            This collection holds all the <see cref="T:Syncfusion.Chart.ChartSeries"/> instances that are registered with and displayed by the Chart. The Chart Model also
            holds a <see cref="T:Syncfusion.Chart.ChartBaseStylesMap"/> instance. This collection maintains a collection of base styles that are registered with it.
            These base styles can be accessed and changed using this collection. Any changes made to base styles will automatically affect all style
            objects that depend on these base styles. Also, in the model is a <see cref="T:Syncfusion.Chart.ChartColorModel"/> instance that provides access to several default
            color palettes for use by the ChartControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartModel.ColorModel">
            <summary>
            Returns the <see cref="T:Syncfusion.Chart.ChartColorModel"/> associated with this model.
            </summary>
            <value>The color model.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartModel.Series">
            <summary>
            Collection of <see cref="T:Syncfusion.Chart.ChartSeries"/> objects. Each series represents an underlying <see cref="T:Syncfusion.Chart.IChartSeriesModel"/>.
            </summary>
            <value>The series.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartModel.IndexedValues">
            <summary>
            Gets the indexed values.
            </summary>
            <value>The indexed values.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartModel.Chart">
            <summary>
            Gets the chart.
            </summary>
            <value>The chart.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartModel.FirstSeries">
            <summary>
            Gets the first series.
            </summary>
            <value>The first series.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartModel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartModel.SetChart(Syncfusion.Chart.IChartAreaHost)">
            <summary>
            Sets the chart.
            </summary>
            <param name="chartHost">The chart host.</param>        
        </member>
        <member name="M:Syncfusion.Chart.ChartModel.CheckSeriesCompatibility(Syncfusion.Chart.ChartArea,System.Boolean)">
            <summary>
            Checks the series compatibility.
            </summary>
            <param name="chartArea">The chart area.</param>
            <param name="invertedSeriesIsCompatible">If set to <c>true</c> inverted series is compatible.</param>
            <returns>Returns whether inverted series is compatible or not.</returns>        
        </member>
        <member name="M:Syncfusion.Chart.ChartModel.Refresh(Syncfusion.Chart.ChartArea)">
            <summary>
            Updates the Line series while button click and refresh the model.
            </summary>
            <param name="area">The area.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartModel.UpdateArea(Syncfusion.Chart.ChartArea)">
            <summary>
            Updates the axes of chart area.
            </summary>
            <param name="area">The area.</param>        
        </member>
        <member name="M:Syncfusion.Chart.ChartModel.GetStylesMap">
            <summary>
            Returns the <see cref="T:Syncfusion.Chart.ChartBaseStylesMap"/> associated with this model.
            </summary>
            <returns>Return ChartBaseStylesMap.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartModel.Dispose">
            <summary>
            Method to dispose ChartModel objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartModel.OnSeriesChanged(System.Object,Syncfusion.Chart.ChartSeriesCollectionChangedEventArgs)">
            <summary>
            Called when series is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="!:Syncfusion.Windows.Forms.Chart.ChartSeriesCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartModel.GetStackInfo(Syncfusion.Chart.IChartArea,Syncfusion.Chart.ChartSeries,System.Int32,System.Boolean)">
            <summary>
            This method is used when series are rendered stacked. The value returned is a cumulative value of
            Y from all series that are below the series passed in in the contained <see cref="T:Syncfusion.Chart.ChartSeriesCollection"/>.
            <seealso cref="T:Syncfusion.Chart.ChartSeriesRenderer"/>
            </summary>
            <param name="chartArea">The <see cref="T:Syncfusion.Chart.ChartArea"/>.</param>
            <param name="series">Instance of the ChartSeries.</param>
            <param name="pointIndex">The index value of the point.</param>
            <param name="isWithMe">If true the value form this series added too.</param>
            <returns>
            A sum of Y values from all series are below the series.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartModel.GetSideBySideInfo(Syncfusion.Chart.IChartArea,Syncfusion.Chart.ChartSeries)">
            <summary>
            Gets the side by side info.
            </summary>
            <param name="chartArea">The chart area.</param>
            <param name="series">The series.</param>
            <returns>Returns the DoubleRange value.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartModel.GetSideBySideInfo(Syncfusion.Chart.IChartArea,Syncfusion.Chart.ChartSeries,System.Double)">
            <summary>
            Gets the side by side info.
            </summary>
            <param name="chartArea">The chart area.</param>
            <param name="series">The series.</param>
            <param name="seriesWidth">The seriesWidth.</param>
            <returns>Returns the DoubleRange.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartModel.GetMinPointsDelta(Syncfusion.Chart.IChartArea)">
            <summary>
            Gets the minimal points delta.
            </summary>
            <param name="chartArea">The chart area.</param>
            <returns></returns>
            <value>The min points delta.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartModel.GetSideBySidePositions(Syncfusion.Chart.ChartSeries,System.Int32@,System.Int32@)">
            <summary>
            Returns the value of side by side displacement.
            </summary>
            <param name="current">The current.</param>
            <param name="all">A sum of all sides.</param>
            <param name="pos">Position of side of a series.</param>
        </member>
        <member name="P:Syncfusion.Chart.IChartPointCore.X">
            <summary>
            Gets or sets the X value.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartPointCore.Y">
            <summary>
            Gets or sets the Y value.
            </summary>
            <value>The Y value.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartPointCore.IsEmpty">
            <summary>
            Gets or sets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartCategoryPointCore.Category">
            <summary>
            Gets or sets the Category value.
            </summary>
            <value>The Category.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointDataCore.#ctor(Syncfusion.Chart.IChartSeriesModel,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPointDataCore"/> class.
            </summary>
            <param name="ds">The ds.</param>
            <param name="xIndex">Index of the x.</param>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointDataCore.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointDataCore.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>The Y.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointDataCore.IsEmpty">
            <summary>
            Gets or sets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointDataCore.YDates">
            <summary>
            Gets or sets the Y dates.
            </summary>
            <value>The Y dates.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointDataCore.IsEditableData">
            <summary>
            Determines whether data is editable.
            </summary>
            <returns>
            	<c>true</c> if data is editable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointDataCore.GetEditableData">
            <summary>
            Gets the editable data.
            </summary>
            <returns> Returns IEditableChartSeriesModel.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointContainedCore.#ctor(System.Double,System.Double[])">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointContainedCore.X">
            <summary>
            Gets or sets the X value.
            </summary>
            <value>The X value.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointContainedCore.GetY(System.Int32)">
            <summary>
            Gets the Y value.
            </summary>
            <param name="yIndex">Index of the y value.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointContainedCore.Y">
            <summary>
            Gets or sets the Y value.
            </summary>
            <value>The Y value.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointContainedCore.IsEmpty">
            <summary>
            Gets or sets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Chart.ChartPoint">
            <summary>
            This class provides an easy interface to interact with the underlying data points contained in the <see cref="T:Syncfusion.Chart.IChartSeriesModel"/> associated
            with the <see cref="T:Syncfusion.Chart.ChartSeries"/> that contains this data. Even though you are interacting with a friendly object model, the ChartPoint
            itself stores no data. It simply delegates to the underlying model that the ChartSeries is displaying.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPoint.Empty">
            <summary>
             Signifies the empty point.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPoint.GetYValuesAsDateTime">
            <summary>
            Returns Y values associated with this point as DateTime values.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPoint.DateX">
            <summary>
            Gets or sets the X value associated with this point as a DateTime value.
            </summary>
            <value>The date X.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPoint.X">
            <summary>
            Gets or sets the X value associated with this point.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPoint.YValues">
            <summary>
            Gets or sets the Y values associated with this point.
            </summary>
            <value>The Y values.</value>                
        </member>
        <member name="P:Syncfusion.Chart.ChartPoint.IsEmpty">
            <summary>
            Indicates whether this point should be plotted.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPoint.Category">
            <summary>
            Gets or sets the Category values associated with this point.
            </summary>
            <value>The Category values.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPoint"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPoint.#ctor(System.Double,System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPoint"/> class.
            </summary>
            <param name="x" type="double">
                <para>
                X value of this ChartPoint.
                </para>
            </param>
            <param name="y" type="double[]">
                <para>
                Y values pertaining to this ChartPoint. More than one Y value can be associated with a ChartPoint.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPoint.#ctor(System.Double,System.Double[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPoint"/> class.
            </summary>
            <param name="x" type="double">
                <para>
                X value of this ChartPoint.
                </para>
            </param>
            <param name="y" type="double[]">
                <para>
                Y values pertaining to this ChartPoint. More than one Y value can be associated with a ChartPoint.
                </para>
            </param>
            <param name="category" type="string">
                <para>
               Category value of this ChartPoint.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPoint"/> class. Used when working with ChartPoints that have
            only one Y value.
            </summary>
            <param name="x" type="double">
                <para>
                X value of this ChartPoint.
                </para>
            </param>
            <param name="y" type="double">
                <para>
                Y value of this ChartPoint.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPoint.#ctor(System.Double,System.DateTime[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPoint"/> class. Used when working with ChartPoints that have
            DateTime Y values.
            </summary>
            <param name="x" type="double">
                <para>
                X value of this ChartPoint.
                </para>
            </param>
            <param name="dates" type="DateTime[]">
                <para>
                DateTime Y values of this ChartPoint.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPoint.#ctor(System.Double,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPoint"/> class. Used when working with ChartPoints that have a single
            associated DateTime Y value.
            </summary>
            <param name="x" type="double">
                <para>
                X value of this ChartPoint.
                </para>
            </param>
            <param name="date" type="DateTime">
                <para>
                DateTime Y value pertaining to this ChartPoint.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPoint.#ctor(System.DateTime,System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPoint"/> class. Used when working with ChartPoints that have
            a DateTime X value.
            </summary>
            <param name="date" type="DateTime">
                <para>
                DateTime X value of this ChartPoint.
                </para>
            </param>
            <param name="yValues" type="double[]">
                <para>
                Y values of this ChartPoint.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPoint.#ctor(System.DateTime,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPoint"/> class. Used when working with ChartPoints that have
            a DateTime X value.
            </summary>
            <param name="date" type="DateTime">
                <para>
                DateTime X value of this ChartPoint.
                </para>
            </param>
            <param name="y" type="double">
                <para>
                Y value of this ChartPoint.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPoint.#ctor(Syncfusion.Chart.IChartSeriesModel,System.Int32,Syncfusion.Chart.IChartSeriesCategory)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPoint"/> class.
            </summary>
            <param name="ds">The IChartSeriesModel argument.</param>
            <param name="xIndex">Index of the x.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPoint.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPoint.IsVisible">
            <summary>
            Returns true if point is visible; otherwise false
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPoint.HasNAN(System.Double[])">
            <summary>
            Returns true if the double array contains NaN value
            </summary>
            <param name="yValues"></param>
        </member>
        <member name="T:Syncfusion.Chart.ChartPointWithIndex">
            <summary>
            Contains chart point and index of point.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointWithIndex.Point">
            <summary>
            Specifies the ChartPoint.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointWithIndex.Index">
            <summary>
            Specifies the index of the ChartPoint.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointWithIndex.#ctor(Syncfusion.Chart.ChartPoint,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPointWithIndex"/> class.
            </summary>
            <param name="point">The point.</param>
            <param name="index">The index of point.</param>
        </member>
        <member name="T:Syncfusion.Chart.ComparerPointWithIndexByX">
            <summary>
            Provides the method to compare the <see cref="T:Syncfusion.Chart.ChartPointWithIndex"/> by the X value.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ComparerPointWithIndexByX.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ComparerPointWithIndexByX"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ComparerPointWithIndexByX.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:Syncfusion.Chart.ComparerPointWithIndexByY">
            <summary>
            Provides the method to compare the <see cref="T:Syncfusion.Chart.ChartPointWithIndex"/> by the first Y value.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ComparerPointWithIndexByY.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ComparerPointWithIndexByY"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ComparerPointWithIndexByY.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:Syncfusion.Chart.ChartPointIndexer">
            <summary>
            Represents the wrapper for <see cref="T:Syncfusion.Chart.IChartSeriesModel"/> that implements the <see cref="T:System.Collections.IList"/>.
            </summary>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Chart.ChartPointIndexer.ChartPointEnumerator">
            <summary>
            Represents the enumerator for <see cref="T:Syncfusion.Chart.ChartPointIndexer"/>.
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointIndexer.ChartPointEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.ChartPointEnumerator.#ctor(Syncfusion.Chart.IChartSeriesModel)">
            <summary>
            Initializes a new instance of the ChartPointEnumerator class. 
            </summary>
            <param name="chartSeriesModel">Instance of IChartSeriesModel.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.ChartPointEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.  
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.ChartPointEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection. 
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointIndexer.SeriesModel">
            <summary>
            Gets or sets the series model.
            </summary>
            <value>The series model.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointIndexer.SeriesCategoryModel">
            <summary>
            Gets or sets the series category model.
            </summary>
            <value>The series category model.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointIndexer.Item(System.Int32)">
            <summary>
            Gets the <see cref="!:Syncfusion.Windows.Forms.Chart.ChartPoint"/> with the specified x index.
            </summary>
            <value></value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointIndexer.Count">
            <summary>
            Gets count of points in the series.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointIndexer.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPointIndexer"/> class.
            </summary>
            <param name="series">The series.</param>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.#ctor(Syncfusion.Chart.IChartSeriesModel,Syncfusion.Chart.IChartSeriesCategory)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPointIndexer"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.Add(System.Double,System.Double[],System.Boolean)">
            <summary>
            Adds a point to the series
            </summary>
            <param name="x">X value of point</param>
            <param name="yValues">Y values of point</param>
            <param name="isEmpty">if set to <c>true</c> points is empty.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.Add(System.Double,System.Double[])">
            <summary>
            Adds a point to the series
            </summary>
            <param name="x">X value of point</param>
            <param name="yValues">Y values of point</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.Add(System.Double,System.Double)">
            <summary>
            Adds a point to the series
            </summary>
            <param name="x">X value of point</param>
            <param name="y">Y value of point</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.Add(System.String,System.Double)">
            <summary>
            Adds a point to the series
            </summary>
            <param name="x">X value of point</param>
            <param name="y">Y value of point</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.Add(System.String,System.Double[])">
            <summary>
            Adds a point to the series
            </summary>
            <param name="x">X value of point</param>
            <param name="yValues">Y values of point</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.Add(System.Double,System.DateTime[])">
            <summary>
            Adds a point to the series
            </summary>
            <param name="x">X value of point</param>
            <param name="dates">Y dates of point</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.Add(System.Double,System.DateTime)">
            <summary>
            Adds a point to the series
            </summary>
            <param name="x">X value of point</param>
            <param name="date">Y date of point</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.Add(Syncfusion.Chart.ChartPoint)">
            <summary>
            Adds a point to the series
            </summary>
            <param name="cp">Instance of ChartPoint</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.Add(System.DateTime,System.Double[])">
            <summary>
            Adds a point to the series
            </summary>
            <param name="date">X date of point</param>
            <param name="yValues">Y values of point</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.Add(System.DateTime,System.Double)">
            <summary>
            Adds a point to the series
            </summary>
            <param name="date">X date of point</param>
            <param name="y">Y value of point</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.Clear">
            <summary>
            Removes all points from the series.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.Insert(System.Int32,Syncfusion.Chart.ChartPoint)">
            <summary>
            Inserts a point to the series at the specified index. 
            </summary>
            <param name="xIndex">Index of a point</param>
            <param name="cp">Instance of ChartPoint</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.Remove(Syncfusion.Chart.ChartPoint)">
            <summary>
            Removes the specified <see cref="T:Syncfusion.Chart.ChartPoint"/>.
            </summary>
            <param name="cp">The cp.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.Remove(System.Int32)">
            <summary>
            Removes a point from the series at the specified index. 
            </summary>
            <param name="xIndex">Index of a point</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.IndexOf(Syncfusion.Chart.ChartPoint)">
            <summary>
            Returns index of a point.
            </summary>
            <param name="cp">Instance of ChartPoint</param>
            <returns>The specified index of point.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.  
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"></see> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            true if the <see cref="T:System.Object"></see> is found in the <see cref="T:System.Collections.IList"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The index of value if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"></see> at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value">The <see cref="T:System.Object"></see> to insert into the <see cref="T:System.Collections.IList"></see>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException">value is null reference in the <see cref="T:System.Collections.IList"></see>.</exception>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointIndexer.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"></see> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Collections.IList"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointIndexer.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointIndexer.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointIndexer.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointIndexer.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartPrepareStyleInfoHandler">
            <summary>
            Delegate used by the <see cref="E:Syncfusion.Chart.ChartSeries.PrepareStyle"/> and <see cref="E:Syncfusion.Chart.ChartSeries.PrepareSeriesStyle"/> events.
            </summary>
            <param name="sender" type="object">
                <para>
                Sender.
                </para>
            </param>
            <param name="args" type="Syncfusion.Windows.Forms.Chart.ChartPrepareStyleInfoEventArgs">
                <para>
            	Argument.
                </para>
            </param>
        </member>
        <member name="T:Syncfusion.Chart.ChartPrepareStyleInfoEventArgs">
            <summary>
            This class is used as the argument by the <see cref="E:Syncfusion.Chart.ChartSeries.PrepareStyle"/> and <see cref="E:Syncfusion.Chart.ChartSeries.PrepareSeriesStyle"/> events.
            These events are raised when chart style information is about to be used for rendering. They provide a just-in-time hook for changing any
            attributes of the style object(<see cref="T:Syncfusion.Chart.ChartStyleInfo"/>) before it is used by the chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPrepareStyleInfoEventArgs.Handled">
            <summary>
            If the event raised has been completely handled by user code and no further processing is required, this flag should be set to
            True.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPrepareStyleInfoEventArgs.Index">
            <summary>
            Returns the position of the contained style in the series.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPrepareStyleInfoEventArgs.Style">
            <summary>
            Returns the style object that is to be used by the chart.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPrepareStyleInfoEventArgs.#ctor(Syncfusion.Chart.ChartStyleInfo,System.Int32)">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeries">
            <summary>
            ChartSeries acts as a wrapper around data that is to be displayed and styles that are associated with the data.
            The data that is to be displayed is contained in either <see cref="T:Syncfusion.Chart.IChartSeriesModel"/> or <see cref="T:Syncfusion.Chart.IEditableChartSeriesModel"/>
            implementation. The style to be used to display the points is stored in a contained implementation of <see cref="T:Syncfusion.Chart.IChartSeriesStylesModel"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_model">
            <internalonly/>
            <exclude/>       
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_indexedModelAdapter">
            <internalonly/>
            <exclude/>         
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_name">
            <internalonly/>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_pointsIndexer">
            <internalonly/>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_prepareSeriesStyleInfoHandler">
            <internalonly/>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_prepareStyleInfoHandler">
            <internalonly/>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_seriesConfigCollection">
            <internalonly/>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_seriesModelAdapter">
            <internalonly/>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_seriesCategoryModelAdapter">
            <internalonly/>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_seriesModel">
            <internalonly/>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_seriesCategoryModel">
            <internalonly/>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_seriesStylesModel">
            <internalonly/>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_stylesIndexer">
            <internalonly/>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_text">
            <internalonly/>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_resetStyles">
            <summary>
            Gets or sets a value indicating whether reset all the styles while modifying the ChartPoint properties.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartSeries.AppearanceChanged">
            <internalonly/>
            <summary>
            Triggers when appearance of ChartSeries is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartSeries.DataChanged">
            <internalonly/>
        </member>
        <member name="E:Syncfusion.Chart.ChartSeries.PrepareSeriesStyle">
            <summary>
            When a series point is about to be rendered by the chart, it will raise this event and allow event subscribers to change the
            Series style used. You can handle this event to easily change style attributes based on external rules (for example).
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartSeries.PrepareStyle">
            <summary>
            When a series point is about to be rendered by the chart, it will raise this event and allow event subscribers to change the
            style used. You can handle this event to easily change style attributes based on external rules (for example).
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartSeries.SeriesChanged">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.Points">
            <summary>
            Collection of Data points. These data points only serve as a thin wrapper around the actual data contained in the 
            <see cref="T:Syncfusion.Chart.IChartSeriesModel"/> or <see cref="T:Syncfusion.Chart.IEditableChartSeriesModel"/>. You can add, remove and edit points
            in this collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.PointFormats">
            <summary>
            Gets the formats.
            </summary>
            <value>The formats.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.Name">
            <summary>
            Gets or sets the name of this series object. You can retrieve a series by its name from the <see cref="T:Syncfusion.Chart.ChartSeriesCollection"/> object in the
            <see cref="P:Syncfusion.Chart.ChartSeries.ChartModel"/> where it is stored.
            </summary>
            <remarks>
            The <see cref="P:Syncfusion.Chart.ChartSeries.ChartModel"/> can't contains several series with the same name.
            </remarks>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.Tag">
            <summary>
            Gets or sets the object that contains data about the series. 
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.Text">
            <summary>
            Gets /sets the text that is to be associated with this series. This is the text that will be displayed by default by the legend item associated with
            this series.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.ChartModel">
            <summary>
            Gets or sets the Chart's model.
            <seealso cref="P:Syncfusion.Chart.ChartSeries.ChartModel"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.SeriesIndexedModelImpl">
            <summary>
            The <see cref="T:Syncfusion.Chart.IChartSeriesIndexedModel"/> interface is a special interface that serves as a degraded special case of <see cref="T:Syncfusion.Chart.IChartSeriesModel"/>.
            The special case being situations where the X value is not needed. When you implement <see cref="T:Syncfusion.Chart.IChartSeriesIndexedModel"/> and set it to this property,
            the chart will internally create an adapter that implements <see cref="T:Syncfusion.Chart.IChartSeriesModel"/> and treat it as any other model.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.SeriesModel">
            <summary>
            Returns an instance of the <see cref="T:Syncfusion.Chart.IChartSeriesModel"/> underlying this series.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.CategoryModel">
            <summary>
            Returns an instance of the <see cref="!:ChartSeriesCategory"/> underlying this series.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.SeriesModelAdapter">
            <summary>
            Returns an instance of the <see cref="T:Syncfusion.Chart.IChartSeriesModel"/> underlying this series.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.SeriesCategoryModelAdapter">
            <summary>
            Returns an instance of the <see cref="!:ChartSeriesCategory"/> underlying this series.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.Summary">
            <summary>
            Provides access to summary information such as minimum / maximum values contained in this series at any given
            moment.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.XAxis">
            <summary>
            Gets or sets the X Axis instance against which this series will be plotted.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.ActualXAxis">
            <summary>
            Returns actual X axis, that values of series.Points[i].X are plotted on it.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.ActualYAxis">
            <summary>
            Returns actual Y axis, that values of series.Points[i].Yvalues are plotted on it.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.XType">
            <summary>
            Returns the X value type that is being rendered. Please refer to <see cref="T:Syncfusion.Chart.ChartValueType"/> for details on supported value types.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.YAxis">
            <summary>
            Gets or sets the Y Axis instance against which this series will be plotted.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.YType">
            <summary>
            Returns the Y value type that is being rendered. Please refer to <see cref="T:Syncfusion.Chart.ChartValueType"/> for details on supported value types.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.Resolution">
            <summary>     
            Based on the resolution the number of points drawn will be reduced for improving the performance.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.EnableStyles">
            <summary>
            If set to False, the rendering is faster with the following remarks:
            The points style is disabled, all points use series style.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.Style">
            <summary>
            Returns the style object associated with the series. Attributes that are applied to this style will change the appearance of the complete
            series.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.Styles">
            <summary>
            Returns the styles that represent rendering information for the individual points in the series. Each of these style objects can be manipulated to
            affect the formatting and display of individual points. Styles set to individual points take precedence over the style of the Series (<see cref="P:Syncfusion.Chart.ChartSeries.Style"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.StylesImpl">
            <summary>
            Gets or sets the object that implements <see cref="T:Syncfusion.Chart.IChartSeriesStylesModel"/>. This object stores styles in an optimized manner and
            provides them on demand. You can replace this object with your own implementation of this interface to meet specific performance
            needs. In most cases, you should just use the default styles model that is provided.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.BaseType">
            <summary>
            Gets the base type of the ChartSeries. The BaseType is used by the rendering code to check which of the pre-defined display patterns this series fits.
            <seealso cref="T:Syncfusion.Chart.ChartSeriesBaseType"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.BaseStackingType">
            <summary>
            Gets the base type of the ChartSeries. The BaseType is used by the rendering code to check which of the pre-defined display patterns this series fits.
            <seealso cref="T:Syncfusion.Chart.ChartSeriesBaseType"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.ConfigItems">
            <summary>
               Returns the Chart series configuration items.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.Renderer">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/>.
            </summary>
            <value>The renderer.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.RequireAxes">
            <summary>
            Indicates whether the currently set series type requires axes to be rendered. Currently set to False only for Pie charts.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.RequireInvertedAxes">
            <summary>
            Indicates whether the currently set series type requires axes to be inverted.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.OriginDependent">
            <summary>
            Gets a value indicating whether a series is dependent by <see cref="P:Syncfusion.Chart.ChartAxis.Origin"/>.
            </summary>
            <value><c>true</c> if a series is dependent by origin; otherwise, <c>false</c>.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.Type">
            <summary>
            Gets or sets the chart type that is to be rendered using this series. Please refer to <see cref="T:Syncfusion.Chart.ChartSeriesType"/> for a complete list and
            explanation of chart types.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.StackingGroup">
            <summary>
            Gets or sets a grouping name which is used to group the StackingSeries together.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.ZOrder">
            <summary>
            Gets or sets the ZOrder of the series. You can use this setting to control which series gets plotted first. The chart will sort
            by ZOrder before rendering.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.SeriesToolTipFormat">
            <summary>
            Gets or sets the format for tooltip
            "{0}" - series name
            "{1}" - series style tooltip
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.PointsToolTipFormat">
            <summary>
            Gets or sets the format for tooltip
            "{0}" - series name
            "{1}" - series style tooltip
            "{2}" - tooltip of point
            "{3}" - X value of point
            "{4}" and other - Y value of point
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.Visible">
            <summary>
            Indicates whether the series is to be plotted.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.BackColor">
            <summary>
            Refer <see cref="P:Syncfusion.Chart.IChartSeriesStylesHost.BackColor"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.Compatible">
            <summary>
            Indicates whether the series is compatible with other series added to the series collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.Trendlines">
            <summary>
            Returns the trendline
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.SortBy">
            <summary>
            Gets or sets the type of sorting used.
            </summary> 
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.SortOrder">
            <summary>
            Gets a value indicating whether sorting the axis value type direction by <see cref="P:Syncfusion.Chart.ChartAxis.Origin"/>.
            </summary>      
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.SortPoints">
            <summary>
            Gets or sets a value indicating whether points will be sorted.
            </summary>
            <value><c>true</c> if points will be sorted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.LegendItem">
            <summary>
            Returns the private instance of LegendItem class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.LegendName">
            <summary>
            Gets or sets value indicates the legend for representation of series.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.LegendItemUseSeriesStyle">
            <summary>
            Indicates whether the legend item should use the series style.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.ExplodedIndex">
            <summary>
            Gets or sets the index of the point that is to be exploded from the main display. In the current implementation, this property is used
            only by the pie chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.ExplodedAll">
            <summary>
            Explode all points . In the current implementation, this property is used
            only by the pie chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.ExplosionOffset">
            <summary>
            Gets or sets the offset value that is to be used when a point is to be exploded from the main display. Currently applies
            only to the Pie chart. Offset is taken in percentage terms.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.ReversalAmount">
            <summary>
            Gets or sets the reversal amount (Useful for Kagi chart,PointAndFigure chart and Renko chart)
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.ReversalIsPercent">
            <summary>
            Indicates if the Reversal amount is taken in percentage
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.HeightBox">
            <summary>
            Gets or sets height of the boxes in the financial chart types.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.OptimizePiePointPositions">
            <summary>
            Indicates if the pie points are optimized for position
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.ResetStyles">
            <summary>
            Gets or sets a value indicating whether reset all the styles while modifying the ChartPoint properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.Rotate">
            <summary>
            Indicates whether the ChartArea is to be rotated and rendered. Default value is false.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.DrawColumnSeparatingLines">
            <summary>
            The drawing of separating line between columns is controlled by this property.     
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.ShowTicks">
            <summary>
            Indicates if the Ticks should be shown (only for Pie charts)
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.ScatterConnectType">
            <summary>
            Specifies connect type of scatter chart
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.ScatterSplineTension">
            <summary>
            Gets or sets the tension required for the scatter spline chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.DrawSeriesNameInDepth">
            <summary>
            Indicates whether to draw series name at opposed position to origin, along x axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.SeriesNameOXAngle">
            <summary>
            Indicates rotation angle around x axis of series name string.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.SmartLabels">
            <summary>
            Specifies the behavior of the labels.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.SmartLabelsBorderWidth">
            <summary>
            Gets or sets the BorderWidth of the Smartlabels.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.SmartLabelsBorderColor">
            <summary>
            Gets or sets the BorderColor of the Smartlabels.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.DrawErrorBars">
            <summary>
            Error Bars are used to indicate a degree of uncertainity in the plotted data through a bar indicating an "error range". 
            The 2nd Y value of a <see cref="T:Syncfusion.Chart.ChartPoint"/> is used to indicate the error range. This is supported with Line, Bar and Column charts. 
            Also see <see cref="P:Syncfusion.Chart.ChartSeries.ErrorBarsSymbolShape"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.ErrorBarsSymbolShape">
            <summary>
            Specifies the symbol that should be used in error bars. Also see <see cref="P:Syncfusion.Chart.ChartSeries.DrawErrorBars"/> 
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.NumberOfHistogramIntervals">
            <summary>
            Gets or sets the number of Histogram intervals
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.ShowHistogramDataPoints">
            <summary>
            Indicates if the histogram data points should be shown
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.SeriesModelImpl">
            <summary>
            Gets or sets an instance of the <see cref="T:Syncfusion.Chart.IChartSeriesModel"/> underlying this series. Use this property to replace this instance with your own
            implementation. Use <see cref="P:Syncfusion.Chart.ChartSeries.SeriesModel"/> to access the model if you do not intend to replace it.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.DrawHistogramNormalDistribution">
            <summary>
            Indicates if the Histogram normal distribution should be drawn
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.GanttDrawMode">
            <summary>
            Specifies the drawing mode of Gantt chart
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.OpenCloseDrawMode">
            <summary>
            Indicates rotation angle around x axis of series name string.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.InSideRadius">
            <summary>
            Sets / Gets the doughnut coefficient of pie chart 
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.PriceUpColor">
            <summary>
            Gets or sets the price down color
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.PriceDownColor">
            <summary>
            Gets or sets the price up color
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_labelConvertor">
            <summary>
            Temporary Label converter object for individual labels changes
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_markerConvertor">
            <summary>
            Temporary Marker converetr object for individual markers changes
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_index">
            <summary>
            Represents the series index
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeries.m_serieType">
            <summary>
            Represents the series type
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.LabelConverterObject">
            <summary>
            Temporary Label converter object
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.MarkerConverterObject">
            <summary>
            Temporary Marker converter object
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.Index">
            <summary>
            Represents the series index
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeries.SerieType">
            <summary>
            Represents the series type
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeries.ShouldSerializePoints">
            <summary>
            Should the serialize points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeries.ShouldSerializeSeriesModel">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeries.ResetSeriesModel">
            <summary>
            Resets the ChartSeries model.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeries.#ctor">
            <summary>
            Initializes a new instance of the ChartSeries class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeries.#ctor(System.String,Syncfusion.Chart.ChartSeriesType)">
            <summary>
            Initializes a new instance of the ChartSeries class.
            </summary>
            <param name="name">An name of series. This value will be set to <see cref="P:Syncfusion.Chart.ChartSeries.Text"/> property too.</param>
            <param name="type">An type of series.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeries.DisposeChartSeries">
            <summary>
            Method to dispose ChartSeries object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeries.Dispose">
            <summary>
            Method to dispose ChartSeries object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeries.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ChartSeries class.
            </summary>
            <param name="name">An name of series. This value will be set to <see cref="P:Syncfusion.Chart.ChartSeries.Text"/> property too.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeries.UpdateSeriesModel(System.Object)">
            <summary>
            Updates the ChartSeries Model.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeries.UpdateCategoryModel(System.Object)">
            <summary>
            Updates the ChartSeries CategoryModel.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeries.GetOfflineStyle">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeries.GetOfflineStyle(System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeries.GetStylesMap">
            <summary>
            Refer <see cref="M:Syncfusion.Chart.IChartSeriesStylesHost.GetStylesMap"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeries.ResetLegend">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeries.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeries.AddAxis(Syncfusion.Chart.ChartAxis,System.Boolean)">
            <summary>
            Method to add or modify axis in a series without triggering axes changed event.
            Use this method for changing the horizontal or vertical axis of a series between begin and end update methods
            <param name="axis">Axis to be modified</param>
            <param name="horizontal">A boolean value representing the orientation of axis. True represents horizontal and false represents vertical axis</param>
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.EmptyPointValue.Zero">
            <summary>
            Not Implemented enum - based on values set zero
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.EmptyPointValue.Average">
            <summary>
            Not Implemented enum - based on values set average
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesCollectionChangedEventHandler">
             <summary>
             Delegate that is to be used with the <see cref="E:Syncfusion.Chart.ChartSeriesCollection.Changed"/> event.
             </summary>
             <param name="sender" type="object">
                 <para>
                 Sender.
                 </para>
             </param>
             <param name="e" type="Syncfusion.Windows.Forms.Chart.ChartSeriesCollectionChangedEventArgs">
                 <para>
                 Argument.
                 </para>
             </param>
             <remarks>
            
             </remarks>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesCollectionChangeType">
            <summary>
                The type of change that had occurred to the Chart series collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesCollectionChangeType.Added">
            <summary>
            Series has been added to the collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesCollectionChangeType.Inserted">
            <summary>
            Series has been inserted into the collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesCollectionChangeType.Removed">
            <summary>
            Series has been removed from the collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesCollectionChangeType.Changed">
            <summary>
            Series in the collection has been changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesCollectionChangeType.Reset">
            <summary>
            The collection has been reset.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesCollectionChangedEventArgs">
            <summary>
               Argument that is to be used with the <see cref="E:Syncfusion.Chart.ChartSeriesCollection.Changed"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesCollectionChangedEventArgs.ChangeType">
            <summary>
               Returns the type of change that had occurred in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesCollectionChangedEventArgs.Series">
            <summary>
            Gets the series.
            </summary>
            <value>The series.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollectionChangedEventArgs.#ctor(Syncfusion.Chart.ChartSeriesCollectionChangeType)">
            <summary>
                Constructor.
            </summary>
            <param name="changeType" type="Syncfusion.Windows.Forms.Chart.ChartSeriesCollectionChangeType">
                <para>
                The type of change that had occurred in the collection.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollectionChangedEventArgs.#ctor(Syncfusion.Chart.ChartSeriesCollectionChangeType,Syncfusion.Chart.ChartSeries)">
            <summary>
            Constructor.
            </summary>
            <param name="changeType">The type of change that had occurred in the collection.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollectionChangedEventArgs.CreateAddedEvent(Syncfusion.Chart.ChartSeries)">
            <summary>
            Creates the Added event arguments.
            </summary>
            <param name="series">The series.</param>
            <returns></returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollectionChangedEventArgs.CreateChangedEvent(Syncfusion.Chart.ChartSeries)">
            <summary>
            Creates the Changed event arguments.
            </summary>
            <param name="series">The series.</param>
            <returns></returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollectionChangedEventArgs.CreateRemovedEvent(Syncfusion.Chart.ChartSeries)">
            <summary>
            Creates the Removed event arguments.
            </summary>
            <param name="series">The series.</param>
            <returns></returns>		
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollectionChangedEventArgs.CreateResetEvent">
            <summary>
            Creates the Reset event arguments.
            </summary>		
            <returns>The new ChartSeriesCollectionChangedEventArgs instance</returns>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Chart.ComparerByZandY">
            <summary>
            Exposes a method that compares two <see cref="T:Syncfusion.Chart.ChartSeries"/> by Y values.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ComparerByZandY.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ComparerByZandY"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ComparerByZandY.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares the two <see cref="T:Syncfusion.Chart.ChartSeries"/>.
            </summary>
            <param name="x">The first <see cref="T:Syncfusion.Chart.ChartSeries"/> to compare.</param>
            <param name="y">The second <see cref="T:Syncfusion.Chart.ChartSeries"/> to compare.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesComparerByZOrder">
            <summary>
            Exposes a method that compares two <see cref="T:Syncfusion.Chart.ChartSeries"/> by <see cref="P:Syncfusion.Chart.ChartSeries.ZOrder"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesComparerByZOrder.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects.
            </summary>
            <param name="x">The first <see cref="T:Syncfusion.Chart.ChartSeries"/> to compare.</param>
            <param name="y">The second <see cref="T:Syncfusion.Chart.ChartSeries"/> to compare.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesCollection">
            <summary>
            <see cref="T:System.Collections.CollectionBase"/> derived class that holds instances of <see cref="T:Syncfusion.Chart.ChartSeries"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartSeriesCollection.Changed">
            <summary>
            Event that will be raised when this collection is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesCollection.ShouldSort">
            <summary>
            Indicates whether the series in this collection should be sorted.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesCollection.DisableStyles">
            <summary>
            Indicates whether the Series's EnableStyles Enable or Not.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesCollection.Sorted">
            <summary>
            Indicates whether this <see cref="T:Syncfusion.Chart.ChartSeriesCollection"/> is sorted.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesCollection.Item(System.Int32)">
            <summary>
            Overloaded. Returns the <see cref="T:Syncfusion.Chart.ChartSeries"/> object stored at the specified index.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesCollection.Item(System.String)">
            <summary>
            Returns the <see cref="T:Syncfusion.Chart.ChartSeries"/> object stored with the specified name.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesCollection.VisibleCount">
            <summary>
            Returns the number of visible series in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesCollection.VisibleList">
            <summary>
            Returns <see cref="T:System.Collections.IList"/> sorted/unsorted collection <see cref="T:Syncfusion.Chart.ChartSeries"/> objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesCollection.ShouldUpdate">
            <summary>
            Gets a value indicating whether should update collecation.
            </summary>
            <value><c>true</c> if should update; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.#ctor(Syncfusion.Chart.ChartModel)">
            <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSeriesCollection"/> class.
            </summary>
            <param name="chartModel" type="Syncfusion.Windows.Forms.Chart.ChartModel">
                <para>
                 Chart model associated with this collection.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.BeginUpdate">
            <summary>
            Call this method if you perform multiple changes in quick succession.
            </summary>
            <seealso cref="M:Syncfusion.Chart.ChartSeriesCollection.EndUpdate"/>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.EndUpdate">
            <summary>
            Call this method if you called <see cref="M:Syncfusion.Chart.ChartSeriesCollection.BeginUpdate"/> earlier and you are done with your changes.
            </summary>
            <seealso cref="M:Syncfusion.Chart.ChartSeriesCollection.BeginUpdate"/>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.Add(Syncfusion.Chart.ChartSeries)">
            <summary>
            Adds the specified <see cref="T:Syncfusion.Chart.ChartSeries"/> into this collection.
            </summary>
            <param name="series" type="Syncfusion.Windows.Forms.Chart.ChartSeries">
                <para>
            <see cref="T:Syncfusion.Chart.ChartSeries"/> An instance of the Chartseries that is to be added to this collection.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.IndexOf(Syncfusion.Chart.ChartSeries)">
            <summary>
            Call this method to retrieve the index value of the specified <see cref="T:Syncfusion.Chart.ChartSeries"/>.
            </summary>
            <param name="series" type="Syncfusion.Windows.Forms.Chart.ChartSeries">
                <para>
            	An instance of the <see cref="T:Syncfusion.Chart.ChartSeries"/> that is to be located.
                </para>
            </param>
            <returns>
                The index value of specified <see cref="T:Syncfusion.Chart.ChartSeries"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.Contains(Syncfusion.Chart.ChartSeries)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="series">The series.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.Insert(System.Int32,Syncfusion.Chart.ChartSeries)">
            <summary>
            Inserts the specified <see cref="T:Syncfusion.Chart.ChartSeries"/> to this collection at the specified index.
            </summary>
            <param name="index" type="int">
                <para>
            Index value where the insert is to be made.
                </para>
            </param>
            <param name="series" type="Syncfusion.Windows.Forms.Chart.ChartSeries">
                <para>
            An instance of the <see cref="T:Syncfusion.Chart.ChartSeries"/> that is to be inserted into this collection.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.Remove(Syncfusion.Chart.ChartSeries)">
            <summary>
            Removes the specified <see cref="T:Syncfusion.Chart.ChartSeries"/> from this collection.
            </summary>
            <param name="series" type="Syncfusion.Windows.Forms.Chart.ChartSeries">
                <para>
            <see cref="T:Syncfusion.Chart.ChartSeries"/> that is to be removed from this collection.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.ResetCache">
            <summary>
            Call this method to remove any temporarily cached style instances. You do not normally have to call this method.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.ResetCache(Syncfusion.Chart.ChartSeries)">
            <summary>
            Call this method to remove any temporarily cached style instances. You do not normally have to call this method.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts by the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/>. Only <see cref="T:Syncfusion.Chart.ComparerByZandY"/> is supported.</param>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.OnClear">
            <summary>
            Performs additional custom processes when clearing the contents of the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.OnClearComplete">
            <summary>
            Performs additional custom processes after clearing the contents of the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after inserting a new element into the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after removing an element from the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Called when [set complete].
            </summary>
            <param name="index">The index.</param>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.GetSeriesByVisible(System.Int32)">
            <summary>
            Returns the visible series with the specified index 
            </summary>
            <param name="index"></param>
            <returns></returns>		
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesCollection.RefreshVisibleList">
            <summary>
            Recalculates list of visible series, when some of the series are changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesChangedEventArgs">
            <summary>
            Provides data of <see cref="T:Syncfusion.Chart.ChartSeriesChangedEventHandler"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesChangedEventArgs.Type">
            <summary>
            Specifies the type of event that occurred.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesChangedEventArgs.Type.Reset">
            <summary>
            Specifies that the datasource was reset. All data is expected to have changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesChangedEventArgs.Type.Inserted">
            <summary>
            Specifies that data has been inserted.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesChangedEventArgs.Type.Removed">
            <summary>
            Specifies that data has been removed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesChangedEventArgs.Type.Changed">
            <summary>
            Specifies that data has been changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesChangedEventArgs.EventType">
            <summary>
            Returns the type of event that occurred.
            <seealso cref="T:Syncfusion.Chart.ChartSeriesChangedEventArgs.Type"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesChangedEventArgs.#ctor(Syncfusion.Chart.ChartSeriesChangedEventArgs.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSeriesChangedEventArgs"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesChangedEventArgs.FromListChangedEventArgs(System.ComponentModel.ListChangedEventArgs,Syncfusion.Chart.IChartSeriesModel)">
            <summary>
            Helper method that creates ChartDataChangedEventArgs from ListChangedEventArgs.
            </summary>
            <param name="args" type="System.ComponentModel.ListChangedEventArgs">
                <para>
                ListChangedEventArgs object; information that will be used to create the ChartDataChangedEventArgs object.
                </para>
            </param>
            <param name="chartData" type="Syncfusion.Windows.Forms.Chart.IChartSeriesModel">
                <para>
                Not used in the current version.
                </para>
            </param>
            <returns>
                A Syncfusion.Windows.Forms.Chart.ChartDataChangedEventArgs value.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesChangedEventArgs.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesChangedEventArgs.CreateResetEventArgs">
            <summary>
            Creates the reset event args.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesChangedEventArgs.CreateInsertEventArgs">
            <summary>
            Creates the insert event args.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesChangedEventArgs.CreateRemovedEventArgs">
            <summary>
            Creates the removed event args.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesChangedEventArgs.CreateChangedEventArgs">
            <summary>
            Creates the changed event args.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesIndexedModelAdapter">
            <summary>
            Provides the wrapper for <see cref="T:Syncfusion.Chart.IChartSeriesIndexedModel"/> that implements the <see cref="T:Syncfusion.Chart.IChartSeriesModel"/>.
            </summary>
            <internalonly/>
        </member>
        <member name="E:Syncfusion.Chart.ChartSeriesIndexedModelAdapter.Changed">
            <summary>
            Event that should be raised by any implementation of this interface if data that it holds changes. This will cause the
            chart to be updated accordingly.
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesIndexedModelAdapter.Inner">
            <summary>
            Gets the <see cref="T:Syncfusion.Chart.IChartSeriesIndexedModel"/>.
            </summary>
            <value>The <see cref="T:Syncfusion.Chart.IChartSeriesIndexedModel"/>.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesIndexedModelAdapter.Count">
            <summary>
            Returns the number of points in this series.
            </summary>
            <value></value>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesIndexedModelAdapter.#ctor(Syncfusion.Chart.IChartSeriesIndexedModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSeriesIndexedModelAdapter"/> class.
            </summary>
            <param name="model">The model.</param>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesIndexedModelAdapter.GetX(System.Int32)">
            <summary>
            Returns the X value of the series at the specified point index.
            </summary>
            <param name="xIndex">The index value of the point.</param>
            <returns>X value.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesIndexedModelAdapter.GetY(System.Int32)">
            <summary>
            Returns the Y value of the series at the specified point index.
            </summary>
            <param name="xIndex">The index value of the point.</param>
            <returns>Y value.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesIndexedModelAdapter.GetEmpty(System.Int32)">
            <summary>
            Indicates whether a plottable value is present at the specified point index.
            </summary>
            <param name="xIndex">The index value of the point.</param>
            <returns>
            True, if there is a value present at this point index; false otherwise.
            </returns>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesModel">
            <summary>
            This is the core data container implementation for a chart. This is a very simple model that stores data in the list inherited
            from the CollectionBase. It relies on the events raised by the CollectionBase base class to inform users of the changes that had occurred to the series.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSeriesModel"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesModel.SeriesEntity">
            <summary>
            Represents the data item of <see cref="T:Syncfusion.Chart.IChartSeriesModel"/>.
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesModel.SeriesEntity.X">
            <summary>
            Gets or sets the X value.
            </summary>
            <value>The X.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesModel.SeriesEntity.Y">
            <summary>
            Gets or sets the Y values.
            </summary>
            <value>The Y.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesModel.SeriesEntity.IsEmpty">
            <summary>
            Gets or sets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesModel.SeriesEntity.Category">
            <summary>
            Gets or sets the Category values.
            </summary>
            <value>The Category.</value>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.SeriesEntity.#ctor(System.Double,System.Double[])">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.SeriesEntity.#ctor(System.String)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.SeriesEntity.#ctor(System.Double,System.Double[],System.String)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.SeriesEntity.#ctor(System.Double,System.Double[],System.Boolean)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.SeriesEntity.#ctor(System.Double,System.Double[],System.Boolean,System.String)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.SeriesEntity.#ctor(System.Double,System.Double)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.SeriesEntity.#ctor(System.Double,System.Double,System.String)">
            <internalonly/>
        </member>
        <member name="E:Syncfusion.Chart.ChartSeriesModel.Changed">
            <summary>
            Please refer to <see cref="E:Syncfusion.Chart.IChartSeriesModel.Changed"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.GetX(System.Int32)">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IChartSeriesModel.GetX(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.GetY(System.Int32)">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IChartSeriesModel.GetY(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.GetEmpty(System.Int32)">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IChartSeriesModel.GetEmpty(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.GetCategory(System.Int32)">
            <summary>
            Please refer to <see cref="!:IChartSeriesModel.GetGategory"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.GetCategoryOrX(System.Int32)">
            <summary>
            Returns the X (double) and Category (string) based on the values.
            </summary>
            <param name="xIndex">index of the chart point</param>
            <returns>the X or categorry value</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.Add(System.Double,System.Double[])">
            <summary>
            Adds data to the end of the data representation.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.Add(System.Double,System.Double[],System.String)">
            <summary>
            Adds data to the end of the data representation.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.Add(System.Double,System.Double[],System.Boolean)">
            <summary>
            Adds data to the end of the data representation.
            </summary>
            <param name="x">The x.</param>
            <param name="yValues">The y values.</param>
            <param name="isEmpty">if set to <c>true</c> is empty.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.Add(System.Double,System.Double[],System.Boolean,System.String)">
            <summary>
            Adds data to the end of the data representation.
            </summary>
            <param name="x">The x.</param>
            <param name="yValues">The y values.</param>
            <param name="isEmpty">if set to <c>true</c> is empty.</param>
            <param name="category">The category values.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.Insert(System.Int32,System.Double,System.Double[])">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IEditableChartSeriesModel.Insert(System.Int32,System.Double,System.Double[])"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.Insert(System.Int32,System.Double,System.Double[],System.String)">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IEditableChartSeriesModel.Insert(System.Int32,System.Double,System.Double[])"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.SetX(System.Int32,System.Double)">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IEditableChartSeriesModel.SetX(System.Int32,System.Double)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.SetY(System.Int32,System.Double[])">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IEditableChartSeriesModel.SetY(System.Int32,System.Double[])"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.SetEmpty(System.Int32,System.Boolean)">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IEditableChartSeriesModel.SetEmpty(System.Int32,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.SetCategory(System.Int32,System.String)">
            <summary>
            Please refer to <see cref="!:IEditableChartSeriesModel.SetCategory"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.Remove(System.Int32)">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IEditableChartSeriesModel.Remove(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.OnClear">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.OnClearComplete">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.OnInsert(System.Int32,System.Object)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.OnInsertComplete(System.Int32,System.Object)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.OnRemove(System.Int32,System.Object)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.OnRemoveComplete(System.Int32,System.Object)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.OnSet(System.Int32,System.Object,System.Object)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.OnSetComplete(System.Int32,System.Object,System.Object)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.RaiseChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the Changed event.
            </summary>
            <param name="args">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModel.Add(System.String)">
            <summary>
            Adds data to the end of the data representation.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesModelAdapter">
            <summary>
            This class is the wrapper for <see cref="T:Syncfusion.Chart.ChartSeries"/>. 
            Implements the <see cref="T:Syncfusion.Chart.IEditableChartSeriesModel"/> and <see cref="T:Syncfusion.Chart.IChartSeriesModel"/> interfaces.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartSeriesModelAdapter.Changed">
            <summary>
            Please refer to <see cref="E:Syncfusion.Chart.IChartSeriesModel.Changed"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesModelAdapter.Count">
            <summary>
            Please refer to <see cref="P:Syncfusion.Chart.IChartSeriesModel.Count"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModelAdapter.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSeriesModelAdapter"/> class.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModelAdapter.GetX(System.Int32)">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IChartSeriesModel.GetX(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModelAdapter.GetY(System.Int32)">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IChartSeriesModel.GetY(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModelAdapter.GetEmpty(System.Int32)">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IChartSeriesModel.GetEmpty(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModelAdapter.GetCategory(System.Int32)">
            <summary>
            Gets the category model of ChartSeriesModel.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModelAdapter.Add(System.Double,System.Double[])">
            <summary>
            Adds data to the end of the data representation.
            </summary>
            <param name="x">The x.</param>
            <param name="yValues">The y values.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModelAdapter.Add(System.Double,System.Double[],System.Boolean)">
            <summary>
            Adds data to the end of the data representation.
            </summary>
            <param name="x">X value.</param>
            <param name="yValues">The y values.</param>
            <param name="isEmpty">if set to <c>true</c> point is empty.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModelAdapter.Insert(System.Int32,System.Double,System.Double[])">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IEditableChartSeriesModel.Insert(System.Int32,System.Double,System.Double[])"/>.
            </summary>
            <param name="xIndex">Index value where the insertion is to be made.</param>
            <param name="x">The X value.</param>
            <param name="yValues">The associated Y values.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModelAdapter.SetX(System.Int32,System.Double)">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IEditableChartSeriesModel.SetX(System.Int32,System.Double)"/>.
            </summary>
            <param name="xIndex">Index value where the data is to be changed.</param>
            <param name="value">New X value.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModelAdapter.SetY(System.Int32,System.Double[])">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IEditableChartSeriesModel.SetY(System.Int32,System.Double[])"/>.
            </summary>
            <param name="xIndex">Index value where data is to be changed.</param>
            <param name="yValues">New Y values.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModelAdapter.SetCategory(System.Int32,System.String)">
            <summary>
            Sets the CategoryData to ChartSeries.
            </summary>
            <param name="xIndex">Index value where data is to be changed.</param>
            <param name="category">New Y values.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModelAdapter.SetEmpty(System.Int32,System.Boolean)">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IEditableChartSeriesModel.SetEmpty(System.Int32,System.Boolean)"/>.
            </summary>
            <param name="xIndex">Index value where the empty state indicator is to be stored.</param>
            <param name="isEmpty">Empty state indicator.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModelAdapter.Remove(System.Int32)">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IEditableChartSeriesModel.Remove(System.Int32)"/>.
            </summary>
            <param name="xIndex">Index value where data is to be removed.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesModelAdapter.Clear">
            <summary>
            Please refer to <see cref="M:Syncfusion.Chart.IEditableChartSeriesModel.Clear"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartPredefinedValues">
            <summary>
            Contains predefined random values.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPredefinedValues.GetPoints(Syncfusion.Chart.ChartSeriesType,System.Int32)">
            <summary>
            Gets the points.
            </summary>
            <param name="type">The type.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPredefinedValues.GetSeriesCount(Syncfusion.Chart.ChartSeriesType)">
            <summary>
            Gets the series count.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPredefinedValues.ConvertYtoPoints(System.Double[][])">
            <summary>
            Converts the 1D array to 2D.
            </summary>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartPredefinedValues.ConvertXtoPoints(System.Double[])">
            <summary>
            Converts the xto points.
            </summary>
            <param name="xvalues">The xvalues.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartDummyPointsAdapter">
            <summary>
            Implements the <see cref="T:Syncfusion.Chart.IChartSeriesModel"/> interfaces. 
            If values is empty, it's return "dummy" values.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartDummyPointsAdapter.Count">
            <summary>
            Returns the number of points in this series.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.ChartDummyPointsAdapter.RandomPoints">
            <summary>
            
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartDummyPointsAdapter.Changed">
            <summary>
            Occurs when Model is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartDummyPointsAdapter.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartDummyPointsAdapter"/> class.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartDummyPointsAdapter.GetX(System.Int32)">
            <summary>
            Returns the X value of the series at the specified point index.
            </summary>
            <param name="xIndex">The index value of the point.</param>
            <returns>X value.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDummyPointsAdapter.GetY(System.Int32)">
            <summary>
            Returns the Y value of the series at the specified point index.
            </summary>
            <param name="xIndex">The index value of the point.</param>
            <returns>Y value.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDummyPointsAdapter.GetEmpty(System.Int32)">
            <summary>
            Indicates whether a plottable value is present at the specified point index.
            </summary>
            <param name="xIndex">The index value of the point.</param>
            <returns>
            True, if there is a value present at this point index; false otherwise.
            </returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesSummary">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesSummary.Coordinate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesSummary.Coordinate.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesSummary.Coordinate.Y">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesSummary.MaxX">
            <summary>
            Returns the maximum X value.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesSummary.MaxY">
            <summary>
            Returns the maximum Y value.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesSummary.MinX">
            <summary>
            Returns the minimum X value.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesSummary.MinY">
            <summary>
            Returns the minimum Y value.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesSummary.ModelImpl">
            <summary>
            </summary>
            <value></value>
            <internalonly/> 
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesSummary.GetYPercentage(System.Int32)">
            <summary>
            Gets the Y percentage.
            </summary>
            <param name="pointIndex">Index of the point.</param>
            <returns></returns>
            <remarks>Percentages computes for positive values only.</remarks>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesSummary.GetYPercentage(System.Int32,System.Int32)">
            <summary>
            Gets the Y percentage.
            </summary>
            <param name="pointIndex">Index of the point.</param>
            <param name="yIndex">Index of the y.</param>
            <returns></returns>
            <remarks>Percentages computes for positive values only.</remarks>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesSummary.FindValue(System.Double)">
            <summary>
            Finds point by specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesSummary.FindValue(System.Double,System.String)">
            <summary>
            Finds point by specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="useValue">The use value.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesSummary.FindValue(System.Double,System.String,System.Int32@)">
            <summary>
            Finds point by specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <param name="index">Index to start looking from. Returns index of found point or -1.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesSummary.FindValue(System.Double,System.String,System.Int32@,System.Int32)">
            <summary>
            Finds point by specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <param name="index">Index to start looking from. Returns index of found point or -1.</param>
            <param name="endIndex">The end index.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesSummary.FindMinValue">
            <summary>
            Finds point with minimal value.
            </summary>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesSummary.FindMinValue(System.String)">
            <summary>
            Finds point with minimal value.
            </summary>
            <param name="useValue">The use value.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesSummary.FindMinValue(System.String,System.Int32@)">
            <summary>
            Finds point with minimal value.
            </summary>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <param name="index">Index to start looking from. Returns index of found point or -1.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesSummary.FindMinValue(System.String,System.Int32@,System.Int32)">
            <summary>
            Finds point with minimal value.
            </summary>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <param name="index">Index to start looking from. Returns index of found point or -1.</param>
            <param name="endIndex">The index where the search is end.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesSummary.FindMaxValue">
            <summary>
            Finds point with maximal value.
            </summary>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesSummary.FindMaxValue(System.String)">
            <summary>
            Finds point with maximal value.
            </summary>
            <param name="useValue">The use value.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesSummary.FindMaxValue(System.String,System.Int32@)">
            <summary>
            Finds point with maximal value.
            </summary>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <param name="index">Index to start looking from. Returns index of found point or -1.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesSummary.FindMaxValue(System.String,System.Int32@,System.Int32)">
            <summary>
            Finds point with maximal value.
            </summary>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <param name="index">Index to start looking from. Returns index of found point or -1.</param>
            <param name="endIndex">The end Index.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesSummary.Refresh">
            <summary>
            Refreshes summary information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesSummary.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesCategory.GetY(System.Int32)">
            <summary>
            Returns the Y values of the series at the specified point index.
            </summary>
            <param name="xIndex">The index value of the point.</param>
            <returns>Y values at specified index.</returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesCategory.GetCategory(System.Int32)">
            <summary>
            Returns the Category value of the series at the specified point index.
            </summary>
            <param name="xIndex">The index value of the point.</param>
            <returns>Category value.</returns>
        </member>
        <member name="E:Syncfusion.Chart.IChartSeriesCategory.Changed">
            <summary>
            Event that should be raised by any implementation of this interface if data that it holds changes. This will cause the
            chart to be updated accordingly.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.IChartEditableCategory.SetCategory(System.Int32,System.String)">
            <summary>
            Changes the Category value of the data point at the specified index.
            </summary>
            <param name="xIndex">Index value where the data is to be changed.</param>
            <param name="value">New Category value.</param>
        </member>
        <member name="M:Syncfusion.Chart.IChartEditableCategory.Add(System.String)">
            <summary>
            Adds data to the end of the data representation.
            </summary>
            <param name="category">Category value.</param>       
        </member>
        <member name="M:Syncfusion.Chart.IUpdateModel.UpdateDataSource(System.Object)">
            <summary>
            Method to update the data source of ChartSeries. Trigger OnSeriesModelChanged event after updating the data source
            </summary>
            <param name="dataSource"></param>
        </member>
        <member name="T:Syncfusion.Chart.IChartSeriesModel">
            <summary>
            Interface that is to be implemented if you want ChartControl to be able to display your data. The default series store is a implementation of IChartSeriesModel. When you implement this interface,
            you can set it as the data underlying any <see cref="T:Syncfusion.Chart.ChartSeries"/> object using the <see cref="P:Syncfusion.Chart.ChartSeries.SeriesModelImpl"/>
            property.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartSeriesModel.Count">
            <summary>
            Returns the number of points in this series.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesModel.GetX(System.Int32)">
            <summary>
            Returns the X value of the series at the specified point index.
            </summary>
            <param name="xIndex">The index value of the point.</param>
            <returns>X value.</returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesModel.GetY(System.Int32)">
            <summary>
            Returns the Y value of the series at the specified point index.
            </summary>
            <param name="xIndex">The index value of the point.</param>
            <returns>Y value.</returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesModel.GetEmpty(System.Int32)">
            <summary>
            Indicates whether a plottable value is present at the specified point index.
            </summary>
            <param name="xIndex" type="int">
            The index value of the point.
            </param>
            <returns>
                True, if there is a value present at this point index; false otherwise.
            </returns>
        </member>
        <member name="E:Syncfusion.Chart.IChartSeriesModel.Changed">
            <summary>
            Event that should be raised by any implementation of this interface if data that it holds changes. This will cause the
            chart to be updated accordingly.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.IChartSeriesIndexedModel">
             <summary>
             Interface that is to be implemented if you want the ChartControl to be able to display your indexed data (X value is not needed). The ChartControl is totally agnostic
             about the data it displays. Even the default series store is an implementation of <see cref="T:Syncfusion.Chart.IChartSeriesModel"/>. When you implement this interface,
             you can set it as the data underlying any <see cref="T:Syncfusion.Chart.ChartSeries"/> object using the <see cref="P:Syncfusion.Chart.ChartSeries.SeriesIndexedModelImpl"/>. When you
             use this model for a series, you have to set ChartControl's Indexed property to be True.
            
             </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartSeriesIndexedModel.Count">
            <summary>
            Returns the number of points in this series.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesIndexedModel.GetY(System.Int32)">
            <summary>
            Returns the Y value of the series at the specified point index. Indexed series do not have an X value.
            </summary>
            <param name="xIndex">The index value of the point.</param>
            <returns>Y value.</returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesIndexedModel.GetEmpty(System.Int32)">
            <summary>
            Indicates whether a plottable value is present at the specified point index.
            </summary>
            <param name="xIndex" type="int">
            The index value of the point.
            </param>
            <returns>
                True, if there is a value present at the specified point index; false otherwise.
            </returns>
        </member>
        <member name="E:Syncfusion.Chart.IChartSeriesIndexedModel.Changed">
            <summary>
            Event that should be raised by any implementation of this interface if data that it holds changes. This will cause the
            chart to be updated accordingly.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.IChartSeriesSummary">
            <summary>
            Contains summary information for implementing a class. In the current version, this
            interface is implemented by the <see cref="T:Syncfusion.Chart.ChartAxis"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesSummary.Refresh">
            <summary>
            Refreshes summary information.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartSeriesSummary.MaxX">
            <summary>
            Returns the maximum X value.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.IChartSeriesSummary.MaxY">
            <summary>
            Returns the maximum Y value.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.IChartSeriesSummary.MinX">
            <summary>
            Returns the minimum X value.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.IChartSeriesSummary.MinY">
            <summary>
            Returns the minimum Y value.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesSummary.GetYPercentage(System.Int32)">
            <summary>
            Gets the Y percentage.
            </summary>
            <param name="pointIndex">Index of the point.</param>
            <returns></returns>
            <remarks>Percentages computes for positive values only.</remarks>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesSummary.GetYPercentage(System.Int32,System.Int32)">
            <summary>
            Gets the Y percentage.
            </summary>
            <param name="pointIndex">Index of the point.</param>
            <param name="yIndex">Index of the y.</param>
            <returns></returns>
            <remarks>Percentages computes for positive values only.</remarks>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesSummary.FindValue(System.Double)">
            <summary>
            Finds point by specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesSummary.FindValue(System.Double,System.String)">
            <summary>
            Finds point by specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="useValue">The use value.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesSummary.FindValue(System.Double,System.String,System.Int32@)">
            <summary>
            Finds point by specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <param name="index">Index to start looking from. Returns index of found point or -1.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesSummary.FindValue(System.Double,System.String,System.Int32@,System.Int32)">
            <summary>
            Finds point by specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <param name="index">Index to start looking from. Returns index of found point or -1.</param>
            <param name="endIndex">The Index where the search is end.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesSummary.FindMinValue">
            <summary>
            Finds point with minimal value.
            </summary>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesSummary.FindMinValue(System.String)">
            <summary>
            Finds point with minimal value.
            </summary>
            <param name="useValue">The use value.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesSummary.FindMinValue(System.String,System.Int32@)">
            <summary>
            Finds point with minimal value.
            </summary>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <param name="index">Index to start looking from. Returns index of found point or -1.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesSummary.FindMinValue(System.String,System.Int32@,System.Int32)">
            <summary>
            Finds point with minimal value.
            </summary>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <param name="index">Index to start looking from. Returns index of found point or -1.</param>
            <param name="endIndex">The Index where the search is end..</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesSummary.FindMaxValue">
            <summary>
            Finds point with maximal value.
            </summary>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesSummary.FindMaxValue(System.String)">
            <summary>
            Finds point with maximal value.
            </summary>
            <param name="useValue">The use value.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesSummary.FindMaxValue(System.String,System.Int32@)">
            <summary>
            Finds point with maximal value.
            </summary>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <param name="index">Index to start looking from. Returns index of found point or -1.</param>
            <returns>Found point or null.</returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesSummary.FindMaxValue(System.String,System.Int32@,System.Int32)">
            <summary>
            Finds point with maximal value.
            </summary>
            <param name="useValue">Which point value to use (X, Y1, Y2,...).</param>
            <param name="index">Index to start looking from. Returns index of found point or -1.</param>
            <param name="endIndex">The Index where the search is end.</param>
            <returns>Found point or null.</returns>       
        </member>
        <member name="P:Syncfusion.Chart.IChartSeriesSummary.ModelImpl">
            <internalonly/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.IChartSeriesSummary.CategoryModel">
            <internalonly/>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Chart.IEditableChartSeriesModel">
            <summary>
            Interface to be implemented if you want ChartPoint to be able to change your data through code. Additionally, in a future version this interface will
            allow the chart to edit data. If you wish to just display data as a series in the chart, please refer to the simpler <see cref="T:Syncfusion.Chart.IChartSeriesModel"/>
            interface.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.IEditableChartSeriesModel.Add(System.Double,System.Double[])">
            <summary>
            Adds data to the end of the data representation.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
        </member>
        <member name="M:Syncfusion.Chart.IEditableChartSeriesModel.Add(System.Double,System.Double[],System.String)">
            <summary>
            Adds data to the end of the data representation.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
            <param name="category">Category value.</param>
        </member>
        <member name="M:Syncfusion.Chart.IEditableChartSeriesModel.Add(System.Double,System.Double[],System.Boolean)">
            <summary>
            Adds data to the end of the data representation.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
            <param name="isEmpty">if set to <c>true</c> the point is empty.</param>
        </member>
        <member name="M:Syncfusion.Chart.IEditableChartSeriesModel.Add(System.Double,System.Double[],System.Boolean,System.String)">
            <summary>
            Adds data to the end of the data representation.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
            <param name="isEmpty">if set to <c>true</c> the point is empty.</param>
            <param name="category">Category value.</param>
        </member>
        <member name="M:Syncfusion.Chart.IEditableChartSeriesModel.Insert(System.Int32,System.Double,System.Double[])">
            <summary>
            Inserts a value in the data at the specified index.
            </summary>
            <param name="xIndex">Index value where the insertion is to be made.</param>
            <param name="x">The X value.</param>
            <param name="yValues">The associated Y values.</param>
        </member>
        <member name="M:Syncfusion.Chart.IEditableChartSeriesModel.Insert(System.Int32,System.Double,System.Double[],System.String)">
            <summary>
            Inserts a value in the data at the specified index.
            </summary>
            <param name="xIndex">Index value where the insertion is to be made.</param>
            <param name="x">The X value.</param>
            <param name="yValues">The associated Y values.</param>
            <param name="category">The associated Category values.</param>
        </member>
        <member name="M:Syncfusion.Chart.IEditableChartSeriesModel.SetX(System.Int32,System.Double)">
            <summary>
            Changes the X value of the data point at the specified index.
            </summary>
            <param name="xIndex">Index value where the data is to be changed.</param>
            <param name="value">New X value.</param>
        </member>
        <member name="M:Syncfusion.Chart.IEditableChartSeriesModel.SetY(System.Int32,System.Double[])">
            <summary>
            Changes the Y value of the data point at the specified index.
            </summary>
            <param name="xIndex">Index value where data is to be changed.</param>
            <param name="yValues">New Y values.</param>
        </member>
        <member name="M:Syncfusion.Chart.IEditableChartSeriesModel.SetEmpty(System.Int32,System.Boolean)">
            <summary>
            Sets the empty state indicating if the value at the specified point index is to be plotted. If this
            value is set to True, then it is treated as not present and is not plotted.
            </summary>
            <param name="xIndex" type="int">
            Index value where the empty state indicator is to be stored.
            </param>
            <param name="isEmpty" type="bool">
            Empty state indicator.
            </param>
        </member>
        <member name="M:Syncfusion.Chart.IEditableChartSeriesModel.Remove(System.Int32)">
            <summary>
            Removes the data point at the specified index.
            </summary>
            <param name="xIndex">Index value where data is to be removed.</param>
        </member>
        <member name="M:Syncfusion.Chart.IEditableChartSeriesModel.Clear">
            <summary>
            Clears all data points in this datasource.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.Drawing.BrushInfo">
            <summary>
            Holds information on how to fill the background of a window or grid cell.
            </summary>
            <remarks>
            BrushInfo lets you specify a solid backcolor, gradient or pattern style with both
            back and forecolor.
            <para/>
            This information can be persisted with serialization.
            <para/>
            You can also convert the information to a string and recreate it from a string.
            <para/>
            BrushInfo is immutable (just like <see cref="T:System.String"/>). You cannot change its values.
            Instead you have to create a new BrushInfo object.
            <para/>
            BrushInfo can also be persisted into code when used as a property in a component designer.
            <para/>
            <see cref="!:BrushPaint.FillRectangle(System.Drawing.Graphics, System.Drawing.Rectangle, 
            Syncfusion.Chart.Drawing.BrushInfo)"/> shows how to fill a rectangle using <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> 
            information.
            </remarks>
        </member>
        <member name="P:Syncfusion.Chart.Drawing.BrushInfo.Empty">
            <summary>
            An empty BrushInfo.
            </summary>
            <summary>
            An empty BrushInfo.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.#ctor">
            <summary>
            Overloaded. Initializes a new empty instance of BrushInfo.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.#ctor(Syncfusion.Drawing.Color)">
            <summary>
            Initializes a new instance of BrushInfo with the specified solid backcolor.
            </summary>
            <param name="color">A <see cref="T:Syncfusion.Drawing.Color"/> used as solid background.</param>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.#ctor(Syncfusion.Chart.Drawing.PatternStyle,Syncfusion.Drawing.Color[])">
            <summary>
            Initializes a new instance of BrushInfo with a hatch style and pattern colors.
            </summary>
            <param name="hatchStyle">A <see cref="P:Syncfusion.Chart.Drawing.BrushInfo.PatternStyle"/>.</param>
            <param name="colors">List of colors.</param>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.#ctor(Syncfusion.Chart.Drawing.GradientStyle,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color)">
            <summary>
            Initializes a new instance of BrushInfo with a gradient style and gradient fill colors.
            </summary>
            <param name="gradientStyle">A <see cref="P:Syncfusion.Chart.Drawing.BrushInfo.PatternStyle"/>.</param>
            <param name="foreColor">A <see cref="T:Syncfusion.Drawing.Color"/> used for the gradient fill.</param>
            <param name="backColor">A <see cref="T:Syncfusion.Drawing.Color"/> used for the gradient fill.</param>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.#ctor(Syncfusion.Chart.Drawing.GradientStyle,Syncfusion.Chart.Drawing.BrushInfoColorArrayList)">
            <summary>
            Initializes a new instance of BrushInfo with a gradient style and gradient fill colors.
            </summary>
            <param name="gradientStyle">A <see cref="P:Syncfusion.Chart.Drawing.BrushInfo.PatternStyle"/>.</param>
            <param name="colors">List of gradient fill colors.</param>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.#ctor(Syncfusion.Chart.Drawing.GradientStyle,Syncfusion.Drawing.Color[])">
            <summary>
            Initializes a new instance of BrushInfo with a hatch style and pattern colors.
            </summary>
            <param name="gradientStyle">A <see cref="P:Syncfusion.Chart.Drawing.BrushInfo.PatternStyle"/>.</param>
            <param name="colors">List of colors.</param>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.#ctor(Syncfusion.Chart.Drawing.GradientStyle,Syncfusion.Chart.Drawing.BrushInfoColorArrayList,System.Double,Syncfusion.Drawing.SkiaSharpHelper.ColorBlend)">
            <summary>
            To Initialize a new instance of brush info for applying Linear Gradient colors
            </summary>
            <param name="gradientStyle"></param>
            <param name="colors"></param>
            <param name="gradientAngle"></param>
            <param name="colorBlend"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.#ctor(Syncfusion.Chart.Drawing.GradientStyle,Syncfusion.Chart.Drawing.BrushInfoColorArrayList,Syncfusion.Drawing.SkiaSharpHelper.ColorBlend,Syncfusion.Drawing.Rectangle)">
            <summary>
            To Initialize a new instance of brush info for applying Radial Gradient fill.
            </summary>
            <param name="gradientStyle"></param>
            <param name="colors"></param>
            <param name="colorBlend"></param>
            <param name="fillRect"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.#ctor(Syncfusion.Chart.Drawing.BrushStyle,System.Object,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color)">
            <summary>
            Initializes a new instance of BrushInfo with any BrushStyle. Internal only.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.#ctor(System.Int32,Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Initializes a new instance of BrushInfo with a new alpha-blend value and copies other information from a given BrushInfo.
            </summary>
            <param name="alpha">The alpha value that should be applied to the forecolor and backcolor of the new brush.</param>
            <param name="br">A BrushInfo that holds information for this BrushInfo.</param>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.#ctor(Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Initializes a new instance of BrushInfo and copies its information from a given BrushInfo.
            </summary>
            <param name="brush">A BrushInfo that holds information for this BrushInfo.</param>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.ToString">
            <summary>
            Overloaded. Returns the string representation of the brush in the format BrushStyle;Style;ForeColor;BackColor.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.ToString(System.String)">
            <summary>
            Returns the string representation of the brush in the format BrushStyle;Style;ForeColor;BackColor.
            </summary>
            <param name="format">Specifies the format for string. NULL for default, "compact" for a compact string, "G" for more descriptive text.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.ToString(System.String,System.IFormatProvider)">
             <summary>
             Returns the string representation of the brush in the format BrushStyle;Style;ForeColor;BackColor.
             </summary>
             <param name="format">Specifies the format for string. NULL for default, "compact", for a compact string or "G" for more descriptive text.</param>
             <param name="formatProvider">
             The IFormatProvider to use to format the value. <para/>
             -or- <para/>
             A <see langword="NULL"/> reference to obtain the numeric format information from the current locale setting
             of the operating system.
            </param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.Equals(System.Object)">
            <summary>
            Overridden. Compares two BrushInfo object and indicates whether they are equal.
            </summary>
            <param name="obj">The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> to compare with the current <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/>. </param>
            <returns>True if the specified Object is equal to the current <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/>; false otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Syncfusion.Chart.Drawing.BrushInfo.IsEmpty">
            <summary>
            Indicates whether this is an empty object.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Drawing.BrushInfo.BackColor">
            <summary>
            Returns the backcolor.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Drawing.BrushInfo.ForeColor">
            <summary>
            Returns the forecolor.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Drawing.BrushInfo.GradientColors">
            <summary>
            Returns the gradient colors.
            </summary>
            <value>A reference to the <see cref="T:Syncfusion.Chart.Drawing.BrushInfoColorArrayList"/> instance.</value>
            <remarks><p>This color list will be used to specify the <see cref="!:System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors"/>
            or the <see cref="!:System.Drawing.Drawing2D.PathGradientBrush.SurroundColors"/> depending on the
            <see cref="P:Syncfusion.Chart.Drawing.BrushInfo.GradientStyle"/> selected.</p>
            <p>The first entry in this list will be the same as the <see cref="P:Syncfusion.Chart.Drawing.BrushInfo.BackColor"/> property and
            the last entry (not the 2nd) will be the same as the <see cref="P:Syncfusion.Chart.Drawing.BrushInfo.ForeColor"/> property.</p>
            <p>
            Note that this list is Read-only.
            </p>
            </remarks>
        </member>
        <member name="P:Syncfusion.Chart.Drawing.BrushInfo.PatternStyle">
            <summary>
            Returns the pattern style.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Drawing.BrushInfo.GradientStyle">
            <summary>
            Returns the gradient style.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Drawing.BrushInfo.Style">
            <summary>
            Returns the brush style (solid, gradient or pattern).
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the contents of this object into an XML stream.
            </summary>
            <param name="writer">Represents the XML stream.</param>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Not implemented and returns NULL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfo.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the contents of this object from an XML stream.
            </summary>
            <param name="reader">Represents the XML stream.</param>
        </member>
        <member name="T:Syncfusion.Chart.Drawing.BrushInfoColorArrayList">
            <summary>
            A list of colors returned by the <see cref="P:Syncfusion.Chart.Drawing.BrushInfo.GradientColors"/> property
            in the <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> type.
            </summary>
            <remarks>
            When returned by the <see cref="P:Syncfusion.Chart.Drawing.BrushInfo.GradientColors"/> property, this list will
            be made Read-only.
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfoColorArrayList.#ctor">
            <summary>
            Overloaded. Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushInfoColorArrayList.#ctor(Syncfusion.Drawing.Color[])">
            <summary>
            Creates a new instance of this class with some colors.
            </summary>
            <param name="colors">An array of colors.</param>
        </member>
        <member name="P:Syncfusion.Chart.Drawing.BrushInfoColorArrayList.Item(System.Int32)">
            <summary>
            Returns the color at the specified index.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.Drawing.GradientStyle">
            <summary>
            Specifies the Gradient style used by the <see cref="P:Syncfusion.Chart.Drawing.BrushInfo.GradientStyle"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.GradientStyle.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.GradientStyle.ForwardDiagonal">
            <summary>
            ForwardDiagonal Gradient.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.GradientStyle.BackwardDiagonal">
            <summary>
            BackwardDiagonal Gradient.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.GradientStyle.Horizontal">
            <summary>
            Horizontal Gradient.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.GradientStyle.Vertical">
            <summary>
            Vertical Gradient.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.GradientStyle.PathRectangle">
            <summary>
            PathRectangle Gradient.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.GradientStyle.PathEllipse">
            <summary>
            PathEllipse Gradient.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.Drawing.PatternStyle">
            <summary>
            Specifies the pattern style used in <see cref="P:Syncfusion.Chart.Drawing.BrushInfo.PatternStyle"/>
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Horizontal">
            <summary>
               <para>
                  A pattern of horizontal lines.
               </para>
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Vertical">
            <summary>
               <para>
                  A pattern of vertical lines.
               </para>
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.ForwardDiagonal">
            <summary>
               <para>
                  A pattern of lines on a diagonal from top-left to bottom-right.
               </para>
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.BackwardDiagonal">
            <summary>
               A pattern of lines on a diagonal from
               top-right to bottom-left.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Cross">
            <summary>
               <para>
                  A pattern of criss-cross horizontal and vertical lines.
               </para>
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.DiagonalCross">
            <summary>
               <para>
                  A pattern of criss-cross diagonal lines.
               </para>
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Percent05">
            <summary>
            Specifies a 5-percent hatch. The ratio of foreground color to background color is 5:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Percent10">
            <summary>
            Specifies a 10-percent hatch. The ratio of foreground color to background color is 10:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Percent20">
            <summary>
            Specifies a 20-percent hatch. The ratio of foreground color to background color is 20:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Percent25">
            <summary>
            Specifies a 25-percent hatch. The ratio of foreground color to background color is 25:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Percent30">
            <summary>
            Specifies a 30-percent hatch. The ratio of foreground color to background color is 30:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Percent40">
            <summary>
            Specifies a 40-percent hatch. The ratio of foreground color to background color is 40:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Percent50">
            <summary>
            Specifies a 50-percent hatch. The ratio of foreground color to background color is 50:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Percent60">
            <summary>
            Specifies a 60-percent hatch. The ratio of foreground color to background color is 60:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Percent70">
            <summary>
            Specifies a 70-percent hatch. The ratio of foreground color to background color is 70:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Percent75">
            <summary>
            Specifies a 75-percent hatch. The ratio of foreground color to background color is 75:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Percent80">
            <summary>
            Specifies a 80-percent hatch. The ratio of foreground color to background color is 80:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Percent90">
            <summary>
            Specifies a 90-percent hatch. The ratio of foreground color to background color is 90:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.LightDownwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the right from top points to bottom points and are spaced 50 percent closer together than BackwardDiagonal, but they are not antialiased.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.LightUpwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points and are spaced 50 percent closer together than BackwardDiagonal, but they are not antialiased.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.DarkDownwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the right from top points to bottom points, are spaced 50 percent closer together than, and are twice the width of ForwardDiagonal. This hatch pattern is not antialiased.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.DarkUpwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points, are spaced 50 percent closer together than BackwardDiagonal and are twice its width, but the lines are not antialiased.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.WideDownwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the right from top points to bottom points, have the same spacing as hatch style ForwardDiagonal and are triple its width, but are not antialiased.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.WideUpwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points, have the same spacing as hatch style BackwardDiagonal and are triple its width, but are not antialiased.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.LightVertical">
            <summary>
            Specifies light vertical lines. 
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.LightHorizontal">
            <summary>
            Specifies light horizontal lines. 
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.NarrowVertical">
            <summary>
            Specifies narrow vertical lines .
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.NarrowHorizontal">
            <summary>
            Specifies narrow horizontal lines 
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.DarkVertical">
            <summary>
            Specifies vertical lines that are spaced 50 percent closer together than Vertical and are twice its width.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.DarkHorizontal">
            <summary>
            Specifies horizontal lines that are spaced 50 percent closer together than Horizontal and are twice the width of HatchStyleHorizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.DashedDownwardDiagonal">
            <summary>
            Specifies dashed diagonal lines, that slant to the right from top points to bottom points.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.DashedUpwardDiagonal">
            <summary>
            Specifies dashed diagonal lines, that slant to the left from top points to bottom points.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.DashedHorizontal">
            <summary>
            Specifies dashed horizontal lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.DashedVertical">
            <summary>
            Specifies dashed vertical lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.SmallConfetti">
            <summary>
            Specifies a hatch that has the appearance of confetti.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.LargeConfetti">
            <summary>
            Specifies a hatch that has the appearance of confetti and is composed of larger pieces than SmallConfetti.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.ZigZag">
            <summary>
            Specifies horizontal lines that are composed of zigzags.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Wave">
            <summary>
            Specifies horizontal lines that are composed of tildes.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.DiagonalBrick">
            <summary>
            Specifies a hatch that has the appearance of layered bricks that slant to the left from top points to bottom points.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.HorizontalBrick">
            <summary>
            Specifies a hatch that has the appearance of horizontally layered bricks.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Weave">
            <summary>
            Specifies a hatch that has the appearance of a woven material.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Plaid">
            <summary>
            Specifies a hatch that has the appearance of a plaid material.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Divot">
            <summary>
            Specifies a hatch that has the appearance of divots.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.DottedGrid">
            <summary>
            Specifies horizontal and vertical lines, each of which is composed of dots, that cross.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.DottedDiamond">
            <summary>
            Specifies forward diagonal and backward diagonal lines, each of which is composed of dots, that cross.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Shingle">
            <summary>
            Specifies a hatch that has the appearance of diagonally-layered shingles that slant to the right from top points to bottom points.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Trellis">
            <summary>
            Specifies a hatch that has the appearance of a trellis.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.Sphere">
            <summary>
            Specifies a hatch that has the appearance of spheres laid adjacent to one another.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.SmallGrid">
            <summary>
            Specifies horizontal and vertical lines that cross and are spaced 50 percent closer together than hatch style Cross.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.SmallCheckerBoard">
            <summary>
            Specifies a hatch that has the appearance of a checkerboard.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.LargeCheckerBoard">
            <summary>
            Specifies a hatch that has the appearance of a checkerboard with squares that are twice the size of SmallCheckerBoard.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.OutlinedDiamond">
            <summary>
            Specifies forward diagonal and backward diagonal lines that cross but are not antialiased.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.PatternStyle.SolidDiamond">
            <summary>
            Specifies a hatch that has the appearance of a checkerboard placed diagonally.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.Drawing.BrushPaint">
            <summary>
            Paints window background using <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushPaint.FillRectangle(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Overloaded. Fills the interior of a rectangle using <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> information.
            </summary>
            <param name="g">A <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/> context.</param>
            <param name="r"><see cref="T:Syncfusion.Drawing.Rectangle"/> structure that represents the rectangle to fill. </param>
            <param name="brush"><see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> object that determines the characteristics of the fill.</param>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushPaint.FillRectangle(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Fills the interior of a rectangle using <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> information.
            </summary>
            <param name="g">A <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/> context.</param>
            <param name="r"><see cref="T:Syncfusion.Drawing.RectangleF"/> Structure that represents the rectangle to fill. </param>
            <param name="brush"><see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> Object that determines the characteristics of the fill.</param>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushPaint.FillRectangle(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.Color[])">
            <summary>
            Fills the interior of a rectangle with a gradient.
            </summary>
            <param name="g">A <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/> context</param>
            <param name="r"><see cref="T:Syncfusion.Drawing.RectangleF"/> Structure that represents the rectangle to fill. </param>
            <param name="gradientStyle"><see cref="T:Syncfusion.Chart.Drawing.GradientStyle"/>.</param>
            <param name="colors">An array of <see cref="T:Syncfusion.Drawing.Color"/> used for the gradient fill.</param>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushPaint.FillRectangle(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Chart.Drawing.PatternStyle,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color)">
            <summary>
            Fills the interior of a rectangle with a pattern.
            </summary>
            <param name="g">A <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/> context</param>
            <param name="r"><see cref="T:Syncfusion.Drawing.RectangleF"/> Structure that represents the rectangle to fill. </param>
            <param name="hatchStyle"><see cref="T:Syncfusion.Chart.Drawing.PatternStyle"/>.</param>
            <param name="foreColor">A <see cref="T:Syncfusion.Drawing.Color"/> used for the pattern fill.</param>
            <param name="backColor">A <see cref="T:Syncfusion.Drawing.Color"/> used for the pattern fill.</param>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushPaint.FillRectangle(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.Color)">
            <summary>
            Fills the interior of a rectangle with a solid color.
            </summary>
            <param name="g">A <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/> context.</param>
            <param name="r"><see cref="T:Syncfusion.Drawing.RectangleF"/> Structure that represents the rectangle to fill. </param>
            <param name="color">A <see cref="T:Syncfusion.Drawing.Color"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushPaint.FillPath(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,Syncfusion.Chart.Drawing.BrushInfo)">
             <summary>
            
             </summary>
             <param name="g"></param>
             <param name="p"></param>
             <param name="brush"></param>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.BrushPaint.FillPath(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.Color[])">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="p"></param>
            <param name="gradientStyle"></param>
            <param name="colors"></param>
        </member>
        <member name="T:Syncfusion.Chart.Drawing.BrushStyle">
            <summary>
            Specifies the BrushStyle used by <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.BrushStyle.None">
            <summary>
            The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> is an empty object.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.BrushStyle.Solid">
            <summary>
            The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> represents a solid fill.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.BrushStyle.Pattern">
            <summary>
            The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> represents a pattern fill.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Drawing.BrushStyle.Gradient">
            <summary>
            The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> represents a gradient fill.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.Drawing.ColorConvert">
            <summary>
            Conversion methods for a <see cref="T:Syncfusion.Drawing.Color"/> to and from a string.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.ColorConvert.ColorFromString(System.String)">
            <summary>
            	ColorFromString parses a string previously generated with ColorToString and returns a color.
            </summary>
            <param name="parseStr">String generated with ColorToString.</param>
            <returns>
            	Color value that was encoded in parseStr.
            </returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.Drawing.ColorConvert.ColorToString(Syncfusion.Drawing.Color,System.Boolean)">
            <summary>
            	ColorToString creates a string from a color. All information such as 
            	knownColor and name in the color structure will be preserved. 
            </summary>
            <param name="color"> </param>
            <param name="writeName"> </param>
            <returns>
            	A string that can be passed as parameter to ColorFromString.
            </returns>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Chart.BspNode">
            <summary>
            Represents the node of BSP tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.BspNode.Back">
            <summary>
            Gets or sets the back node.
            </summary>
            <value>The back node.</value>
        </member>
        <member name="P:Syncfusion.Chart.BspNode.Front">
            <summary>
            Gets or sets the front node.
            </summary>
            <value>The front node.</value>
        </member>
        <member name="P:Syncfusion.Chart.BspNode.Plane">
            <summary>
            Gets or sets the plane.
            </summary>
            <value>The plane.</value>
        </member>
        <member name="T:Syncfusion.Chart.ClassifyPointResult">
            <summary>
            Specifies the point location by the plane.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ClassifyPointResult.OnFront">
            <summary>
            Point is in the front of plane.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ClassifyPointResult.OnBack">
            <summary>
            Point is at the back of plane.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ClassifyPointResult.OnPlane">
            <summary>
            Point is on the plane.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ClassifyPolyResult">
            <summary>
            Specifies the polygon location by the plane.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ClassifyPolyResult.OnPlane">
            <summary>
            Polygon is on the plane.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ClassifyPolyResult.ToRight">
            <summary>
            Polygon is from right of the plane.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ClassifyPolyResult.ToLeft">
            <summary>
            Polygon is from left of the plane.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ClassifyPolyResult.Unknown">
            <summary>
            Location of polygon is unknown.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.BspTreeBuilder">
            <summary>
            This class contains methods to compute the Binary Space Partitioning (BSP) tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.BspTreeBuilder.Item(System.Int32)">
            <summary>
            Gets the <see cref="!:Syncfusion.Windows.Forms.Chart.Polygon"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.BspTreeBuilder.Count">
            <summary>
            Gets the count of polygons.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Syncfusion.Chart.BspTreeBuilder.Add(Syncfusion.Chart.Polygon)">
            <summary>
            Adds the specified poly.
            </summary>
            <param name="poly">The poly.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.BspTreeBuilder.Build">
            <summary>
            Builds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.BspTreeBuilder.Build(System.Collections.Generic.List{Syncfusion.Chart.Polygon})">
            <summary>
            Builds the specified collection of polygons.
            </summary>
            <param name="arlist">The collection of polygons.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.BspTreeBuilder.GetNodeCount(Syncfusion.Chart.BspNode)">
            <summary>
            Gets the node count.
            </summary>
            <param name="el">The el.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.BspTreeBuilder.GetNodeCount">
            <summary>
            Gets the node count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.BspTreeBuilder.ClassifyPolygon(Syncfusion.Chart.Polygon,Syncfusion.Chart.Polygon)">
            <summary>
            
            </summary>
            <param name="pln">The Polygon.</param>
            <param name="plg">The Polygon.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.BspTreeBuilder.ClassifyPoint(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Polygon)">
            <summary>
            Classifies the point.
            </summary>
            <param name="pt">The pt.</param>
            <param name="pln">The PLN.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.BspTreeBuilder.SplitPolygon(Syncfusion.Chart.Polygon,Syncfusion.Chart.Polygon,Syncfusion.Chart.Polygon[]@,Syncfusion.Chart.Polygon[]@)">
            <summary>
            
            </summary>
            <param name="poly"></param>
            <param name="part"></param>
            <param name="backPoly"></param>
            <param name="frontPoly"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.BspTreeBuilder.CutOutBackPolygon(System.Collections.ArrayList,Syncfusion.Chart.Vector3DWithIndexWithClassification,System.Collections.ArrayList)">
            <summary>
            Cuts the out back polygon.
            </summary>
            <param name="polyPoints">The poly points.</param>
            <param name="vwiwc">The vwiwc.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Chart.BspTreeBuilder.CutOutFrontPolygon(System.Collections.ArrayList,Syncfusion.Chart.Vector3DWithIndexWithClassification,System.Collections.ArrayList)">
            <summary>
            Cuts the out front polygon.
            </summary>
            <param name="polyPoints">The poly points.</param>
            <param name="vwiwc">The vwiwc.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Chart.BspTreeBuilder.GetNext(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.Vector3DWithIndexWithClassification">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.Vector3DWithIndexWithClassification.#ctor(Syncfusion.Chart.Vector3D,System.Int32,Syncfusion.Chart.ClassifyPointResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Vector3DWithIndexWithClassification"/> class.
            </summary>
            <param name="point">The Vector3D point.</param>
            <param name="ind">The index.</param>
            <param name="res">The ClassifyPointResult.</param>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.Vector3DWithIndexWithClassification.#ctor(Syncfusion.Chart.Vector3DWithIndexWithClassification)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Vector3DWithIndexWithClassification"/> class.
            </summary>
            <param name="vectWW">The Vector3DWithIndexWithClassification argument.</param>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.Vector3DWithIndexWithClassification.Vector">
            <summary>
            Gets or sets the vector.
            </summary>
            <value>The vector.</value>
        </member>
        <member name="P:Syncfusion.Chart.Vector3DWithIndexWithClassification.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Syncfusion.Chart.Vector3DWithIndexWithClassification.Result">
            <summary>
            Gets or sets the classify result.
            </summary>
            <value>The classify result.</value>
        </member>
        <member name="P:Syncfusion.Chart.Vector3DWithIndexWithClassification.CuttingBackPoint">
            <summary>
            Gets or sets a value indicating whether [cutting back point].
            </summary>
            <value><c>true</c> if [cutting back point]; otherwise, <c>false</c>.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.Vector3DWithIndexWithClassification.CuttingFrontPoint">
            <summary>
            Gets or sets a value indicating whether [cutting front point].
            </summary>
            <value><c>true</c> if [cutting front point]; otherwise, <c>false</c>.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.Vector3DWithIndexWithClassification.CuttingBackPairIndex">
            <summary>
            Gets or sets the index of the cutting back pair.
            </summary>
            <value>The index of the cutting back pair.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.Vector3DWithIndexWithClassification.CuttingFrontPairIndex">
            <summary>
            Gets or sets the index of the cutting front pair.
            </summary>
            <value>The index of the cutting front pair.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.Vector3DWithIndexWithClassification.AlreadyCuttedBack">
            <summary>
            Gets or sets a value indicating whether [already cutted back].
            </summary>
            <value><c>true</c> if [already cutted back]; otherwise, <c>false</c>.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.Vector3DWithIndexWithClassification.AlreadyCuttedFront">
            <summary>
            Gets or sets a value indicating whether [already cutted front].
            </summary>
            <value><c>true</c> if [already cutted front]; otherwise, <c>false</c>.</value>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Chart.PointsOnLineComparer">
            <summary>
            Compares the points by distance to the eye.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.PointsOnLineComparer.#ctor(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.PointsOnLineComparer"/> class.
            </summary>
            <param name="direction">The direction.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Syncfusion.Chart.PointsOnLineComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:Syncfusion.Chart.Transform3D">
            <summary>
            Contains the view and projection transformation of <see cref="T:Syncfusion.Chart.Graphics3D"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Transform3D.#ctor">
             <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Transform3D"/> class.
             </summary>
        </member>
        <member name="P:Syncfusion.Chart.Transform3D.Centered">
            <summary>
            Gets os sets the center matrix.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Transform3D.View">
            <summary>
            Gets or sets the view matrix.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:Syncfusion.Chart.Transform3D.Projection">
            <summary>
            Gets or sets the projection matrix.
            </summary>
            <value>The projection.</value>
        </member>
        <member name="P:Syncfusion.Chart.Transform3D.Result">
            <summary>
            Gets the result matrix.
            </summary>
            <value>The result.</value>
        </member>
        <member name="M:Syncfusion.Chart.Transform3D.SetCenter(Syncfusion.Chart.Vector3D)">
            <summary>
            Sets the center of world.
            </summary>
            <param name="center">The center.</param>
        </member>
        <member name="M:Syncfusion.Chart.Transform3D.SetPerspective(System.Double)">
            <summary>
            Sets the perspective.
            </summary>
            <param name="distance">The distance to the "eye".</param>
        </member>
        <member name="M:Syncfusion.Chart.Transform3D.SetLookAt(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D)">
            <summary>
            Sets the view matrix by the position and direction of eye.
            </summary>
            <param name="pos">The pos.</param>
            <param name="dir">The dir.</param>
            <param name="up">The up.</param>
        </member>
        <member name="M:Syncfusion.Chart.Transform3D.ToScreen(Syncfusion.Chart.Vector3D)">
            <summary>
            Transform <see cref="T:Syncfusion.Chart.Vector3D"/> to the screen.
            </summary>
            <param name="vector3d">The vector3d.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Transform3D.ToPlane(Syncfusion.Drawing.PointF,Syncfusion.Chart.Plane3D)">
            <summary>
            Returns the intercept point of mouse ray with the specified plane.
            </summary>
            <param name="point">The point.</param>
            <param name="plane">The plane.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.Graphics3D">
            <summary>
            Provide the methods for drawing in 3D mode. 
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Graphics3D.RootNode">
            <summary>
            Gets or sets the root node.
            </summary>
            <value>The root node.</value>
        </member>
        <member name="P:Syncfusion.Chart.Graphics3D.Item(System.Int32)">
            <summary>
            Gets the <see cref="!:Syncfusion.Windows.Forms.Chart.Polygon"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Graphics3D.Count">
            <summary>
            Gets the count of input polygons.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Syncfusion.Chart.Graphics3D.LightPosition">
            <summary>
            Gets or sets the light position.
            </summary>
            <value>The light position.</value>
        </member>
        <member name="P:Syncfusion.Chart.Graphics3D.LightCoeficient">
            <summary>
            Gets or sets the light coefficient.
            </summary>
            <value>The light coefficient.</value>
        </member>
        <member name="P:Syncfusion.Chart.Graphics3D.Light">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Chart.Graphics3D"/> is light.
            </summary>
            <value><c>true</c> if light; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.Graphics3D.Graphics">
            <summary>
            Gets the graphics.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Syncfusion.Chart.Graphics3D.CountPolygons">
            <summary>
            Gets the count output polygons.
            </summary>
            <value>The count polygons.</value>
        </member>
        <member name="P:Syncfusion.Chart.Graphics3D.Regions">
            <summary>
            Gets or sets the regions.
            </summary>
            <value>The regions.</value>
        </member>
        <member name="P:Syncfusion.Chart.Graphics3D.DefaultStrinfFormat">
            <summary>
            Gets the default string format.
            </summary>
            <value>The default string format.</value>
        </member>
        <member name="P:Syncfusion.Chart.Graphics3D.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
            <value>The transform.</value>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.#ctor(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Graphics3D"/> class.
            </summary>
            <param name="g">The <see cref="P:Syncfusion.Chart.Graphics3D.Graphics"/> to the drawing.</param>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.AddPolygon(Syncfusion.Chart.Polygon)">
            <summary>
            Adds the polygon to the drawing.
            </summary>
            <param name="polygon">The <see cref="T:Syncfusion.Chart.Polygon"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.PrepairView">
            <summary>
            Computes the BSP tree.
            </summary>
            
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.PrepareView">
            <summary>
            Computes the BSP tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.View3D">
            <summary>
            Draws the polygons to the <see cref="P:Syncfusion.Chart.Graphics3D.Graphics"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.SaveState">
            <summary>
            Saves the <see cref="T:Syncfusion.Chart.Graphics3D"/> options.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.LoadState(Syncfusion.Chart.Graphics3DState)">
            <summary>
            Loads the <see cref="T:Syncfusion.Chart.Graphics3D"/> options.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.CreateBox(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.SkiaSharpHelper.Brush)">
            <summary>
            Creates the box.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="p">The pen.</param>
            <param name="b">The brush.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.CreateBox(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Creates the box.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="p">The p.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.CreateBoxV(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Creates the vertical box.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="p">The p.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.CreateEllipse(Syncfusion.Chart.Vector3D,Syncfusion.Drawing.SizeF,System.Int32,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Creates the ellipse.
            </summary>
            <param name="v1">The v1.</param>
            <param name="sz">The sz.</param>
            <param name="dsc">The DSC.</param>
            <param name="p">The p.</param>
            <param name="br">The br.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.CreateRectangle(Syncfusion.Chart.Vector3D,Syncfusion.Drawing.SizeF,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Creates the rectangle.
            </summary>
            <param name="v1">The v1.</param>
            <param name="sz">The sz.</param>
            <param name="p">The p.</param>
            <param name="br">The br.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.CreateRectangle(Syncfusion.Chart.Vector3D,Syncfusion.Drawing.SizeF,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Chart.Drawing.BrushInfo,System.Boolean)">
            <summary>
            Creates the rectangle.
            </summary>
            <param name="v1">The v1.</param>
            <param name="sz">The sz.</param>
            <param name="p">The p.</param>
            <param name="br">The br.</param>
            <param name="IsPNF">The PNF.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.CreateShpeare(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D,System.Int32,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Creates the sphere.
            </summary>
            <param name="v1">The v1.</param>
            <param name="r">The r.</param>
            <param name="dsc">The DSC.</param>
            <param name="p">The p.</param>
            <param name="br">The br.</param>
            <returns></returns>
            
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.CreateSphere(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D,System.Int32,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Creates the sphere.
            </summary>
            <param name="v1">The v1.</param>
            <param name="r">The r.</param>
            <param name="dsc">The DSC.</param>
            <param name="p">The p.</param>
            <param name="br">The br.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.CreateCylinderV(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D,System.Int32,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Creates the vertical cylinder.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="dsc">The DSC.</param>
            <param name="p">The p.</param>
            <param name="br">The br.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.CreateCylinderH(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D,System.Int32,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Creates the horizontal cylinder.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="dsc">The DSC.</param>
            <param name="p">The p.</param>
            <param name="br">The br.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3D.DrawBspNode3D(Syncfusion.Chart.BspNode,Syncfusion.Chart.Vector3D)">
            <summary>
            Draws the BSP node in 3D.
            </summary>
            <param name="tr">The tree.</param>
            <param name="eye">The eye position.</param>
        </member>
        <member name="T:Syncfusion.Chart.Graphics3DState">
            <summary>
            Provide the representation settings of <see cref="T:Syncfusion.Chart.Graphics3D"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3DState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Graphics3DState"/> class.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.Graphics3DState.Changed">
            <summary>
            Occurs when settings is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Graphics3DState.LightPosition">
            <summary>
            Gets or sets the light direction.
            </summary>
            <value>The light direction.</value>
        </member>
        <member name="P:Syncfusion.Chart.Graphics3DState.LightCoeficient">
            <summary>
            Gets or sets the light coefficient.
            </summary>
            <value>The light coefficient.</value>
        </member>
        <member name="P:Syncfusion.Chart.Graphics3DState.Perspective">
            <summary>
            Gets or sets a value indicating whether perspective is enabled.
            </summary>
            <value><c>True</c> If perspective is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.Graphics3DState.AutoPerspective">
            <summary>
            Gets or sets a value indicating whether perspective is computed automatically.
            </summary>
            <value><c>True</c> If perspective is computed automatically; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.Graphics3DState.Light">
            <summary>
            Gets or sets a value indicating whether light is enabled.
            </summary>
            <value><c>True</c> If light is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.Graphics3DState.ZDistant">
            <summary>
            Gets or sets the distance from eye to the chart. This value is used for computing of perspective.
            </summary>
            <value>The depth distant.</value>
        </member>
        <member name="M:Syncfusion.Chart.Graphics3DState.RaiseChanged">
            <summary>
            Raises the changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.Image3D">
            <summary>
            Represents the <see cref="T:Syncfusion.Drawing.Image"/> in the 3D.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Image3D.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="M:Syncfusion.Chart.Image3D.#ctor(Syncfusion.Chart.Vector3D[],Syncfusion.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Image3D"/> class.
            </summary>
            <param name="vs">The positions of polygon.</param>
            <param name="img">The image.</param>
        </member>
        <member name="M:Syncfusion.Chart.Image3D.Draw(Syncfusion.Chart.Graphics3D)">
            <summary>
            Draws to the specified <see cref="T:Syncfusion.Chart.Graphics3D"/>.
            </summary>
            <param name="g3d">The g3d.</param>
            <returns>Returns ChartRegion.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Image3D.FromImage(Syncfusion.Drawing.Image,Syncfusion.Drawing.RectangleF,System.Single)">
            <summary>
            Create the new instance from the specified image.
            </summary>
            <param name="image">The image.</param>
            <param name="bounds">The bounds.</param>
            <param name="z">The depth coordinate.</param>
            <returns>Returns Image3D.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Image3D.Clone">
            <summary>
            Create the new instance and copy all members.
            </summary>
            <returns>Returns Polygon after clone.</returns>
        </member>
        <member name="T:Syncfusion.Chart.Matrix3D">
            <summary>
            Represents the matrix 4x4.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Matrix3D.IsAffine">
            <summary>
            Gets a value indicating whether this matrix is affine.
            </summary>
            <value><c>true</c> if this matrix is affine; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.Matrix3D.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Double"/> with the specified column and row.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Matrix3D.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
            <value>The identity matrix.</value>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Matrix3D"/> class.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Matrix3D"/> class.
            </summary>
            <param name="m11">The M11 element of matrix.</param>
            <param name="m12">The M12 element of matrix.</param>
            <param name="m13">The M13 element of matrix.</param>
            <param name="m14">The M14 element of matrix.</param>
            <param name="m21">The M21 element of matrix.</param>
            <param name="m22">The M22 element of matrix.</param>
            <param name="m23">The M23 element of matrix.</param>
            <param name="m24">The M24 element of matrix.</param>
            <param name="m31">The M31 element of matrix.</param>
            <param name="m32">The M32 element of matrix.</param>
            <param name="m33">The M33 element of matrix.</param>
            <param name="m34">The M34 element of matrix.</param>
            <param name="m41">The M41 element of matrix.</param>
            <param name="m42">The M42 element of matrix.</param>
            <param name="m43">The M43 element of matrix.</param>
            <param name="m44">The M44 element of matrix.</param>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.op_Addition(Syncfusion.Chart.Matrix3D,Syncfusion.Chart.Matrix3D)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.op_Multiply(Syncfusion.Chart.Matrix3D,Syncfusion.Chart.Vector3D)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="m1"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.op_BitwiseAnd(Syncfusion.Chart.Matrix3D,Syncfusion.Chart.Vector3D)">
            <summary>
            Implements the dot product operation.
            </summary>
            <param name="m1"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.op_Multiply(System.Double,Syncfusion.Chart.Matrix3D)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="f1"></param>
            <param name="m1"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.op_Multiply(Syncfusion.Chart.Matrix3D,Syncfusion.Chart.Matrix3D)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.op_Equality(Syncfusion.Chart.Matrix3D,Syncfusion.Chart.Matrix3D)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.op_Inequality(Syncfusion.Chart.Matrix3D,Syncfusion.Chart.Matrix3D)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.GetInvertal(Syncfusion.Chart.Matrix3D)">
            <summary>
            Intervals the matrix.
            </summary>
            <param name="matrix3D">The matrix.</param>
            <returns></returns>
            
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.GetInterval(Syncfusion.Chart.Matrix3D)">
            <summary>
            Intervals the matrix.
            </summary>
            <param name="matrix3D">The matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.GetMinor(Syncfusion.Chart.Matrix3D,System.Int32,System.Int32)">
            <summary>
            Gets the minor.
            </summary>
            <param name="dd">The matrix.</param>
            <param name="columnIndex">The index of column.</param>
            <param name="rowIndex">The index of row.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.GetD(Syncfusion.Chart.Matrix3D)">
            <summary>
            Gets the determinant.
            </summary>
            <param name="matrix3D">The matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.GetIdentity">
            <summary>
            Gets the identity matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.GetGauss(Syncfusion.Chart.Matrix3D)">
            <summary>
            Gets the gauss result.
            </summary>
            <remarks>
            The columns of matrix is the A, B, C, D parameters of equations.
            </remarks>
            <param name="m1">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.Transform(System.Double,System.Double,System.Double)">
            <summary>
            Transforms the specified vector.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="z">The Z coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.Turn(System.Double)">
            <summary>
            Turns by the specified angle.
            </summary>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.Tilt(System.Double)">
            <summary>
            Tilts by the specified angle.
            </summary>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.Twist(System.Double)">
            <summary>
            Twists by the specified angle.
            </summary>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Scales by  the specified values.
            </summary>
            <param name="dx">The X scale.</param>
            <param name="dy">The Y scale.</param>
            <param name="dz">The Z scale.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.Transposed(Syncfusion.Chart.Matrix3D)">
            <summary>
            Transposes the specified matrix.
            </summary>
            <param name="matrix3D">The matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.Shear(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Shears the specified values.
            </summary>
            <param name="xy">The xy shear.</param>
            <param name="xz">The xz shear.</param>
            <param name="yx">The yx shear.</param>
            <param name="yz">The yz shear.</param>
            <param name="zx">The zx shear.</param>
            <param name="zy">The zy shear.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.RotateAlongOX(System.Double)">
            <summary>
            Creates transformation matrix that rotates polygon around OX axis.
            </summary>
            <param name="angle">The angle to rotate.</param>
            <returns>Transformation matrix.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.RotateAlongOY(System.Double)">
            <summary>
            Creates transformation matrix that rotates polygon around OY axis.
            </summary>
            <param name="angle">The angle to rotate.</param>
            <returns>Transformation matrix.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.RotateAlongOZ(System.Double)">
            <summary>
            Creates transformation matrix that rotates polygon around OZ axis.
            </summary>
            <param name="angle">The angle to rotate.</param>
            <returns>Transformation matrix.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.GetDeterminant(System.Double[][])">
            <summary>
            Calculates determinant row given matrix..
            </summary>
            <param name="dd">The matrix to calculate determinant.</param>
            <returns>Determinant of the given matrix.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Matrix3D.GetMMtr(System.Double[][],System.Int32,System.Int32)">
            <summary>
            Gets the minor.
            </summary>
            <param name="dd">The matrix.</param>
            <param name="columnIndex">The index of column.</param>
            <param name="rowIndex">The index of row.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.PathGroup3D">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.PathGroup3D.PathItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.PathGroup3D.#ctor(System.Double)">
             <summary>
             
             </summary>      
            <param name="z"></param> 
        </member>
        <member name="M:Syncfusion.Chart.PathGroup3D.AddPath(Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Adds the path.
            </summary>
            <param name="gp">The gp.</param>
            <param name="brush">The brush.</param>
            <param name="brushInfo">The BrushInfo</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Chart.PathGroup3D.GetNormal(Syncfusion.Chart.Matrix3D)">
            <summary>
            
            </summary>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.PathGroup3D.Draw(Syncfusion.Chart.Graphics3D)">
            <summary>
            
            </summary>
            <param name="g3d"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.PathGroup3D.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.Path3D">
            <summary>
            Represents the <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath"/> in the 3D.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Path3D.Types">
            <summary>
            Gets the types.
            </summary>
            <value>The types.</value>
        </member>
        <member name="M:Syncfusion.Chart.Path3D.#ctor(Syncfusion.Chart.Plane3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Path3D"/> class.
            </summary>
            <param name="plane">The plane.</param>
        </member>
        <member name="M:Syncfusion.Chart.Path3D.#ctor(Syncfusion.Chart.Vector3D[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Path3D"/> class.
            </summary>
            <param name="vs">The vs.</param>
        </member>
        <member name="M:Syncfusion.Chart.Path3D.#ctor(Syncfusion.Chart.Vector3D[],System.Byte[],Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Path3D"/> class.
            </summary>
            <param name="vs">The vs.</param>
            <param name="types">The types.</param>
            <param name="br">The br.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Chart.Path3D.#ctor(Syncfusion.Chart.Path3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Path3D"/> class.
            </summary>
            <param name="p3d">The P3D.</param>
        </member>
        <member name="M:Syncfusion.Chart.Path3D.FromGraphicsPath(Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,System.Double,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Creates <see cref="T:Syncfusion.Chart.Path3D"/> from the graphics path.
            </summary>
            <param name="gp">The gp.</param>
            <param name="z">The z.</param>
            <param name="br">The br.</param>
            <param name="pen">The pen.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Path3D.FromGraphicsPath(Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,System.Double,Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Creates <see cref="T:Syncfusion.Chart.Path3D"/> from the graphics path.
            </summary>
            <param name="gp">The gp.</param>
            <param name="z">The z.</param>
            <param name="br">The br.</param>
            <param name="pen">The pen.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Path3D.FromGraphicsPath(Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,System.Double,Syncfusion.Drawing.SkiaSharpHelper.Brush)">
            <summary>
            Creates <see cref="T:Syncfusion.Chart.Path3D"/> from the graphics path.
            </summary>
            <param name="gp">The gp.</param>
            <param name="z">The z.</param>
            <param name="br">The br.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Path3D.FromGraphicsPath(Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,System.Double,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Creates <see cref="T:Syncfusion.Chart.Path3D"/> from the graphics path.
            </summary>
            <param name="gp">The gp.</param>
            <param name="z">The z.</param>
            <param name="pen">The pen.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Path3D.FromGraphicsPath(Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,System.Double,Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Creates <see cref="T:Syncfusion.Chart.Path3D"/> from the graphics path.
            </summary>
            <param name="gp">The gp.</param>
            <param name="z">The z.</param>
            <param name="br">The br.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Path3D.FromGraphicsPath(Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,Syncfusion.Chart.Plane3D,System.Double,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Creates <see cref="T:Syncfusion.Chart.Path3D"/> from the graphics path.
            </summary>
            <param name="gp">The gp.</param>
            <param name="plane">The plane.</param>
            <param name="z">The z.</param>
            <param name="br">The br.</param>
            <param name="pen">The pen.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Path3D.GetPath(Syncfusion.Drawing.PointF[])">
            <summary>
            Gets the path of Graphics.
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Path3D.Draw(Syncfusion.Chart.Graphics3D)">
            <summary>
            
            </summary>
            <param name="g3d"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Path3D.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.Path3DCollect">
            <summary>
            Represents polygones polygon.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Path3DCollect.Points">
            <summary>
            Gets the points of polygon.
            </summary>
            <value>The points.</value>
        </member>
        <member name="M:Syncfusion.Chart.Path3DCollect.#ctor(Syncfusion.Chart.Polygon[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Path3DCollect"/> class.
            </summary>
            <param name="paths">The array of polygons.</param>
        </member>
        <member name="M:Syncfusion.Chart.Path3DCollect.#ctor(Syncfusion.Chart.Polygon)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Path3DCollect"/> class.
            </summary>
            <param name="paths">The polygon.</param>
        </member>
        <member name="M:Syncfusion.Chart.Path3DCollect.#ctor(Syncfusion.Chart.Path3DCollect)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Path3DCollect"/> class.
            </summary>
            <param name="p3dc">The <see cref="T:Syncfusion.Chart.Path3DCollect"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.Path3DCollect.Add(Syncfusion.Chart.Polygon)">
            <summary>
            Adds the specified polygon to the group.
            </summary>
            <param name="polygon">The <see cref="T:Syncfusion.Chart.Polygon"/>.</param>
            <returns>Returns the index of the added polygon.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Path3DCollect.Draw(Syncfusion.Chart.Graphics3D)">
            <summary>
            Draws to the specified <see cref="T:Syncfusion.Chart.Graphics3D"/>.
            </summary>
            <param name="g3d">The g3d.</param>
            <returns>Returns ChartRegion.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Path3DCollect.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the polygon.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Path3DCollect.Transform(Syncfusion.Chart.Matrix3D)">
            <summary>
            Transforms by the specified <see cref="T:Syncfusion.Chart.Matrix3D"/>.
            </summary>
            <param name="matrix3D">The <see cref="T:Syncfusion.Chart.Matrix3D"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.Path3DCollect.RefreshPoints">
            <summary>
            Refreshes the points.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.Plane3D">
            <summary>
            Represents the 3D plane.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Plane3D.m_normal">
            <summary>
            The normal of plane.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.Plane3D.m_d">
            <summary>
            The constant of plane.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.Plane3D.Normal">
            <summary>
            Gets the normal.
            </summary>
            <value>The normal.</value>
        </member>
        <member name="P:Syncfusion.Chart.Plane3D.A">
            <summary>
            Gets the A component.
            </summary>
            <value>The A component.</value>
        </member>
        <member name="P:Syncfusion.Chart.Plane3D.B">
            <summary>
            Gets the B component.
            </summary>
            <value>The B component.</value>
        </member>
        <member name="P:Syncfusion.Chart.Plane3D.C">
            <summary>
            Gets the C component.
            </summary>
            <value>The C component.</value>
        </member>
        <member name="P:Syncfusion.Chart.Plane3D.D">
            <summary>
            Gets the D component.
            </summary>
            <value>The D component.</value>
        </member>
        <member name="M:Syncfusion.Chart.Plane3D.#ctor(Syncfusion.Chart.Vector3D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Plane3D"/> class.
            </summary>
            <param name="normal">The normal.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:Syncfusion.Chart.Plane3D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Plane3D"/> class.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:Syncfusion.Chart.Plane3D.#ctor(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Plane3D"/> class.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
        </member>
        <member name="M:Syncfusion.Chart.Plane3D.GetPoint(System.Double,System.Double)">
            <summary>
            Gets the point on the plane.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>Returns Vector3D instance.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Plane3D.GetPoint(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D)">
            <summary>
            Gets the point of intersect ray with plane.
            </summary>
            <param name="pos">The pos.</param>
            <param name="ray">The ray.</param>
            <returns>Returns Vector3D instance.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Plane3D.Transform(Syncfusion.Chart.Matrix3D)">
            <summary>
            Transforms by the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Syncfusion.Chart.Plane3D.Clone(Syncfusion.Chart.Matrix3D)">
            <summary>
            Clones this instance and apply the specified transformation.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>Returns Plane3D instance.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Plane3D.Test">
            <summary>
            Tests this instance to the existing.
            </summary>
            <returns>Indicates whether Normal of Plane is valid or Not.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Plane3D.CalcNormal(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D)">
            <summary>
            Calculates the normal.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Chart.Polygon">
            <summary>
            Represents the simple 3D polygon.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Polygon.m_points">
            <summary>
            Points of polygon.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.Polygon.m_pen">
            <summary>
            The <see cref="P:Syncfusion.Chart.Polygon.Pen"/> for border drawing.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.Polygon.m_FigurePen">
            <summary>
            The <see cref="P:Syncfusion.Chart.Polygon.Pen"/> for border drawing.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.Polygon.m_brush">
            <summary>
            The <see cref="P:Syncfusion.Chart.Polygon.Brush"/> for polygon filling.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.Polygon.m_brInfo">
            <summary>
            The <see cref="P:Syncfusion.Chart.Polygon.BrushInfo"/> for polygon filling.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.Polygon.isClipPolygon">
            <summary>
            Indicates whether this polygon is used as clip plane.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.Polygon.Points">
            <summary>
            Gets the points of polygon.
            </summary>
            <value>The points.</value>
        </member>
        <member name="P:Syncfusion.Chart.Polygon.Brush">
            <summary>
            Gets the brush.
            </summary>
            <value>The brush.</value>
        </member>
        <member name="P:Syncfusion.Chart.Polygon.Pen">
            <summary>
            Gets the pen.
            </summary>
            <value>The pen.</value>
        </member>
        <member name="P:Syncfusion.Chart.Polygon.BrushInfo">
            <summary>
            Gets the brush info.
            </summary>
            <value>The brush info.</value>
        </member>
        <member name="P:Syncfusion.Chart.Polygon.ClipPolygon">
            <summary>
            Gets or sets a value indicating whether polygon is used as clip plane.
            </summary>
            <value><c>true</c> if it's used as clip plane; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.#ctor(Syncfusion.Chart.Vector3D[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Polygon"/> class.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.#ctor(Syncfusion.Chart.Vector3D[],Syncfusion.Drawing.SkiaSharpHelper.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Polygon"/> class.
            </summary>
            <param name="points">The points.</param>
            <param name="br">The br.</param>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.#ctor(Syncfusion.Chart.Vector3D[],Syncfusion.Chart.Polygon)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Polygon"/> class.
            </summary>
            <param name="points">The points.</param>
            <param name="polygon">The PLG.</param>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.#ctor(Syncfusion.Chart.Vector3D[],Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Polygon"/> class.
            </summary>
            <param name="points">The points.</param>
            <param name="br">The br.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.#ctor(Syncfusion.Chart.Vector3D[],Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Polygon"/> class.
            </summary>
            <param name="points">The points.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.#ctor(Syncfusion.Chart.Vector3D[],Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Polygon"/> class.
            </summary>
            <param name="points">The points.</param>
            <param name="br">The br.</param>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.#ctor(Syncfusion.Chart.Vector3D[],Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Polygon"/> class.
            </summary>
            <param name="points">The points.</param>
            <param name="br">The br.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.#ctor(Syncfusion.Chart.Vector3D[],Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Polygon"/> class.
            </summary>
            <param name="points">The points.</param>
            <param name="br">The br.</param>
            <param name="pen">The pen.</param>
            <param name="IsPNF">The PNF.</param>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.#ctor(Syncfusion.Chart.Vector3D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Polygon"/> class.
            </summary>
            <param name="normal">The normal.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.#ctor(Syncfusion.Chart.Vector3D[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Polygon"/> class.
            </summary>
            <param name="points">The points.</param>
            <param name="clipPolygon">if set to <c>true</c> [clip polygon].</param>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.#ctor(Syncfusion.Chart.Polygon)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Polygon"/> class.
            </summary>
            <param name="poly">The poly.</param>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Syncfusion.Chart.Polygon"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.CreateRectangle(Syncfusion.Drawing.RectangleF,System.Double,Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Creates the polygon by specified rectangle.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="z">The Z coordinate.</param>
            <param name="brushInfo">The brush info.</param>
            <param name="pen">The pen.</param>
            <returns>Returns Polygon.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.GetNormal(Syncfusion.Chart.Matrix3D)">
            <summary>
            Gets the normal.
            </summary>
            <param name="transform">The transform.</param>
            <returns>Returns Vector3D instance.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.Draw(Syncfusion.Chart.Graphics3D)">
            <summary>
            Draws to the specified <see cref="T:Syncfusion.Chart.Graphics3D"/>.
            </summary>
            <param name="g3d">The g3d.</param>
            <returns>Return ChartRegion.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.Transform(Syncfusion.Chart.Matrix3D)">
            <summary>
            Transforms by the specified <see cref="T:Syncfusion.Chart.Matrix3D"/>.
            </summary>
            <param name="matrix3D">The <see cref="T:Syncfusion.Chart.Matrix3D"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns Polygon.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.CalcNormal">
            <summary>
            Calculates the normal.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.DrawPolygon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,System.Int32)">
            <summary>
            Draws the polygon.
            </summary>
            <param name="g">The g.</param>
            <param name="pen">The pen.</param>
            <param name="gp">The gp.</param>
            <param name="coef">The coefficient.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.FillPolygon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,System.Int32)">
            <summary>
            Fills the polygon.
            </summary>
            <param name="g">The g.</param>
            <param name="br">The br.</param>
            <param name="gp">The gp.</param>
            <param name="coef">The coefficient.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.FillPolygon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,System.Int32)">
            <summary>
            Fills the polygon.
            </summary>
            <param name="g">The g.</param>
            <param name="brInfo">The br info.</param>
            <param name="gp">The gp.</param>
            <param name="coef">The coefficient.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.Polygon.LigthColor(Syncfusion.Drawing.Color,System.Int32)">
            <summary>
            Lights the color.
            </summary>
            <param name="color">The color.</param>
            <param name="coef">The coefficient.</param>
            <returns>Returns the light color.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Chart.Pseudo3DText">
            <summary>
            Represents the label positioned in the 3D.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Pseudo3DText.Font">
            <summary>
            Gets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Syncfusion.Chart.Pseudo3DText.Bounds">
            <summary>
            Gets the bound.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Pseudo3DText.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Syncfusion.Chart.Pseudo3DText.Location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Syncfusion.Chart.Pseudo3DText.Alignment">
            <summary>
            Gets or sets the alignment.
            </summary>
            <value>The alignment.</value>
        </member>
        <member name="P:Syncfusion.Chart.Pseudo3DText.Matrix">
            <summary>
            Gets or sets the matrix.
            </summary>
            <value>The matrix.</value>
        </member>
        <member name="M:Syncfusion.Chart.Pseudo3DText.#ctor(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Chart.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Pseudo3DText"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="br">The br.</param>
            <param name="loc">The loc.</param>
        </member>
        <member name="M:Syncfusion.Chart.Pseudo3DText.#ctor(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Chart.Vector3D,Syncfusion.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Pseudo3DText"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="br">The br.</param>
            <param name="loc">The loc.</param>
            <param name="bounds">Bounds of the text</param>
        </member>
        <member name="M:Syncfusion.Chart.Pseudo3DText.Draw(Syncfusion.Chart.Graphics3D)">
            <summary>
            Draws to the specified <see cref="T:Syncfusion.Chart.Graphics3D"/>.
            </summary>
            <param name="g3d">The <see cref="T:Syncfusion.Chart.Graphics3D"/>.</param>
            <returns>Returns ChartRegion.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Pseudo3DText.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Return polygon.</returns>
        </member>
        <member name="T:Syncfusion.Chart.Vector3D">
            <summary>
            Represents the coordinates of a 3D point.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Vector3D.Empty">
            <summary>
            The empty <see cref="T:Syncfusion.Chart.Vector3D"/>. All coordinates is zero.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Vector3D.X">
            <summary>
            Gets the X coordinate.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:Syncfusion.Chart.Vector3D.Y">
            <summary>
            Gets the Y coordinate.
            </summary>
            <value>The Y.</value>
        </member>
        <member name="P:Syncfusion.Chart.Vector3D.Z">
            <summary>
            Gets the Z coordinate.
            </summary>
            <value>The Z.</value>
        </member>
        <member name="P:Syncfusion.Chart.Vector3D.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>True</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.Vector3D.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value><c>True</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.Chart.Vector3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Vector3D"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:Syncfusion.Chart.Vector3D.op_Subtraction(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Vector3D.op_Addition(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Vector3D.op_Multiply(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D)">
            <summary>
            Implements the cross product operation.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Vector3D.op_BitwiseAnd(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D)">
            <summary>
            Implements the dot product operation.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Vector3D.op_Multiply(Syncfusion.Chart.Vector3D,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="v1">The v1.</param>
            <param name="val">The val.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Vector3D.op_LogicalNot(Syncfusion.Chart.Vector3D)">
            <summary>
            Implements the operator !.
            </summary>
            <param name="v1">The v1.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Vector3D.op_Equality(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Vector3D.op_Inequality(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Vector3D.GetLength">
            <summary>
            Gets the length.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Vector3D.Normalize">
            <summary>
            Normalizes this vector.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Vector3D.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/> method.
            </summary>
            <returns>The text.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Vector3D.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.Vector3D.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:Syncfusion.Chart.LegendItemClickEventHandler">
            <summary>
            Delegate that is to be used with ChartLegend.click event. This Event is fired when the legend items is clicked.
            Handle this event to customize chart when a legend item is clicked.
            </summary>
            <param name="sender" type="object">
                <para>
                Sender.
                </para>
            </param>
            <param name="e" type="Syncfusion.Windows.Forms.Chart.ChartLegendFilterItemsEventArgs">
                <para>
                Argument.
                </para>
            </param>
        </member>
        <member name="T:Syncfusion.Chart.LegendFilterItemsEventHandler">
            <summary>
            Delegate that is to be used with ChartLegend.FilterItems event. This Event is fired when the legend items need to be filtered.
            Handle this event to change the collection of LegendItems that the legend contains.
            </summary>
            <param name="sender" type="object">
                <para>
                Sender.
                </para>
            </param>
            <param name="e" type="Syncfusion.Windows.Forms.Chart.ChartLegendFilterItemsEventArgs">
                <para>
                Argument.
                </para>
            </param>
        </member>
        <member name="T:Syncfusion.Chart.LegendDrawItemEventHandler">
            <summary>
            Delegate that is to be used with ChartLegend.DrawItem event. This event is fired when a legend item needs to draw. Handle this event to change the drawing of items.
            </summary>
            <param name="sender" type="object">
                <para>
                Sender.
                </para>
            </param>
            <param name="e" type="Syncfusion.Windows.Forms.Chart.ChartLegendDrawItemEventArgs">
                <para>
                Argument.
                </para>
            </param>
        </member>
        <member name="T:Syncfusion.Chart.ChartLegendMinSizeEventHandler">
            <summary>
            Delegate that is to be used with ChartLegend.MinSize event. This event is fired when the legend's minimum size is to be fixed.
            </summary>
            <param name="sender" type="object">
                <para>
                Sender.
                </para>
            </param>
            <param name="e" type="Syncfusion.Windows.Forms.Chart.ChartLegendMinSizeEventArgs">
                <para>
                Argument.
                </para>
            </param>
        </member>
        <member name="T:Syncfusion.Chart.LegendDrawItemTextEventHandler">
            <summary>
            Delegate that is to be used with ChartLegend.DrawItemText event. This event is fired when a legend item text needs to draw. Handle this event to change the drawing of items text.
            </summary>
            <param name="sender" type="object">
                <para>
                Sender.
                </para>
            </param>
            <param name="e" type="Syncfusion.Windows.Forms.Chart.ChartLegendDrawItemTextEventArgs">
                <para>
                Argument.
                </para>
            </param>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendDrawItemTextEventArgs.Graphics">
            <summary>
            Gets the graphics to draw legend.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendDrawItemTextEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether this LegendDrawItemTextEventArgs is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendDrawItemTextEventArgs.Text">
            <summary>
            Gets or sets text of Legend item
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendDrawItemTextEventArgs.TextRect">
            <summary>
            Gets bounds of legend item
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendDrawItemTextEventArgs.#ctor(Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.String,Syncfusion.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartLegendDrawItemTextEventArgs"/> class.
            </summary>
            <param name="g" type="System.Drawing.Graphics">
                <para>
                Graphics object.
                </para>
            </param>
            <param name="text" type="Syncfusion.Windows.Forms.Chart.LegendItem">
                <para>
                Legend item text to be rendered.
                </para>
            </param>
            <param name="m_textRect" type="System.Drawing.Point">
                <para>
                 Bounds of the legend item.
                </para>
            </param>     
        </member>
        <member name="T:Syncfusion.Chart.ChartLegendFilterItemsEventArgs">
            <summary>
            Event argument that is to be used with ChartLegend.FilterItems event. This
            event is raised before the legend items are rendered. This can be used to remove any item conditionally.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendFilterItemsEventArgs.#ctor(Syncfusion.Chart.ChartLegendItem[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartLegendFilterItemsEventArgs"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendFilterItemsEventArgs.#ctor(Syncfusion.Chart.ChartLegendItemsCollection)">
            <summary>
                Constructor.
            </summary>
            <param name="items" type="Syncfusion.Windows.Forms.Chart.LegendItem[]">
                <para>
                Legend items that are to be rendered.
                </para>
            </param>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendFilterItemsEventArgs.Items">
            <summary>
                Gets or sets the legend items that are to be rendered.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartLegendItemClickEventArgs">
            <summary>
            Event argument that is to be used with ChartLegend.FilterItems event. This
            event is raised before the legend items are rendered. This can be used to remove any item conditionally.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemClickEventArgs.#ctor(Syncfusion.Chart.ChartLegendItem,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartLegendItemClickEventArgs"/> class.
            </summary>
            <param name="item" type="Syncfusion.Windows.Forms.Chart.LegendItem[]">
                <para>
                Legend item that was clicked.
                </para>
            </param>
            <param name="index"></param>
            <param name="legendIndex"></param>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemClickEventArgs.Item">
            <summary>
                Gets or sets the legend item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemClickEventArgs.Index">
            <summary>
                Gets the index of legend item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemClickEventArgs.LegendIndex">
            <summary>
                Gets the index of legend in Chart Legends collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartLegendDrawItemEventArgs">
            <summary>
             Delegate that is to be used with ChartLegend.DrawItem event. This event is fired when a legend item needs to draw. Handle this event to change the drawing of items.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendDrawItemEventArgs.Graphics">
            <summary>
            Gets the graphics to draw the legend.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendDrawItemEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Chart.ChartLegendDrawItemEventArgs"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendDrawItemEventArgs.Index">
            <summary>
            Gets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendDrawItemEventArgs.LegendItem">
            <summary>
            Gets the legend item.
            </summary>
            <value>The legend item.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendDrawItemEventArgs.Location">
            <summary>
            Gets or sets the location of the item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendDrawItemEventArgs.Size">
            <summary>
            Gets or sets the size of the item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendDrawItemEventArgs.Bounds">
            <summary>
            Gets or sets the bounds of the item. 
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendDrawItemEventArgs.#ctor(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartLegendItem,Syncfusion.Drawing.Point,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="g" type="System.Drawing.Graphics">
                <para>
                Graphics object.
                </para>
            </param>
            <param name="item" type="Syncfusion.Windows.Forms.Chart.LegendItem">
                <para>
                Legend item to be rendered.
                </para>
            </param>
            <param name="loc" type="System.Drawing.Point">
                <para>
                Location of the legend item.
                </para>
            </param>
            <param name="index" type="int">
                <para>
                Index value of the legend item being rendered.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendDrawItemEventArgs.#ctor(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartLegendItem,Syncfusion.Drawing.Rectangle,System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="g" type="System.Drawing.Graphics">
                <para>
                Graphics object.
                </para>
            </param>
            <param name="item" type="Syncfusion.Windows.Forms.Chart.LegendItem">
                <para>
                Legend item to be rendered.
                </para>
            </param>
            <param name="bounds" type="System.Drawing.Point">
                <para>
                Bounds of the legend item.
                </para>
            </param>
            <param name="index" type="int">
                <para>
                Index value of the legend item being rendered.
                </para>
            </param>
        </member>
        <member name="T:Syncfusion.Chart.ChartLegendMinSizeEventArgs">
            <summary>
            Argument that is to be used with ChartLegend.MinSize event. This event is fired when the legend's minimum size is to be fixed.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendMinSizeEventArgs.#ctor(Syncfusion.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartLegendMinSizeEventArgs"/> class.
            </summary>
            <param name="size" type="System.Drawing.Size">
                <para>
                Size to be used for the legend.
                </para>
            </param>
            <returns>
                A void value.
            </returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendMinSizeEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Chart.ChartLegendMinSizeEventArgs"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendMinSizeEventArgs.Size">
            <summary>
                Gets or sets the minimum size to be used for the legend.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartLegendItem">
            <summary>
            The ChartLegendItem class holds information about each legend item like text, color and interior. Use this to add
            custom legend items through the ChartLegend.CustomItems list. Or parse through the auto generated ChartLegend.Items list.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItem.m_isLegendTextColor">
            <summary>
            Represent the each legend item having text color or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItem.m_children">
            <summary>
            The collection of subitems.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItem.m_text">
            <summary>
            The text of title.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItem.m_style">
            <summary>
            The appearance style of item.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItem.m_visible">
            <summary>
            Indicates whether item is visible.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItem.m_isChecked">
            <summary>
            Indicates whether item is checked.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItem.m_bounds">
            <summary>
            The bounds of item.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItem.m_iconRect">
            <summary>
            The bounds of icon.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItem.m_textRect">
            <summary>
            The bounds of title.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItem.m_isDrawingShadow">
            <summary>
            Indicates is the shadow drawing pass.
            </summary>
            <exclude/>
        </member>
        <member name="E:Syncfusion.Chart.ChartLegendItem.Changed">
            <summary>
            Raised when properties are changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartLegendItem.CheckedChanged">
            <summary>
            Raised when <see cref="P:Syncfusion.Chart.ChartLegendItem.IsChecked"/> property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.IsLegendTextColor">
            <summary>
            Gets and sets legend item having text color or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.Children">
            <summary>
            Returns the the child collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.ItemStyle">
            <summary>
            Returns the <see cref="T:Syncfusion.Chart.ChartLegendItemStyle"/> for this item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.Font">
            <summary>
            Gets or sets the font of the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.ImageIndex">
            <summary>
            Gets or sets the image index value of the item in the item's image list.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.ImageList">
            <summary>
            Gets or sets the ImageList associated with this item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.Interior">
            <summary>
            Gets or sets the interior brush for the rectangular area that represents a legend.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.RepresentationSize">
            <summary>
            Gets or sets the size of the rectangle holding the representation icon of the item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.ShowSymbol">
            <summary>
            Indicates whether the symbol is to be displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.Spacing">
            <summary>
            Gets or sets the spacing of the item within the legend.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.Symbol">
            <summary>
            Gets or sets the symbol that is to be associated with this item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.Border">
            <summary>
            Gets or sets the border item that is to be associated with this item's border.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.Text">
            <summary>
            Gets or sets the text of the item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.TextColor">
            <summary>
            Gets or sets the color of the text of the item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.Type">
            <summary>
            Gets or sets the type of representation for the legend item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.ShowIcon">
            <summary>
            Indicates whether the icon is to be displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.IconAlignment">
            <summary>
            Gets or sets the left/right alignment of the icon with respect to the legend text.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.TextAligment">
            <summary>
            Gets or sets the vertical alignment of the legend text.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.VisibleCheckBox">
            <summary>
            Indicates if the checkbox associated with this legend item is to be displayed. Also see <see cref="P:Syncfusion.Chart.ChartLegendItem.IsChecked"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.ShowShadow">
            <summary>
            Indicates if the shadow is to be shown.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.ShadowOffset">
            <summary>
            Gets or sets the size of shadow offset.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.ShadowColor">
            <summary>
            Gets or sets the color of the Shadow.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.Visible">
            <summary>
            Gets or sets value indicates whether <see cref="T:Syncfusion.Chart.ChartLegendItem"/> is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.IsChecked">
            <summary>
            Gets or sets the state of <see cref="T:Syncfusion.Chart.ChartLegendItem"/> checkbox.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.TextLines">
            <summary>
            Gets or sets the lines of text in multiline configurations.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.Bounds">
            <summary>
            Gets the rendering bounds of the <see cref="T:Syncfusion.Chart.ChartLegendItem"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItem.Image">
            <summary>
            Gets or sets the icon image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.#ctor">
            <summary>
                Overloaded constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.#ctor(System.String)">
            <summary>
                Overloaded constructor.
            </summary>
            <param name="text">Text of item.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.SetLegend(Syncfusion.Chart.IChartLegend)">
            <summary>
            Sets the legend.
            </summary>
            <param name="legend">The legend.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.SetOwner(Syncfusion.Chart.ChartLegendItem)">
            <summary>
            Sets the owner.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.IsHit(System.Int32,System.Int32)">
            <summary>
            Indicates if <see cref="T:Syncfusion.Chart.ChartLegendItem"/> contains the specified coordinates.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.Measure(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Measures the size of <see cref="T:Syncfusion.Chart.ChartLegendItem"/>.
            </summary>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.Measure(Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.String)">
            <summary>
            Measures the size of the chart legend item.
            </summary>
            <param name="g">Graphics</param>
            <param name="text">Legend text</param>
            <returns>size of the chart legend item</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.Measure(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle)">
            <summary>
            Measures the size of <see cref="T:Syncfusion.Chart.ChartLegendItem"/>.
            </summary>
            <param name="g">Graphics object used for drawing the legend item</param>
            <param name="bounds">Rectangle defining the bounds of legend item</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.Arrange(Syncfusion.Drawing.RectangleF)">
            <summary>
            Sets the bounds of <see cref="T:Syncfusion.Chart.ChartLegendItem"/>.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.Draw(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Draws the <see cref="T:Syncfusion.Chart.ChartLegendItem"/>.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.Draw(Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.String,System.Boolean)">
            <summary>
            Draw the chart legend item. 
            </summary>
            <param name="g">Graphics</param>
            <param name="text">Legend text</param>
            <param name="isDrawIcon">True, if indicates wheather draw the icon, false otherwise.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.Draw(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.StringFormat)">
            <summary>
            Draws the <see cref="T:Syncfusion.Chart.ChartLegendItem"/>.        
            </summary>        
            <param name="g">Graphics object</param>
            <param name="borderPen">RectangleF object. Legend item border will be drawn with this Pen. If border is not required pass null as value for this parameter</param>
            <param name="bounds">RectangleF object. Legend item will be drawn within the bounds of this rectangle</param>
            <param name="format">StringFormat object. Legend item text will be drawn in the specified string format</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.DisposeLegendItem">
            <summary>
            Disposes legend item object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.DrawInternal(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Internal method for the drawing of item.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.DrawInternal(Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.String,System.Boolean)">
            <summary>
            Internal method for the drawing of item.
            </summary>
            <param name="g">Graphics</param>
            <param name="text">lLegend text</param>
            <param name="isDrawIcon">True, if indicates draw an icon, false otherwise</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.GetBrushInfo">
            <summary>
            Returns <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> for the icon.
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.GetPen">
            <summary>
            Returns border <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/> for the icon.
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.GetLinePen">
            <summary>
            Returns line <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/> for the icon.
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.GetTextBrush">
            <summary>
            Returns <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Brush"/> for the text.
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.OnCheckedChanged(System.EventArgs)">
            <summary>
            This method is called when <see cref="P:Syncfusion.Chart.ChartLegendItem.IsChecked"/> was changed.
            </summary>
            <param name="args"></param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.OnChildrenChanged(Syncfusion.Chart.ChartBaseList,Syncfusion.Chart.ChartListChangeArgs)">
            <summary>
            Called when [children changed].
            </summary>
            <param name="list">The list.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.RaiseChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Chart.ChartLegendItem.Changed"/> event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.RaiseCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Chart.ChartLegendItem.CheckedChanged"/> event.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItem.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Chart.ChartLegendItemType)">
            <summary>
            Draws legend icon by the specified <see cref="T:Syncfusion.Chart.ChartLegendItemType"/>.
            </summary>
            <param name="g">Instance of <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="bounds">Rectangle of icon.</param>
            <param name="shape">Shape of icon.</param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesLegendItem">
            <summary>
            This type is used internally to create legend items associated with a series. Such auto generated legend items are usually 
            of this type in the <see cref="!:Syncfusion.Windows.Forms.Chart.ChartLegendItem"/> list.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesLegendItem.Series">
            <summary>
            The <see cref="T:Syncfusion.Chart.ChartSeries"/> corresponding to this item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesLegendItem.DrawSeriesIcon">
            <summary>
            Indicates the method for the drawing of legend icon. If true, an icon representing the series type will be rendered.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesLegendItem.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initialize new instance of <see cref="T:Syncfusion.Chart.ChartSeriesLegendItem"/> class.
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesLegendItem.#ctor(Syncfusion.Chart.ChartSeries,System.Int32)">
            <summary>
            Initialize new instance of <see cref="T:Syncfusion.Chart.ChartSeriesLegendItem"/> class.
            </summary>
            <param name="series"></param>
            <param name="index"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesLegendItem.Refresh(System.Boolean)">
            <summary>
            Sets settings of item by series.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesLegendItem.CopySymbol(System.Object,System.Object)">
            <summary>
            ChartLegendItem.CopySymbol method.
            </summary>
            <param name="src">Instance of <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/>.</param>        
            <param name="target">Instance of <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesLegendItem.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Chart.ChartLegendItemType)">
            <summary>
            Overrides <see cref="M:Syncfusion.Chart.ChartLegendItem.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Chart.ChartLegendItemType)"/> method.
            </summary>
            <param name="g">Instance of <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="bounds">Rectangle of icon.</param>
            <param name="shape">Shape of icon.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesLegendItem.OnCheckedChanged(System.EventArgs)">
            <summary>
            Overrides <see cref="M:Syncfusion.Chart.ChartLegendItem.OnCheckedChanged(System.EventArgs)"/> method.
            </summary>
            <param name="args">Argument.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesLegendItem.GetBrushInfo">
            <summary>
            Overrides <see cref="M:Syncfusion.Chart.ChartLegendItem.GetBrushInfo"/> method.
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.ChartTrendlineLegendItem.Trendline">
            <summary>
            The <see cref="T:Syncfusion.Chart.ChartSeries"/> corresponding to this item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartTrendlineLegendItem.DrawSeriesIcon">
            <summary>
            Indicates the method for the drawing of legend icon. If true, an icon representing the series type will be rendered.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartTrendlineLegendItem.#ctor(Syncfusion.Chart.ChartSeries,Syncfusion.Chart.Trendline)">
            <summary>
            Initialize new instance of <see cref="T:Syncfusion.Chart.ChartSeriesLegendItem"/> class.
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartTrendlineLegendItem.#ctor(Syncfusion.Chart.ChartSeries,Syncfusion.Chart.Trendline,System.Int32)">
            <summary>
            Initialize new instance of <see cref="T:Syncfusion.Chart.ChartSeriesLegendItem"/> class.
            </summary>
            <param name="series"></param>
            <param name="index"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartTrendlineLegendItem.Refresh(System.Boolean)">
            <summary>
            Sets settings of item by series.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartTrendlineLegendItem.CopySymbol(System.Object,System.Object)">
            <summary>
            ChartLegendItem.CopySymbol method.
            </summary>
            <param name="src">Instance of <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/>.</param>        
            <param name="target">Instance of <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartTrendlineLegendItem.OnCheckedChanged(System.EventArgs)">
            <summary>
            This method is called when <see cref="P:Syncfusion.Chart.ChartLegendItem.IsChecked"/> was changed.
            </summary>
            <param name="args"></param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartTrendlineLegendItem.GetBrushInfo">
            <summary>
            Overrides <see cref="M:Syncfusion.Chart.ChartLegendItem.GetBrushInfo"/> method.
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Chart.ChartLegendItemsCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Chart.ChartLegendItem"/>s.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemsCollection.Item(System.Int32)">
            <summary>
            Looks up the collection and returns the legend item stored in the specified index.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemsCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartLegendItemsCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemsCollection.Add(Syncfusion.Chart.ChartLegendItem)">
            <summary>
            Adds the specified legend item to the collection.
            </summary>
            <param name="value">The item to add.</param>
            <returns> The position into which the new element was inserted.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemsCollection.AddRange(Syncfusion.Chart.ChartLegendItem[])">
            <summary>
            Adds item array to the collection.
            </summary>
            <param name="range">The array of items to add.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemsCollection.Remove(Syncfusion.Chart.ChartLegendItem)">
            <summary>
            Removes the specified legend item from the collection.
            </summary>
            <param name="value">
            The legend item to be removed.
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemsCollection.Insert(System.Int32,Syncfusion.Chart.ChartLegendItem)">
            <summary>
            Inserts the specified legend item in the specified index.
            </summary>
            <param name="index">
            The index value where the legend item is to be inserted.
            </param>
            <param name="value">
            The legend item that is to be inserted.
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemsCollection.IndexOf(Syncfusion.Chart.ChartLegendItem)">
            <summary>
            Returns the index value of the specified legend item.
            </summary>
            <param name="value">The legend item to look for.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemsCollection.ToArray">
            <summary>
            Copies the elements of the array.
            </summary>
            <returns>Returns array of ChartLegendItem.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemsCollection.Contains(Syncfusion.Chart.ChartLegendItem)">
            <summary>
            Indicates whether the specified item is in the list.
            </summary>
            <param name="value">The System.Object to locate in the System.Collections.IList.</param>
            <returns>true if the ChartLegendItem is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemsCollection.Validate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value
            </summary>
            <param name="obj">The object to validate.</param>
            <returns>If is true, value is approved.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Chart.ChartLegendItemStyle">
            <summary>
            Defines the style of a <see cref="T:Syncfusion.Chart.ChartLegendItem"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys">
            <summary>
            Contains the keys for each properties of <see cref="T:Syncfusion.Chart.ChartLegendItemStyle"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.Font">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.Font"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.ImageIndex">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.Font"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.ImageList">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.ImageList"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.Interior">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.Interior"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.RepresentationSize">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.RepresentationSize"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.ShowSymbol">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.ShowSymbol"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.Spacing">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.Spacing"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.Symbol">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.Symbol"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.Border">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.Border"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.TextColor">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.TextColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.Type">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.Type"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.ShowIcon">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.ShowIcon"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.IconAlignment">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.IconAlignment"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.TextAlignment">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.TextAlignment"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.VisibleCheckBox">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.VisibleCheckBox"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.ShowShadow">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.ShowShadow"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.ShadowOffset">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.ShadowOffset"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.ShadowColor">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.ShadowColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.BorderColor">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.BorderColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys.Url">
            <summary>
            The key of <see cref="P:Syncfusion.Chart.ChartLegendItemStyle.Url"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemStyle.m_Symbol">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.Url">
            <summary>
            Gets or sets the Url that is to be associated with a <see cref="T:Syncfusion.Chart.ChartPoint"/>. This Url will be applied to the point if
            EnableUrl and CalcRegion property is set to True.This property is applicable only for ChartWeb.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.Default">
            <summary>
            Gets the default.
            </summary>
            <value>The default.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.IsEmpty">
            <summary>
            Gets a value indicating whether this style is empty.
            </summary>
            <value><c>true</c> if this style is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.BaseStyle">
            <summary>
            Gets or sets the base style.
            </summary>
            <value>The base style.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.Font">
            <summary>
            Gets or sets the font of the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.ImageIndex">
            <summary>
            Gets or sets the image index value of the item in the item's image list.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.ImageList">
            <summary>
            Gets or sets the ImageList associated with this item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.Interior">
            <summary>
            Gets or sets the interior for the rectangular area that represents a legend.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.RepresentationSize">
            <summary>
            Gets or sets the size of the rectangle holding the representation of the item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.ShowSymbol">
            <summary>
            Gets or sets a value indicating whether [show symbol].
            </summary>
            <value><c>true</c> if [show symbol]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.Spacing">
            <summary>
            Gets or sets the spacing of the item within the legend.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.Symbol">
            <summary>
            Gets or sets the symbol that is to be associated with this item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.Border">
            <summary>
            Gets or sets the border that is to be associated with this item's border.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.TextColor">
            <summary>
            Gets or sets the color of the text of the item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.BorderColor">
            <summary>
            Gets or sets the color of the border of the item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.Type">
            <summary>
            Gets or sets the type of representation for the legend item.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.ShowIcon">
            <summary>
            Gets or sets a value indicating whether [show icon].
            </summary>
            <value><c>true</c> if [show icon]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.IconAlignment">
            <summary>
            Gets or sets the icon alignment.
            </summary>
            <value>The icon alignment.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.VisibleCheckBox">
            <summary>
            Gets or sets a value indicating whether [visible check box].
            </summary>
            <value><c>true</c> if [visible check box]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.ShowShadow">
            <summary>
            Gets or sets a value indicating whether [show shadow].
            </summary>
            <value><c>true</c> if [show shadow]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.ShadowOffset">
            <summary>
            Gets or sets the shadow offset.
            </summary>
            <value>The shadow offset.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLegendItemStyle.ShadowColor">
            <summary>
            Gets or sets the color of the shadow.
            </summary>
            <value>The color of the shadow.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartLegendItemStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemStyle.#ctor(System.Collections.Hashtable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartLegendItemStyle"/> class.
            </summary>
            <param name="store">The store.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemStyle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemStyle.Reset(Syncfusion.Chart.ChartLegendItemStyle.ChartLegendStyleKeys)">
            <summary>
            Resets style value by the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemStyle.Clear">
            <summary>
            Clears the style values.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemStyle.CreateDefaultSymbol">
            <summary>
            Creates the default symbol info.
            </summary>
            <returns>Returns ChartSymbolInfo instance.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemStyle.CreateDefault">
            <summary>
            Creates the default style.
            </summary>
            <returns>Returns ChartLegendItemStyle instance.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemStyle.SetToLowerLevel(Syncfusion.Chart.ChartLegendItemStyle)">
            <summary>
            Sets the parent to the lower level.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLegendItemStyle.Dispose">
            <summary>
            Method to dispose ChartLegendItemStyle object
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.IChartLegend">
            <summary>
             Specifies the default properties of legend.
            </summary>  
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.ItemsTextAligment">
            <summary>
            Gets or sets the items text aligment.
            </summary>
            <value>The items text aligment.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.ItemsAlignment">
            <summary>
            Gets or sets the items alignment.
            </summary>
            <value>The items alignment.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.RepresentationType">
            <summary>
            Gets or sets the type of the representation.
            </summary>
            <value>The type of the representation.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.Alignment">
            <summary>
            Gets or sets the alignment.
            </summary>
            <value>The alignment.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.ItemsSize">
            <summary>
            Gets or sets the size of the items.
            </summary>
            <value>The size of the items.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.ItemsShadowOffset">
            <summary>
            Gets or sets the items shadow offset.
            </summary>
            <value>The items shadow offset.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.ItemsShadowColor">
            <summary>
            Gets or sets the color of the items shadow.
            </summary>
            <value>The color of the items shadow.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.Spacing">
            <summary>
            Gets or sets the spacing.
            </summary>
            <value>The spacing.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.RowsCount">
            <summary>
            Gets or sets the rows count.
            </summary>
            <value>The rows count.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.ColumnsCount">
            <summary>
            Gets or sets the columns count.
            </summary>
            <value>The columns count.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.ShowSymbol">
            <summary>
            Gets or sets a value indicating whether [show symbol].
            </summary>
            <value><c>true</c> if [show symbol]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.OnlyColumnsForFloating">
            <summary>
            Gets or sets a value indicating whether [only columns for floating].
            </summary>
            <value>
               <c>true</c> if [only columns for floating]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.FloatingAutoSize">
            <summary>
            Gets or sets a value indicating whether [floating auto size].
            </summary>
            <value><c>true</c> if [floating auto size]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.ShowItemsShadow">
            <summary>
            Gets or sets a value indicating whether [show items shadow].
            </summary>
            <value><c>true</c> if [show items shadow]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.SetDefSizeForCustom">
            <summary>
            Gets or sets a value indicating whether [set def size for custom].
            </summary>
            <value>
                <c>true</c> if [set def size for custom]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.BackColor">
            <summary>
            Gets or sets the background color of the legend.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartLegend.ForeColor">
            <summary>
            Gets or sets the foreground color of the legend.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.IChartLegend.FilterItems">
            <summary>
            Fired when the legend items need to be filtered. Handle this event to change the collection of ChartLegendItems that the legend contains.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.IChartDateTimeDefaults">
            <summary>
            Contains the methods to return the default information of calendar.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.IChartDateTimeDefaults.GetCalendar">
            <summary>
            Gets the calendar.
            </summary>
            <returns>Returns calender.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.IChartDateTimeDefaults.GetDaysInYear">
            <summary>
            Gets the days in year.
            </summary>
            <returns></returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.IChartDateTimeDefaults.GetDaysInMonth">
            <summary>
            Gets the days in month.
            </summary>
            <returns></returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.IChartDateTimeDefaults.GetMinDaysInMonth">
            <summary>
            Gets the min days in month.
            </summary>
            <returns>Gets minimum days in week.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.IChartDateTimeDefaults.GetDaysInWeek">
            <summary>
            Gets the days in week.
            </summary>
            <returns>Returns no of days in week.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.IChartDateTimeDefaults.GetFirstDayOfWeek">
            <summary>
            Gets the first day of week.
            </summary>
            <returns>Gets first day of week.</returns>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Chart.ChartDateTimeDefaults">
            <summary>
            Implements the <see cref="T:Syncfusion.Chart.IChartDateTimeDefaults"/> interface;
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeDefaults.GetCalendar">
            <summary>
            Gets the calendar.
            </summary>
            <returns>Returns calender object.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeDefaults.GetDaysInYear">
            <summary>
            Gets the days in year.
            </summary>
            <returns>Returns no of days in year.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeDefaults.GetDaysInMonth">
            <summary>
            Gets the days in month.
            </summary>
            <returns>Returns the no of days in month.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeDefaults.GetMinDaysInMonth">
            <summary>
            Gets the min days in month.
            </summary>
            <returns>Returns no of days in month.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeDefaults.GetDaysInWeek">
            <summary>
            Gets the days in week.
            </summary>
            <returns>Returns no of days in week.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeDefaults.GetFirstDayOfWeek">
            <summary>
            Gets the first day of week.
            </summary>
            <returns>Returns first day of the week.</returns>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Chart.ChartDateTimeIntervalType">
            <summary>
            Types of DateTime intervals that are supported by Essential Chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDateTimeIntervalType.Auto">
            <summary>
            The interval defaults to the most appropriate for the range of values being considered. For example, if the range
            is a few years, the interval would be internally set to years.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDateTimeIntervalType.Years">
            <summary>
            Interval is set to years.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDateTimeIntervalType.Months">
            <summary>
            Interval is set to months.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDateTimeIntervalType.Weeks">
            <summary>
            Interval is set to weeks.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDateTimeIntervalType.Days">
            <summary>
            Interval is set to days.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDateTimeIntervalType.Hours">
            <summary>
            Interval is set to hours.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDateTimeIntervalType.Minutes">
            <summary>
            Interval is set to minutes.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDateTimeIntervalType.Seconds">
            <summary>
            Interval is set to seconds.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDateTimeIntervalType.MilliSeconds">
            <summary>
            Interval is set to milliseconds.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartDateTimeInterval">
            <summary>
              Represents a DateTime interval value.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartDateTimeInterval.IterationFilter">
            <summary>
            Delegate that is to be used during interaction on the range associated with an instance of ChartDateTimeInterval. If this
            delegate returns False, then that position is not used.
            <seealso cref="T:Syncfusion.Chart.ChartDateTimeInterval"/>
            </summary>
            <param name="dt" type="System.DateTime">
                <para>
                The date that is to be included or not included.
                </para>
            </param>
        </member>
        <member name="T:Syncfusion.Chart.ChartDateTimeInterval.IterationModifier">
            <summary>
            Delegate that is to be used during iteration on the range associated with an instance of ChartDateTimeInterval. This delegate can
            change the date that gets passed in during iteration.
            </summary>
            <param name="dt" type="System.DateTime">
                <para>
                The date; that is a position along the associated range during iteration. This date can be changed by this callback.
                </para>
            </param>
        </member>
        <member name="F:Syncfusion.Chart.ChartDateTimeInterval.DefaultIntervalName">
            <summary>
            Name of default interval. 
            </summary>
            <seealso cref="T:Syncfusion.Chart.ChartIntervalCollection"/>
            <seealso cref="P:Syncfusion.Chart.ChartDateTimeRange.Intervals"/>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.#ctor(Syncfusion.Chart.ChartDateTimeIntervalType,System.Double,Syncfusion.Chart.ChartDateTimeIntervalType,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartDateTimeInterval"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <param name="offsetType">Type of the offset.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.#ctor(Syncfusion.Chart.ChartDateTimeIntervalType,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartDateTimeInterval"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeInterval.Type">
            <summary>
            Gets or sets the type of this interval.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeInterval.Value">
            <summary>
            Gets or sets the value of this interval. Interval values should be interpreted in the context of <see cref="P:Syncfusion.Chart.ChartDateTimeInterval.Type"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeInterval.OffsetType">
            <summary>
            Gets or sets the type of the offset. Intervals can have offsets. Offsets merely affect the first position when an interval
            is applied to a range. They translate the first position by the value of the offset.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeInterval.Offset">
            <summary>
            Gets or sets the value of the offset. Intervals can have offsets. Offsets merely affect the first position when an interval
            is applied to a range. They translate the first position by the value of the offset.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeInterval.Parent">
            <summary>
            The <see cref="T:Syncfusion.Chart.ChartDateTimeRange"/> object with which this interval is associated. Intervals are not created stand alone but
            in the context of a range.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Iterator">
            <summary>
            Overloaded. Creates and returns a default iterator that will iterate over the associated range (<see cref="P:Syncfusion.Chart.ChartDateTimeInterval.Parent"/>.
            </summary>
            <returns>Returns IEnumerable object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Iterator(Syncfusion.Chart.ChartDateTimeInterval.IterationFilter)">
            <summary>
            Creates and returns an iterator that will iterate over the associated range (<see cref="P:Syncfusion.Chart.ChartDateTimeInterval.Parent"/>. The
            IterationFilter callback will be called for each position in this range to check if the position should be included.
            </summary>
            <param name="filter">The filter.</param>
            <returns>Returns IEnumerable object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Iterator(Syncfusion.Chart.ChartDateTimeInterval.IterationModifier)">
            <summary>
            Creates and returns an iterator that will iterate over the associated range (<see cref="P:Syncfusion.Chart.ChartDateTimeInterval.Parent"/>. The
            IterationModifier callback will be called for each position in this range to allow the DateTime value of each position to
            be modified.
            </summary>
            <param name="modifier">The modifier.</param>
            <returns>Returns IEnumerable object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Iterator(Syncfusion.Chart.ChartDateTimeInterval.IterationFilter,Syncfusion.Chart.ChartDateTimeInterval.IterationModifier)">
            <summary>
            Creates and returns an iterator that will iterate over the associated range (<see cref="P:Syncfusion.Chart.ChartDateTimeInterval.Parent"/>. The
            IterationModifier callback will be called for each position in this range to allow the DateTime value of each position to
            be modified. The IterationFilter callback will be called for each position in this range to check if the position should be included.
            </summary>
            <param name="filter">The filter.</param>
            <param name="modifier">The modifier.</param>
            <returns>Returns IEnumerable object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Iterator(System.DateTime,System.DateTime)">
            <summary>
            Creates and returns a default iterator that will iterate over the associated range (<see cref="P:Syncfusion.Chart.ChartDateTimeInterval.Parent"/>.
            Only values that are between rangeStart and rangeEnd will be used.
            </summary>
            <param name="rangeStart">The range start.</param>
            <param name="rangeEnd">The range end.</param>
            <returns>Returns IEnumerable object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Iterator(System.DateTime,System.DateTime,Syncfusion.Chart.ChartDateTimeInterval.IterationFilter)">
            <summary>
            Creates and returns an iterator that will iterate over the associated range (<see cref="P:Syncfusion.Chart.ChartDateTimeInterval.Parent"/>.
            Only values that are between rangeStart and rangeEnd will be used. In this range, the IterationFilter callback will be called for
            each position in this range to check if the position should be included.
            </summary>
            <param name="rangeStart">The range start.</param>
            <param name="rangeEnd">The range end.</param>
            <param name="filter">The filter.</param>
            <returns>Returns IEnumerable object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Iterator(System.DateTime,System.DateTime,Syncfusion.Chart.ChartDateTimeInterval.IterationModifier)">
            <summary>
            Creates and returns an iterator that will iterate over the associated range (<see cref="P:Syncfusion.Chart.ChartDateTimeInterval.Parent"/>.
            Only values that are between rangeStart and rangeEnd will be used. In this range, the IterationModifier callback will be called for
            each position in this range to allow it to be modified.
            </summary>
            <param name="rangeStart">The range start.</param>
            <param name="rangeEnd">The range end.</param>
            <param name="modifier">The modifier.</param>
            <returns>Returns IEnumerable object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Iterator(System.DateTime,System.DateTime,Syncfusion.Chart.ChartDateTimeInterval.IterationFilter,Syncfusion.Chart.ChartDateTimeInterval.IterationModifier)">
            <summary>
            Creates and returns an iterator that will iterate over the associated range (<see cref="P:Syncfusion.Chart.ChartDateTimeInterval.Parent"/>.
            Only values that are between rangeStart and rangeEnd will be used. In this range, the IterationModifier callback will be called for
            each position in this range to allow it to be modified. For each modified value, the IterationFilter callback will be called
            to check if the position should be included.
            </summary>
            <param name="rangeStart">The range start.</param>
            <param name="rangeEnd">The range end.</param>
            <param name="filter">The filter.</param>
            <param name="modifier">The modifier.</param>
            <returns>Returns IEnumerable object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.GetIntervalCount(System.Collections.IEnumerable)">
            <summary>
            Given a ChartDateTimeInterval.Enumerator instance, this method simply loops through and calculates the number of distinct positions
            in the range that the iterator represents.
            <seealso cref="T:Syncfusion.Chart.ChartDateTimeRange"/>
            </summary>
            <param name="enumerable" type="System.Collections.IEnumerable">
                <para>
                An instance of the ChartDateTimeInterval.Enumerator.
                </para>
            </param>
            <returns>
                Number of distinct positions.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.ToString">
            <summary>
            Overridden. Returns a string representation of this interval.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.ApplyInterval(System.DateTime,System.Globalization.Calendar,Syncfusion.Chart.ChartDateTimeIntervalType,System.Double)">
            <summary>
            Adds the specified interval to the specified date.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="calendar">The calendar.</param>
            <param name="type">The type of interval.</param>
            <param name="interval">The interval value.</param>
            <returns></returns>
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.SetParent(Syncfusion.Chart.ChartDateTimeRange)">
            <summary>
            Sets the owner of interval.
            </summary>
            <param name="parent">The parent <see cref="T:Syncfusion.Chart.ChartDateTimeRange"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.ApplyInterval(System.DateTime,System.Globalization.Calendar,System.Boolean)">
            <summary>
            Applies the interval to the specified date/time.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="calendar">The calendar.</param>
            <param name="first">This value indicates if is the first value of axis.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartDateTimeInterval.Enumerator">
            <summary>
            The Enumerator class which implements IEnumerable, IEnumerator.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Enumerator.#ctor(Syncfusion.Chart.ChartDateTimeInterval,System.DateTime,System.DateTime,System.Globalization.Calendar)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartDateTimeInterval.Enumerator"/> class.
            </summary>
            <param name="interval">The interval.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="calendar">The calendar.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Enumerator.#ctor(Syncfusion.Chart.ChartDateTimeInterval,System.DateTime,System.DateTime,System.Globalization.Calendar,Syncfusion.Chart.ChartDateTimeInterval.IterationFilter,Syncfusion.Chart.ChartDateTimeInterval.IterationModifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartDateTimeInterval.Enumerator"/> class.
            </summary>
            <param name="interval">The interval.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="calendar">The calendar.</param>
            <param name="iterationFilter">The iteration filter.</param>
            <param name="iterationModifier">The iteration modifier.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Enumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Enumerator.System#Collections#IEnumerator#MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeInterval.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Enumerator.AdjustDate(System.DateTime)">
            <summary>
            Adjusts the date.
            </summary>
            <param name="dt">The dt.</param>
            <returns>Returns datetime object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Enumerator.IsPastEnd(System.DateTime)">
            <summary>
            Determines whether [is past end] [the specified dt].
            </summary>
            <param name="dt">The dt.</param>
            <returns>
            	<c>true</c> if [is past end] [the specified dt]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Enumerator.GetNextDate(System.DateTime,System.Boolean)">
            <summary>
            Gets the next date.
            </summary>
            <param name="currentDate">The current date.</param>
            <param name="first">if set to <c>true</c> [first].</param>
            <returns>Returns datetime object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Enumerator.DoIterationFilter(System.DateTime)">
            <summary>
            Does the iteration filter.
            </summary>
            <param name="dt">The dt.</param>
            <returns>Returns boolean.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Enumerator.DoIterationModifier(System.DateTime)">
            <summary>
            Does the iteration modifier.
            </summary>
            <param name="dt">The dt.</param>
            <returns>Returns datetime object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Enumerator.DefaultIterationFilter(System.DateTime)">
            <summary>
            Defaults the iteration filter.
            </summary>
            <param name="dt">The dt.</param>
            <returns>Returns bool.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.Enumerator.DefaultIterationModifier(System.DateTime)">
            <summary>
            Defaults the iteration modifier.
            </summary>
            <param name="dt">The dt.</param>
            <returns>Returns DateTime object</returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartDateTimeInterval.RangeEnumerator">
            <summary>
            The RangeEnumerator class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.RangeEnumerator.#ctor(Syncfusion.Chart.ChartDateTimeInterval,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.Globalization.Calendar,Syncfusion.Chart.ChartDateTimeInterval.IterationFilter,Syncfusion.Chart.ChartDateTimeInterval.IterationModifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartDateTimeInterval.RangeEnumerator"/> class.
            </summary>
            <param name="interval">The interval.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="rangeStart">The range start.</param>
            <param name="rangeEnd">The range end.</param>
            <param name="calendar">The calendar.</param>
            <param name="iterationFilter">The iteration filter.</param>
            <param name="iterationModifier">The iteration modifier.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.RangeEnumerator.#ctor(Syncfusion.Chart.ChartDateTimeInterval,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.Globalization.Calendar)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartDateTimeInterval.RangeEnumerator"/> class.
            </summary>
            <param name="interval">The interval.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="rangeStart">The range start.</param>
            <param name="rangeEnd">The range end.</param>
            <param name="calendar">The calendar.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.RangeEnumerator.AdjustDate(System.DateTime)">
            <summary>
            Adjusts the date.
            </summary>
            <param name="dt">The dt.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeInterval.RangeEnumerator.IsPastEnd(System.DateTime)">
            <summary>
            Determines whether is the specified date most past by the end date.
            </summary>
            <param name="dt">The dt.</param>
            <returns>
                <c>true</c> if [is past end] [the specified dt]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartDateTimeRange">
            <summary>
            Specifies the start and end dates and interval time for the axis. Use this if the data points are of datetime type.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeRange.#ctor(System.DateTime,System.DateTime,System.Double,Syncfusion.Chart.ChartDateTimeIntervalType)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartDateTimeRange"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="interval">The interval.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeRange.#ctor(System.DateTime,System.DateTime,System.Double,Syncfusion.Chart.ChartDateTimeIntervalType,System.Globalization.Calendar)">
             <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartDateTimeRange"/> class.
             </summary>
             <param name="start" type="System.DateTime">
                 <para>
                 The start of this range.
                 </para>
             </param>
             <param name="end" type="System.DateTime">
                 <para>
                 The end of this range.
                 </para>
             </param>
             <param name="interval" type="double">
                 <para>
                 The value of the default interval that is to be associated with this range.
                 </para>
             </param>
             <param name="type" type="Syncfusion.Windows.Forms.Chart.ChartDateTimeIntervalType">
                 <para>
                  The type of the default interval that is to be associated with this range.
                 </para>
             </param>
             <param name="calendar" type="System.Globalization.Calendar">
                 <para>
                 The calendar that is to be associated with this range.
                 </para>
             </param>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeRange.Start">
            <summary>
            Gets the start boundary of this range.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeRange.End">
            <summary>
            Gets the end boundary of this range.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeRange.DefaultInterval">
            <summary>
            Gets the default interval associated with this range.
            <seealso cref="P:Syncfusion.Chart.ChartDateTimeRange.Intervals"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeRange.Intervals">
            <summary>
            Gets the Collection of registered intervals. (<see cref="T:Syncfusion.Chart.ChartDateTimeInterval"/>) of several types can be registered with this range. 
            Intervals afford an easy way to partition and iterate through a date range.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeRange.Calendar">
            <summary>
            Gets an instance of the <see cref="P:Syncfusion.Chart.ChartDateTimeRange.Calendar"/> associated with this date range.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeRange.ToString">
            <summary>
            Overridden. Returns a string representation of this range.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartIntervalCollection">
            <summary>
            Collection of <see cref="T:Syncfusion.Chart.ChartDateTimeInterval"/>. Each <see cref="T:Syncfusion.Chart.ChartDateTimeRange"/> object has an associated set of intervals that
            can be used to iterate over the range. ChartIntervalCollection is the repository for these intervals.
            <seealso cref="P:Syncfusion.Chart.ChartDateTimeRange.Intervals"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartIntervalCollection.#ctor(Syncfusion.Chart.ChartDateTimeRange)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartIntervalCollection"/> class.
            </summary>
            <param name="parent" type="Syncfusion.Windows.Forms.Chart.ChartDateTimeRange">
                <para>
                Range that is to be associated with all <see cref="T:Syncfusion.Chart.ChartDateTimeInterval"/> registered with this collection.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartIntervalCollection.Reset">
            <summary>
            Removes all registered intervals except the default interval.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartIntervalCollection.Clear">
            <summary>
            Removes all registered intervals including the default interval.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartIntervalCollection.Register(System.String,Syncfusion.Chart.ChartDateTimeInterval)">
            <summary>
            Registers an interval with this collection.
            </summary>
            <param name="name" type="string">
                <para>
                The registration name of the <see cref="T:Syncfusion.Chart.ChartDateTimeInterval"/> that is to be registered.
                </para>
            </param>
            <param name="interval" type="Syncfusion.Windows.Forms.Chart.ChartDateTimeInterval">
                <para>
                The interval that is to be registered.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartIntervalCollection.Remove(System.String)">
            <summary>
            Looks up the collection and removes the <see cref="T:Syncfusion.Chart.ChartDateTimeInterval"/> with the specified name.
            </summary>
            <param name="name" type="string">
                <para>
                The registration name of the <see cref="T:Syncfusion.Chart.ChartDateTimeInterval"/> to look for.
                </para>
            </param>
        </member>
        <member name="P:Syncfusion.Chart.ChartIntervalCollection.Item(System.String)">
            <summary>
            Looks up the collection and returns the <see cref="T:Syncfusion.Chart.ChartDateTimeInterval"/> with the specified name.
            </summary>
            <value>
                <para>
                The registration name of the <see cref="T:Syncfusion.Chart.ChartDateTimeInterval"/> to look for.
                </para>
            </value>
        </member>
        <member name="M:Syncfusion.Chart.ChartIntervalCollection.ToString">
            <summary>
            Overridden. Returns a string representation of this collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartIntervalCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Syncfusion.Chart.INiceRangeMaker">
            <summary>
            Interface that defines preferences and access methods used for the automatic calculation of 'nice' range
            given any range of data. 'Nice' ranges are generally more easily understood in comparison to 'raw' data.    
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.INiceRangeMaker.DesiredIntervals">
            <summary>
            Gets or sets the approximate number of intervals into which the range is to be partitioned. The actual number of
            intervals calculated will depend on the actual algorithm used.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.INiceRangeMaker.RangePaddingType">
            <summary>
            Gets or sets the padding type that will be applied for calculating the ranges for this axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.INiceRangeMaker.PreferZero">
            <summary>
            Indicates whether one boundary of the calculated range should be tweaked to zero. Such tweaking will happen
            only if zero is within a resonable distance from the calculated boundary. To ensure that one boundary
            is always zero, use the <see cref="P:Syncfusion.Chart.INiceRangeMaker.ForceZero"/> setting instead.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.INiceRangeMaker.ForceZero">
            <summary>
            Gets or Sets the result whether one boundary of the calculated range should always be tweaked to zero. 
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.INiceRangeMaker.MakeNiceRange(System.Double,System.Double,Syncfusion.Chart.ChartAxisRangePaddingType)">
            <summary>
            Given a minimum value and a maximum value, this method will calculate a 'nice' minimum value and a maxiumum value
            as well as an interval value that can be used for visually representing this data. 'Nice' values are better
            perceived by humans. For example, consider a range 1.21-3.5. A nice range that we can use to visually represent values
            in this range can be 0-3.6 with an interval of 2. You can tweak the results obtained by changing optional settings.
            </summary>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <param name="rangePaddingType">The range padding type.</param>
            <returns>Calculated <see cref="!:Syncfusion.Windows.Forms.Chart.MinMaxInfo"/>.</returns>
        </member>
        <member name="T:Syncfusion.Chart.MinMaxInfo">
            <summary>
            Simple, unchangeable class to store information on minimum and maximum values and a suggested interval.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.MinMaxInfo.min">
            <summary>
            Store min value of range.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.MinMaxInfo.max">
            <summary>
            Store max value of the range.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.MinMaxInfo.interval">
            <summary>
            Store interval.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.MinMaxInfo.Clone">
            <summary>
            Creates a copy of the MinMaxInfo object.
            </summary>
            <returns>The MinMaxInfo.</returns>
        </member>
        <member name="M:Syncfusion.Chart.MinMaxInfo.Equals(Syncfusion.Chart.MinMaxInfo)">
            <summary>
             Compares this object with another object of the same type.
            </summary>
            <param name="minMaxInfo" type="Syncfusion.Windows.Forms.Chart.MinMaxInfo">
                <para>
                The object with which this object is to be compared.
                </para>
            </param>
            <returns>
                Returns True if the objects are equal in value.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.MinMaxInfo.Contains(System.Double)">
            <summary>
            Checks whether range contains double value.
            </summary>
            <param name="d">Double to check</param>
            <returns>Bool value.</returns>
        </member>
        <member name="M:Syncfusion.Chart.MinMaxInfo.Intersects(Syncfusion.Chart.MinMaxInfo)">
            <summary>
            Checks whether range intersects with range.
            </summary>
            <param name="r">MinMaxInfo to check</param>
            <returns>Bool value.</returns>
        </member>
        <member name="E:Syncfusion.Chart.MinMaxInfo.SettingsChanged">
            <summary>
            An event that is triggered when one of the range setting is changed.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.MinMaxInfo.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            MinMaxInfo represents a range of double type values. There is a lower bound, upper bound and an associated interval.
            </summary>
            <param name="min" type="double">
                <para>
                The lower bound value.
                </para>
            </param>
            <param name="max" type="double">
                <para>
                The upper bound value.
                </para>
            </param>
            <param name="interval" type="double">
                <para>
                The interval value.
                </para>
            </param>
        </member>
        <member name="P:Syncfusion.Chart.MinMaxInfo.Delta">
            <summary>
            gets the difference between the upper and lower boundary of this range.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.MinMaxInfo.Min">
            <summary>
            Gets or sets the lower boundary of this range.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.MinMaxInfo.Max">
            <summary>
            Gets or sets the upper boundary of this range.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.MinMaxInfo.Interval">
            <summary>
            Gets or sets the value of the interval associated with this range.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.MinMaxInfo.NumberOfIntervals">
            <summary>
            Gets the number of intervals present in this range.
            <see cref="P:Syncfusion.Chart.MinMaxInfo.Interval"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.MinMaxInfo.OnSettingsChanged(System.EventArgs)">
            <summary>
            Raises the settings changed event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.MinMaxInfo.ToString">
            <summary>
            Overridden. Returns a string representation of this object.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Syncfusion.Chart.MinMaxInfoConverter">
            <summary>
            Converts instances of other types to and from a <see cref="T:Syncfusion.Chart.MinMaxInfo"/>. 
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.MinMaxInfoConverter.#ctor">
             <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.MinMaxInfoConverter"/> class.
             </summary>
        </member>
        <member name="M:Syncfusion.Chart.MinMaxInfoConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.MinMaxInfoConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.MinMaxInfoConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> to create a new value, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if changing a property on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> to create a new value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.MinMaxInfoConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.MinMaxInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.MinMaxInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.MinMaxInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Chart.MinMaxInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:Syncfusion.Chart.NiceRangeMaker">
            <summary>
            Provides the methods to compute the 'nice' range.
            </summary>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Chart.NiceRangeMaker.OpState">
            <summary>
            This class holds operational states (intermediate calculated values, support values, etc).
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.NiceRangeMaker.OpState.#ctor(Syncfusion.Chart.NiceRangeMaker,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.NiceRangeMaker.OpState"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.NiceRangeMaker.OpState.Min">
            <summary>
            Gets the min.
            </summary>
            <value>The min.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.NiceRangeMaker.OpState.Max">
            <summary>
            Gets the max.
            </summary>
            <value>The max.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.NiceRangeMaker.OpState.Interval">
            <summary>
            Gets the interval.
            </summary>
            <value>The interval.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.NiceRangeMaker.OpState.CalcMin">
            <summary>
            Gets or sets the calc min.
            </summary>
            <value>The calc min.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.NiceRangeMaker.OpState.CalcMax">
            <summary>
            Gets or sets the calc max.
            </summary>
            <value>The calc max.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.NiceRangeMaker.OpState.CalcInterval">
            <summary>
            Gets or sets the calc interval.
            </summary>
            <value>The calc interval.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.NiceRangeMaker.OpState.AdjustedPlaces">
            <summary>
            Gets or sets the adjusted places.
            </summary>
            <value>The adjusted places.</value>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.NiceRangeMaker.OpState.UpdateCalcInterval">
            <summary>
            Updates the calc interval.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.NiceRangeMaker.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.NiceRangeMaker"/> class.
            </summary>
            <param name="desiredIntervals">The desired intervals.</param>
        </member>
        <member name="M:Syncfusion.Chart.NiceRangeMaker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.NiceRangeMaker"/> class.
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.NiceRangeMaker.DesiredIntervals">
            <summary>
            Gets or sets the approximate number of intervals into which the range is to be partitioned. The actual number of
            intervals calculated will depend on the actual algorithm used.
            </summary>
            <value>The Desired Intervals.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.NiceRangeMaker.RangePaddingType">
            <summary>
            Gets or sets the padding type that will be applied for calculating the ranges for this axis.
            </summary>
            <value>The RangePaddingType type.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.NiceRangeMaker.PreferZero">
            <summary>
            Gets or Sets whether one boundary of the calculated range should be tweaked to zero. Such tweaking will happen
            only if zero is within a resonable distance from the calculated boundary. To ensure that one boundary
            is always zero, use the <see cref="P:Syncfusion.Chart.NiceRangeMaker.ForceZero"/> setting instead.
            </summary>
            <value>The PreferZero.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.NiceRangeMaker.ForceZero">
            <summary>
            Gets or Sets the result whether one boundary of the calculated range should always be tweaked to zero.
            </summary>
            <value>the ForceZero.</value>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.NiceRangeMaker.MakeNiceRange(System.Double,System.Double,Syncfusion.Chart.ChartAxisRangePaddingType)">
            <summary>
            Given a minimum value and a maximum value, this method will calculate a 'nice' minimum value and a maxiumum value
            as well as an interval value that can be used for visually representing this data. 'Nice' values are better
            perceived by humans. For example, consider a range 1.21-3.5. A nice range that we can use to visually represent values
            in this range can be 0-3.6 with an interval of 2. You can tweak the results obtained by changing optional settings.
            </summary>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <param name="rangePaddingType">The range padding type.</param>
            <returns>
            Calculated <see cref="!:Syncfusion.Windows.Forms.Chart.MinMaxInfo"/>.
            </returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.NiceRangeMaker.CreatePadding(Syncfusion.Chart.NiceRangeMaker.OpState,Syncfusion.Chart.ChartAxisRangePaddingType)">
            <summary>
            Add padding to the incoming minimum and maximum values.
            </summary>
            <param name="opState">The operational status.</param>
            <param name="rangePaddingType">The ChartAxisRangePaddingTyp.</param>
        </member>
        <member name="M:Syncfusion.Chart.NiceRangeMaker.TweakMinMax(Syncfusion.Chart.NiceRangeMaker.OpState)">
            <summary>
            Tweaks the incoming minimum and maximum values so that special conditions are handled
            properly.
            </summary>
            <param name="opState">The operational status.</param>
        </member>
        <member name="M:Syncfusion.Chart.NiceRangeMaker.AdjustPlaces(Syncfusion.Chart.NiceRangeMaker.OpState)">
            <summary>
            Raises the working values to powers of 10 such that we work with whole
            numbers. The number of places adjusted is stored in the operating state.
            </summary>
            <param name="opState">The operational status.</param>
        </member>
        <member name="M:Syncfusion.Chart.NiceRangeMaker.CalcNiceValues(Syncfusion.Chart.NiceRangeMaker.OpState)">
            <summary>
            Calculates 'nice' values by calling other methods. 
            </summary>
            <param name="opState">The operational status.</param>
        </member>
        <member name="M:Syncfusion.Chart.NiceRangeMaker.CalcNiceInterval(Syncfusion.Chart.NiceRangeMaker.OpState)">
            <summary>
            Calculates the nice interval.
            </summary>
            <param name="opState">The operational status.</param>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.NiceRangeMaker.MakeNiceNumber(System.Double)">
            <summary>
            Simple logic for creating 'nice' numbers that are close to the numbers passed in.
            </summary>
            <param name="val">
            Value whose equivalent 'nice' number is to be found.
            </param>
            <returns>Returns double.</returns>
        </member>
        <member name="M:Syncfusion.Chart.NiceRangeMaker.CalcNiceMin(Syncfusion.Chart.NiceRangeMaker.OpState)">
            <summary>
            Calculates a 'nice' minimum value given a 'nice' interval. This function basically makes the minimum
            value divisible by the interval.
            </summary>
            <param name="opState"></param>
        </member>
        <member name="M:Syncfusion.Chart.NiceRangeMaker.CalcNiceMax(Syncfusion.Chart.NiceRangeMaker.OpState)">
            <summary>
            Calculates a 'nice' maximum value given a 'nice' interval. This function basically makes the maximum
            value divisible by the interval.
            </summary>
            <param name="opState"></param>
        </member>
        <member name="M:Syncfusion.Chart.NiceRangeMaker.UndoAdjustPlaces(Syncfusion.Chart.NiceRangeMaker.OpState)">
            <summary>
            Divides the calculated values again by the adjustment factor to go back to correct values.
            </summary>
            <param name="opState"></param>
        </member>
        <member name="M:Syncfusion.Chart.NiceRangeMaker.TweakToFitZero(Syncfusion.Chart.NiceRangeMaker.OpState)">
            <summary>
            Checks the minimum and maximum values calculated to see if either of them can
            be made zero. Visual respresentation of data appears more readable if zero is used as a baseline.
            </summary>
            <param name="opState"></param>
        </member>
        <member name="M:Syncfusion.Chart.NiceRangeMaker.TweakBoundaries(Syncfusion.Chart.NiceRangeMaker.OpState)">
            <summary>
            Checks the calculated minimum and maximum values to see if they need to be changed
            so that a visual representation does not result in values being displayed too close to the boundaries.
            </summary>
            <param name="opState"></param>
        </member>
        <member name="T:Syncfusion.Chart.ChartDateTimeNiceRangeMaker">
            <summary>
            Implements methods to compute the 'nice' data range/
            </summary>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.SeekDirection">
            <summary>
            Resperents the seek direction.
            </summary>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.SeekDirection.Forward">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.SeekDirection.Reverse">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.ImplWeeks">
            <summary>
            Implemenets the methods to compute the 'nice' weeks range.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.ImplWeeks.MakeNiceNumber(System.Double)">
            <summary>
            Simple logic for creating 'nice' numbers that are close to the numbers passed in.
            </summary>
            <param name="val">Value whose equivalent 'nice' number is to be found.</param>
            <returns>Returns double.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.#ctor(Syncfusion.Chart.IChartDateTimeDefaults,Syncfusion.Chart.INiceRangeMaker)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartDateTimeNiceRangeMaker"/> class.
            </summary>
            <param name="chartDateTimeDefaults">The chart date time defaults.</param>
            <param name="niceRangeMaker">The nice range maker.</param>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.#ctor(Syncfusion.Chart.IChartDateTimeDefaults)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartDateTimeNiceRangeMaker"/> class.
            </summary>
            <param name="chartDateTimeDefaults">The chart date time defaults.</param>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartDateTimeNiceRangeMaker"/> class.
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.Defaults">
            <summary>
            Gets the defaults.
            </summary>
            <value>The defaults.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.Calendar">
            <summary>
            Gets the calendar.
            </summary>
            <value>The calendar.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.DesiredIntervals">
            <summary>
            Gets or sets the desired intervals count.
            </summary>
            <value>The desired intervals count.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.RangePaddingType">
            <summary>
            Gets or sets the type of the range padding.
            </summary>
            <value>The type of the range padding.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.ForceZero">
            <summary>
            Gets or sets a value indicating whether zero is "forced".
            </summary>
            <value><c>true</c> if zero is "forced"; otherwise, <c>false</c>.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.PreferZero">
            <summary>
            Gets or sets a value indicating whether zero is preferred.
            </summary>
            <value><c>true</c> if zero is preferred; otherwise, <c>false</c>.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.DesiredIntervalType">
            <summary>
            Gets or sets the type of the desired interval.
            </summary>
            <value>The type of the desired interval.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.IsMax">
            <summary>
            Represents whether the maximum value is applied to category axis or not
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.MakeNiceRange(System.DateTime,System.DateTime)">
            <summary>
            Makes the nice range.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>Returns ChartDateTimeRange instance.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.MakeNiceRange(System.DateTime,System.DateTime,Syncfusion.Chart.ChartDateTimeIntervalType)">
            <summary>
            Makes the nice range.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="type">The type.</param>
            <returns>Returns ChartDateTimeRange instance.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.MakeNiceRange(System.DateTime,System.DateTime,Syncfusion.Chart.ChartDateTimeIntervalType,Syncfusion.Chart.ChartAxisRangePaddingType)">
            <summary>
            Makes the nice range.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="type">The type.</param>
            <param name="rangePaddingType">Type of the range padding.</param>
            <returns>Returns ChartDateTimeRange instance.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.MakeNiceYearsRange(System.DateTime,System.DateTime)">
            <summary>
            Makes the nice years range.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>Returns ChartDateTimeRange instance.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.MakeNiceMonthsRange(System.DateTime,System.DateTime)">
            <summary>
            Makes the nice months range.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>Returns ChartDateTimeRange instance.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.MakeNiceWeeksRange(System.DateTime,System.DateTime)">
            <summary>
            Makes the nice weeks range.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>Returns ChartDateTimeRange instance.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.MakeNiceDaysRange(System.DateTime,System.DateTime)">
            <summary>
            Makes the nice days range.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>Returns ChartDateTimeRange instance.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.MakeNiceHoursRange(System.DateTime,System.DateTime)">
            <summary>
            Makes the nice hours range.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>Returns ChartDateTimeRange instance.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.MakeNiceMinutesRange(System.DateTime,System.DateTime)">
            <summary>
            Makes the nice minutes range.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>Returns ChartDateTimeRange instance.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.MakeNiceSecondsRange(System.DateTime,System.DateTime)">
            <summary>
            Makes the nice seconds range.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>Returns ChartDateTimeRange instance.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.MakeNiceMilliSecondsRange(System.DateTime,System.DateTime)">
            <summary>
            Makes the nice milli seconds range.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>Returns ChartDateTimeRange instance.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.CalculateIntervalType(System.TimeSpan)">
            <summary>
            Calculates the type of the interval.
            </summary>
            <param name="diff">The diff.</param>
            <returns>Returns ChartDateTimeRange instance.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartDateTimeNiceRangeMaker.AdjustToWeekStart(System.DateTime,Syncfusion.Chart.ChartDateTimeNiceRangeMaker.SeekDirection)">
            <summary>
            Adjusts to week start.
            </summary>
            <param name="dt">The dt.</param>
            <param name="direction">The direction.</param>
            <returns>Returns ChartDateTimeRange instance.</returns>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.CandleRenderer">
            <summary>
            The Candle Chart rendering class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.CandleRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value>The Require YValues Count.</value>       
        </member>
        <member name="P:Syncfusion.Chart.Renderers.CandleRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value>The RegionDescription. </value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.CandleRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.CandleRenderer"/> class.
            </summary>
            <param name="series">The ChartSeries.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.CandleRenderer.DrawChartPoint(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartStyleInfo,System.Int32)">
            <summary>
            Draw the specified point with specified style
            </summary>
            <param name="g">Graphics</param>
            <param name="point">Chart Point</param>
            <param name="info">Point Style</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.CandleRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>		
            <param name="args">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.CandleRenderer.Render(Syncfusion.Chart.ChartRenderArgs3D)">
            <summary>
            Renders the specified args.
            </summary>
            <param name="args">The ChartRenderArgs3 args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.CandleRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            Draws the icon on the legend.
            </summary>
            <param name="g">Instance of <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="bounds">Bounds of icon.</param>
            <param name="isShadow">If is true method draws the shadow.</param>
            <param name="shadowColor"><see cref="T:Syncfusion.Drawing.Color"/> of shadow.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.AreaRenderer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AreaRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AreaRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.AreaRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AreaRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders chart by the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AreaRenderer.Render(Syncfusion.Chart.ChartRenderArgs3D)">
            <summary>
            Renders chart by the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AreaRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            Draws icon.
            </summary>
            <param name="g">The <see cref="!:System.Drawing.Graphics"/> to render icon.</param>
            <param name="bounds">The bounds of icon.</param>
            <param name="isShadow">The value indicates that draw shadow.</param>
            <param name="shadowColor">The shadow <see cref="T:System.Drawing.Color"/>.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.BarRenderer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.BarRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.BarRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.BarRenderer"/> class.
            </summary>
            <param name="series"></param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.BoxWhiskerRenderer">
            <summary>
            Provides the rendering of "Box and Whisker" chart type.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.BoxWhiskerRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.BoxWhiskerRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value>The Region Description.</value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.BoxWhiskerRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.BoxWhiskerRenderer"/> class.
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.BoxWhiskerRenderer.DrawChartPoint(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartStyleInfo,System.Int32)">
            <summary>
            Draws the specified point in specified style
            </summary>
            <param name="g">Graphics object</param>
            <param name="point">Chart Point</param>
            <param name="info">Style of the point</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.BoxWhiskerRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.BoxWhiskerRenderer.Render(Syncfusion.Chart.ChartRenderArgs3D)">
            <summary>
            Renders chart by the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.BoxWhiskerRenderer.GetYDataMeasure">
            <summary>
            Measures the X range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.BoxWhiskerRenderer.GetStatisticalMedian(System.Double[])">
            <summary>
            Computes the statistical median.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.BubbleRenderer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.BubbleRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.BubbleRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.BubbleRenderer.IgnoreSeriesInversion">
            <summary>
            This setting allows chart types that are normally not rendered inverted to be combined with those that are
            normally rendered inverted. For example Bar charts are rendered inverted. The Bubble chart can be combined with
            Bar charts because it sets IgnoreSeriesInversion to true. When this property is set to true the renderer will ignore
            the inversion setting on the series being rendered.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.BubbleRenderer.#cctor">
            <summary>
            Initializes the <see cref="T:Syncfusion.Chart.Renderers.BubbleRenderer"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.BubbleRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.BubbleRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.BubbleRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="args">The <see cref="T:Syncfusion.Chart.ChartRenderArgs2D"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.BubbleRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.BubbleRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            Draws the icon on the legend.
            </summary>
            <param name="g">Instance of <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="bounds">Bounds of icon.</param>
            <param name="isShadow">If is true method draws the shadow.</param>
            <param name="shadowColor"><see cref="T:Syncfusion.Drawing.Color"/> of shadow.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.BubbleRenderer.CalculateYRange(System.Int32)">
            <summary>
            Calculates the Y range.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.ColumnRangeRenderer">
            <summary>
            Summary description for ColumnRangeRenderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ColumnRangeRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ColumnRangeRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ColumnRangeRenderer.IsFixedWidth">
            <summary>
            Gets a value indicating whether this instance is fixed width.
            </summary>
            <value>
                <c>true</c> if this instance is fixed width; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRangeRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.ColumnRangeRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRangeRenderer.DrawChartPoint(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartStyleInfo,System.Int32)">
            <summary>
            Draws the specified point in specified style
            </summary>
            <param name="g">Graphics object</param>
            <param name="point">Chart Point</param>
            <param name="info">Style of the point</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRangeRenderer.Render(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRangeRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.ColumnRenderer">
            <summary>
            Represents the column type renderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ColumnRenderer.FillSpaceType">
            <summary>
            Indicated how much space this type will fill.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ColumnRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ColumnRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ColumnRenderer.IsFixedWidth">
            <summary>
            Gets a value indicating whether this instance is fixed width.
            </summary>
            <value>
            	<c>true</c> if this instance is fixed width; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.ColumnRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRenderer.DrawChartPoint(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartStyleInfo,System.Int32)">
            <summary>
            Draws the specified point in specified style
            </summary>
            <param name="g">Graphics object</param>
            <param name="point">Chart Point</param>
            <param name="info">Style of the point</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRenderer.Render(Syncfusion.Chart.ChartRenderArgs3D)">
            <summary>
            Renders the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRenderer.RenderAdornment(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint)">
            <summary>
            Renders the adornment.
            </summary>
            <param name="g"></param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRenderer.GetPointByValueForSeries(Syncfusion.Chart.ChartPoint)">
            <summary>
            Gets the point by value for series.
            </summary>
            <param name="chpt">The <see cref="T:Syncfusion.Chart.ChartPoint"/>.</param>
            <returns>Returns PointF.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRenderer.GetXDataMeasure">
            <summary>
            Computes the necessary range of X axis.
            </summary>
            <returns>Returns the DoubleRange.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRenderer.CalculateSides(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint,Syncfusion.Chart.DoubleRange,System.Double@,System.Double@)">
            <summary>
            Calculates the sides.
            </summary>
            <param name="styledPoint">The <see cref="T:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint"/>.</param>
            <param name="sbsInfo">The side-by-side info.</param>
            <param name="x1">The x1.</param>
            <param name="x2">The x2.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRenderer.GetColumnBounds(Syncfusion.Chart.ChartRenderArgs,Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets the column bounds.
            </summary>
            <param name="args">The args.</param>
            <param name="stypedPoint">The styped point.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
            <returns>Returns RectangleF.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRenderer.CheckColumnBounds(System.Boolean,Syncfusion.Drawing.RectangleF@)">
            <summary>
            Checks the column bounds.
            </summary>
            <param name="isInverted">if set to <c>true</c> axes is inverted.</param>
            <param name="rect">The rect.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRenderer.CheckColumnPoints(System.Boolean,Syncfusion.Drawing.RectangleF@)">
            <summary>
            Checks the column bounds.
            </summary>
            <param name="isInverted">if set to <c>true</c> axes is inverted.</param>
            <param name="rect">The rect.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRenderer.CalculateSides(Syncfusion.Chart.ChartPoint,Syncfusion.Chart.DoubleRange,System.Double@,System.Double@)">
            <summary>
            Calculates the sides.
            </summary>
            <param name="cpt">The <see cref="T:Syncfusion.Chart.ChartPoint"/>.</param>
            <param name="sbsInfo">The side-by-side info.</param>
            <param name="x1">The x1.</param>
            <param name="x2">The x2.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRenderer.GetSymbolCoordinates(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint)">
            <summary>
            Gets the symbol coordinates.
            </summary>
            <param name="point">The point.</param>
            <returns>Returns Synbol Coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRenderer.GetBrush">
            <summary>
            Brush information is retrieved from the style associated with the index of the point to be rendered.
            It is then changed for special cases such as when automatic highlighting is enabled.
            </summary>
            <returns>
            Brush information that is to be used for filling elements displayed at this index.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRenderer.GetBrush(System.Int32)">
            <summary>
            Brush information is retrieved from the style associated with the index of the point to be rendered.
            It is then changed for special cases such as when automatic highlighting is enabled.
            </summary>
            <param name="index">Index value of the point for which the brush information is required.</param>
            <returns>
            Brush information that is to be used for filling elements displayed at this index.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ColumnRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            Draws the icon on the legend.
            </summary>
            <param name="g">Instance of <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="bounds">Bounds of icon.</param>
            <param name="isShadow">If is true method draws the shadow.</param>
            <param name="shadowColor"><see cref="T:Syncfusion.Drawing.Color"/> of shadow.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.FullStackedColumnRenderer">
            <summary>
            Summary description for ChartStackedColumn100PercentRenderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.FullStackedColumnRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FullStackedColumnRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.FullStackedColumnRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.FullStackingAreaRenderer">
            <summary>
            The FullStackingArea Renderering class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.FullStackingAreaRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FullStackingAreaRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.FullStackingAreaRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.FullStackingBarRenderer">
            <summary>
            The FullStackingBar Renderering class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.FullStackingBarRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FullStackingBarRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.FullStackingBarRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.FunnelRenderer">
            <summary>
            Represents the funnel type renderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.FunnelRenderer.FillSpaceType">
            <summary>
            Indicates how much space this type will use.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.FunnelRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FunnelRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.FunnelRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FunnelRenderer.Render(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FunnelRenderer.Render(Syncfusion.Chart.ChartRenderArgs3D)">
            <summary>
            Renders chart by the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FunnelRenderer.OnRender(Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.Boolean)">
            <summary>
            Render the chart type.
            </summary>
            <param name="g">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="showTitle">if set to <c>true</c> title is shown.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FunnelRenderer.OnRender(Syncfusion.Chart.ChartRenderArgs3D,System.Boolean)">
            <summary>
            Render the chart type.
            </summary>
            <param name="args">The <see cref="T:Syncfusion.Chart.ChartRenderArgs3D"/>.</param>
            <param name="showTitle">if set to <c>true</c> title is shown.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FunnelRenderer.CreateLayersAndLabels(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint[],Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates the layers and labels.
            </summary>
            <param name="points">The points.</param>
            <param name="g">The g.</param>
            <param name="drawingRect">The drawing rect.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FunnelRenderer.OptimizationFunc_YIsWidth(System.Double)">
            <summary>
            Optimizations the width of the func_ Y is.
            </summary>
            <param name="k">The k.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FunnelRenderer.OptimizationFunc_YIsHeight(System.Double)">
            <summary>
            Optimizations the height of the func_ Y is.
            </summary>
            <param name="ctg">The CTG.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FunnelRenderer.CalcLayersAndLabelsSizeLocAndGetTheirBoundingRect">
            <summary>
            Calculates the layers and labels size loc and get their bounding rect.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FunnelRenderer.FightWithLabelsIntersection">
            <summary>
            Fights the with labels intersection.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FunnelRenderer.FightWithLabelsAndConnectionLinesIntersection">
            <summary>
            Fights the with labels and connection lines intersection.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FunnelRenderer.GetLabelsRect(System.Collections.ArrayList)">
            <summary>
            Gets the labels rect.
            </summary>
            <param name="labels">The labels.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FunnelRenderer.GetLayersRect(System.Collections.ArrayList)">
            <summary>
            Gets the layers rect.
            </summary>
            <param name="layers">The layers.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FunnelRenderer.GetMinSize(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Computes the size of necessary rectangle for the rendering.
            </summary>
            <param name="g"></param>
            <returns>
            	<see cref="T:Syncfusion.Drawing.SizeF"/> of minimal rectangle.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FunnelRenderer.GetAllValue">
            <summary>
            Gets all value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FunnelRenderer.AreRectanglesStacked(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF)">
            <summary>
            Calculate value indicates that rectangles are stacked.
            </summary>
            <param name="r1">The  first rectangle to check.</param>
            <param name="r2">The second rectangle to check.</param>
            <returns>True if given rectangles are stacked, otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.FunnelRenderer.GetTotalDepth">
            <summary>
            Gets the total depth.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.AccumulationChartsLayer">
            <summary>
            The AccumulationChartsLayer class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLayer.Index">
            <summary>
            Gets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLayer.UpWidth">
            <summary>
            Gets or sets up width.
            </summary>
            <value>Up width.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLayer.DownWidth">
            <summary>
            Gets or sets down width.
            </summary>
            <value>Down width.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLayer.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLayer.GapRatio">
            <summary>
            Gets or sets the gap ratio.
            </summary>
            <value>The gap ratio.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLayer.MinWidth">
            <summary>
            Gets or sets the width of the min.
            </summary>
            <value>The width of the min.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLayer.TopCenterPoint">
            <summary>
            Gets or sets the top center point.
            </summary>
            <value>The top center point.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLayer.Series3D">
            <summary>
            Gets a value indicating whether [series3 D].
            </summary>
            <value><c>true</c> if [series3 D]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLayer.TopLevel">
            <summary>
            Gets or sets a value indicating whether [top level].
            </summary>
            <value><c>true</c> if [top level]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLayer.FunnelMode">
            <summary>
            Gets the funnel mode.
            </summary>
            <value>The funnel mode.</value>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLayer.FigureBase">
            <summary>
            Gets or sets the figure base.
            </summary>
            <value>The figure base.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLayer.RotationRation">
            <summary>
            Gets or sets the rotation ration.
            </summary>
            <value>The rotation ration.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLayer.Offset3DRation">
            <summary>
            Gets or sets the offset3 D ration.
            </summary>
            <value>The offset3 D ration.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLayer.Series">
            <summary>
            Gets or sets the series.
            </summary>
            <value>The series.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLayer.DepthPosition">
            <summary>
            Gets or sets the depth position.
            </summary>
            <value>The depth position.</value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLayer.GetGapRatioHeight">
            <summary>
            Gets the height of the gap ratio.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLayer.GetAngleTangent">
            <summary>
            Gets the angle tangent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLayer.GetMinDrawingRect">
            <summary>
            Gets the min drawing rect.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLayer.GetOuterDrawingRect">
            <summary>
            Gets the outer drawing rect.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLayer.GetInnerDrawingRect">
            <summary>
            Gets the inner drawing rect.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLayer.GetDownDrawingRect">
            <summary>
            Gets down drawing rect.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLayer.GetUpDrawingRect">
            <summary>
            Gets up drawing rect.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLayer.GetFullDrawingRect">
            <summary>
            Gets the full drawing rect.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLayer.IsWidding">
            <summary>
            Determines whether this instance is widding.
            </summary>
            <returns>
            	<c>true</c> if this instance is widding; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLayer.NeedTopSide">
            <summary>
            Needs the top side.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLayer.#cctor">
            <summary>
            Initializes the <see cref="T:Syncfusion.Chart.Renderers.AccumulationChartsLayer"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLayer.#ctor(System.Int32,Syncfusion.Drawing.PointF,System.Single,System.Boolean,System.Single,Syncfusion.Chart.ChartFunnelMode)">
            <summary>
            Creates instance of the AccumulationChartsLayer.
            </summary>
            <param name="index">The layer index.</param>
            <param name="topCenterPoint">The top center point.</param>
            <param name="height">The layer height.</param>
            <param name="series3D">The value indicates that is 3D series.</param>
            <param name="offset3DRatio">The offset ratio.</param>
            <param name="funnelmode">The chart funnel mode.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLayer.#ctor(System.Int32,Syncfusion.Drawing.PointF,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Single,Syncfusion.Chart.ChartFunnelMode)">
            <summary>
            Creates instance of the AccumulationChartsLayer.
            </summary>
            <param name="index">The layer index.</param>
            <param name="topCenterPoint">The top center point.</param>
            <param name="upWidth">The upper width.</param>
            <param name="downWidth">The down width.</param>
            <param name="height">The layer height.</param>
            <param name="gapRatio">The gap ratio.</param>
            <param name="series3D">The value indicates that is 3D series.</param>
            <param name="offset3DRatio">The offset ratio.</param>
            <param name="funnelmode">The chart funnel mode.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLayer.Draw(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Draw funnel series.
            </summary>
            <param name="g">The <see cref="!:System.Drawing.Graphics"/> to renderer series.</param>
            <param name="brushInfo">The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> to fill series.</param>
            <param name="pen">The <see cref="!:System.Drawing.Pen"/> to render series border.</param>
            <param name="outputRegion">Calculated output <see cref="!:System.Drawing.Region"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLayer.Draw3D(Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Draw 3D.
            </summary>
            <param name="brushInfo">The brush info.</param>
            <param name="pen">The pen.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.AccumulationChartsLabel">
            <summary>
            The AccumulationChartsLabel class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLabel.Index">
            <summary>
            Gets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLabel.Rectangle">
            <summary>
            Gets or sets the rectangle.
            </summary>
            <value>The rectangle.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLabel.Style">
            <summary>
            Gets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLabel.Point">
            <summary>
            Gets the point.
            </summary>
            <value>The point.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLabel.ConnetcPoint">
            <summary>
            Gets or sets the connect point.
            </summary>
            <value>The connetc point.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLabel.NotCorrectPoint">
            <summary>
            Gets the not correct point.
            </summary>
            <value>The not correct point.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLabel.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLabel.MaxTextWidth">
            <summary>
            Gets or sets the width of the max text.
            </summary>
            <value>The width of the max text.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLabel.Layer">
            <summary>
            Gets the layer.
            </summary>
            <value>The layer.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLabel.AttachMode">
            <summary>
            Gets the attach mode.
            </summary>
            <value>The attach mode.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLabel.LabelPlacement">
            <summary>
            Gets or sets the label placement.
            </summary>
            <value>The label placement.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLabel.LabelStyle">
            <summary>
            Gets or sets the label style.
            </summary>
            <value>The label style.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLabel.AllowYOffset">
            <summary>
            Gets a value indicating whether [allow Y offset].
            </summary>
            <value><c>true</c> if [allow Y offset]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLabel.VerticalPadding">
            <summary>
            Gets or sets the vertical padding.
            </summary>
            <value>The vertical padding.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLabel.HorizontalPadding">
            <summary>
            Gets or sets the horizontal padding.
            </summary>
            <value>The horizontal padding.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLabel.Series">
            <summary>
            Gets or sets the series.
            </summary>
            <value>The series.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.AccumulationChartsLabel.LabelIndex">
            <summary>
            Gets or sets the index of the label.
            </summary>
            <value>The index of the label.</value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLabel.#ctor(System.Int32,Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartStyleInfo,Syncfusion.Chart.Renderers.AccumulationChartsLayer,Syncfusion.Chart.Renderers.AccumulationChartsLabelAttachMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.AccumulationChartsLabel"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="point">The point.</param>
            <param name="style">The style.</param>
            <param name="layer">The layer.</param>
            <param name="attachMode">The attach mode.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLabel.#ctor(System.Int32,Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartStyleInfo,Syncfusion.Chart.Renderers.AccumulationChartsLayer,Syncfusion.Chart.Renderers.AccumulationChartsLabelAttachMode,Syncfusion.Chart.ChartSeries,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.AccumulationChartsLabel"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="point">The point.</param>
            <param name="style">The style.</param>
            <param name="layer">The layer.</param>
            <param name="attachMode">The attach mode.</param>
            <param name="series">The series.</param>
            <param name="LblIndex">Index of the LBL.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLabel.CalcSize(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Calculatess the size.
            </summary>
            <param name="g">The g.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLabel.CalcLocation(Syncfusion.Drawing.RectangleF)">
            <summary>
            Calculates the location.
            </summary>
            <param name="columnInRect">The column in rect.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLabel.GetConnectioLinePoints(Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@)">
            <summary>
            Gets the connectio line points.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLabel.TryToAvoidRectangleIntersection(Syncfusion.Drawing.RectangleF)">
            <summary>
            Tries to avoid rectangle intersection.
            </summary>
            <param name="r1">The r1.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLabel.TryToAvoidLineIntersection(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Tries to avoid line intersection.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLabel.Draw(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Draws the specified graphics.
            </summary>
            <param name="g">The g.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLabel.Draw3D">
            <summary>
            Draw 3D.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLabel.CalcConnectionPoint">
            <summary>
            Calculates the connection point.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.AccumulationChartsLabelComparer">
            <summary>
            The AccumulationChartsLabelComparer class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.AccumulationChartsLabelComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero <paramref name="x"/> is less than <paramref name="y"/>. Zero <paramref name="x"/> equals <paramref name="y"/>. Greater than zero <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <exception cref="T:System.ArgumentException">Neither <paramref name="x"/> nor <paramref name="y"/> implements the <see cref="T:System.IComparable"/> interface.-or- <paramref name="x"/> and <paramref name="y"/> are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.AccumulationChartsLabelAttachMode">
            <summary>
            The AccumulationChartsLabelAttachMode enumerator.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Renderers.AccumulationChartsLabelAttachMode.Top">
            <summary>
            AccumulationChartsLabelAttachMode is Top.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Renderers.AccumulationChartsLabelAttachMode.Center">
            <summary>
            AccumulationChartsLabelAttachMode is Center.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Renderers.AccumulationChartsLabelAttachMode.Bottom">
            <summary>
            AccumulationChartsLabelAttachMode is Bottom.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.GanttRenderer">
            <summary>
            The Gantt chart rendering class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.GanttRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.GanttRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.GanttRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.GanttRenderer"/> class.
            </summary>
            <param name="series">The ChartSeries.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.GanttRenderer.DrawChartPoint(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartStyleInfo,System.Int32)">
            <summary>
            Draws the specified point in specified style
            </summary>
            <param name="g">Graphics object</param>
            <param name="point">Chart Point</param>
            <param name="info">Style of the point</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.GanttRenderer.Render(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.GanttRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.GanttRenderer.GetConnectionLine(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Single)">
            <summary>
            Gets the connection line.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="offset">The offset.</param>
            <returns>Returns the PointF array.</returns>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.ChartHeatMapRenderer">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.HeatRectangle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.FillSpaceType">
            <summary>
            Indicates how much space this type will use.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.ChartHeatMapRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders chart by the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.Render(Syncfusion.Chart.ChartRenderArgs3D)">
            <summary>
            Renders chart by the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.DrawColorSwatch(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Draws the color swatch element.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.VerticalLayout(System.Collections.Generic.IList{Syncfusion.Chart.Renderers.ChartHeatMapRenderer.HeatRectangle},Syncfusion.Drawing.RectangleF)">
            <summary>
            Arranges elements in vertical.
            </summary>
            <param name="rects">The rects.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.HorizontalLayout(System.Collections.Generic.IList{Syncfusion.Chart.Renderers.ChartHeatMapRenderer.HeatRectangle},Syncfusion.Drawing.RectangleF)">
            <summary>
            Arranges elements in horizontal.
            </summary>
            <param name="rects">The rects.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.RectangleLayout(System.Collections.Generic.IList{Syncfusion.Chart.Renderers.ChartHeatMapRenderer.HeatRectangle},Syncfusion.Drawing.RectangleF)">
            <summary>
            Arranges elements in ractangles.
            </summary>
            <param name="rects">The rects.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.DrawRectangle(Syncfusion.Chart.ChartRenderArgs2D,Syncfusion.Chart.Renderers.ChartHeatMapRenderer.HeatRectangle)">
            <summary>
            Draws the rectangle.
            </summary>
            <param name="args">The args.</param>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.GetText(System.String,Syncfusion.Chart.ChartHeatMapConfigItem)">
            <summary>
            Return the truncate text.
            </summary>
            <param name="text">The text.</param>
            <param name="configItem">The config item.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.GetAmount(System.Collections.Generic.IList{Syncfusion.Chart.Renderers.ChartHeatMapRenderer.HeatRectangle},System.Int32,Syncfusion.Drawing.RectangleF,System.Boolean)">
            <summary>
            Returns the maximal length of rectangle.
            </summary>
            <param name="rects">The rects.</param>
            <param name="index">The index.</param>
            <param name="bounds">The bounds.</param>
            <param name="vertival">if set to <c>true</c> [vertival].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.ComputeAreaCoeficient(System.Collections.Generic.IList{Syncfusion.Chart.Renderers.ChartHeatMapRenderer.HeatRectangle},System.Int32,System.Int32)">
            <summary>
            Computes the area coeficient.
            </summary>
            <param name="rects">The rects.</param>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.LeprColor(Syncfusion.Chart.ChartHeatMapConfigItem,System.Double)">
            <summary>
            Leprs the color.
            </summary>
            <param name="item">The item.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.CompareHeatRectangles(Syncfusion.Chart.Renderers.ChartHeatMapRenderer.HeatRectangle,Syncfusion.Chart.Renderers.ChartHeatMapRenderer.HeatRectangle)">
            <summary>
            Compares the heat rectangles.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.RenderAdornments(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Overloaded. Renders elements such as Text and Point Symbols.
            </summary>
            <param name="g">The graphics object that is to be used.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ChartHeatMapRenderer.RenderAdornments(Syncfusion.Chart.Graphics3D)">
            <summary>
            Renders elements such as Text and Point Symbols.
            </summary>
            <param name="g">The graphics object that is to be used.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.HiLoOpenCloseRenderer">
            <summary>
            The HiLoOpenClose Renderering class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.HiLoOpenCloseRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.HiLoOpenCloseRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HiLoOpenCloseRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.HiLoOpenCloseRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HiLoOpenCloseRenderer.DrawChartPoint(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartStyleInfo,System.Int32)">
            <summary>
            Draws the specified point in specified style
            </summary>
            <param name="g">Graphics object</param>
            <param name="point">Chart Point</param>
            <param name="info">Style of the point</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HiLoOpenCloseRenderer.Render(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HiLoOpenCloseRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.HiLoRenderer">
            <summary>
            The Chart HiLo Renderering class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.HiLoRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.HiLoRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HiLoRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.HiLoRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HiLoRenderer.DrawChartPoint(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartStyleInfo,System.Int32)">
            <summary>
            Draws the specified point in specified style
            </summary>
            <param name="g">Graphics object</param>
            <param name="point">Chart Point</param>
            <param name="info">Style of the point</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HiLoRenderer.Render(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HiLoRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HiLoRenderer.GetBrush">
            <summary>
            Brush information is retrieved from the style associated with the index of the point to be rendered.
            It is then changed for special cases such as when automatic highlighting is enabled.
            </summary>
            <returns>
            Brush information that is to be used for filling elements displayed at this index.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HiLoRenderer.GetBrush(System.Int32)">
            <summary>
            Brush information is retrieved from the style associated with the index of the point to be rendered.
            It is then changed for special cases such as when automatic highlighting is enabled.
            </summary>
            <param name="index">Index value of the point for which the brush information is required.</param>
            <returns>
            Brush information that is to be used for filling elements displayed at this index.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HiLoRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            Draws chart's icon.
            </summary>
            <param name="g">The <see cref="!:System.Drawing.Graphics"/> to render icon.</param>
            <param name="bounds">The icon bounds.</param>
            <param name="isShadow">The value indicates to draw shadow or not.</param>
            <param name="shadowColor">The <see cref="T:System.Drawing.Color"/> to render shadow.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.HistogramRenderer">
            <summary>
            The Histogram Renderering class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.HistogramRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HistogramRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.HistogramRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HistogramRenderer.Render(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HistogramRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HistogramRenderer.NormalDistribution(System.Double,System.Double,System.Double)">
            <summary>
            Normal Distribution function.
            </summary>
            <param name="x">The x.</param>
            <param name="m">The m.</param>
            <param name="sigma">The sigma.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HistogramRenderer.GetBrush">
            <summary>
            Brush information is retrieved from the style associated with the index of the point to be rendered.
            It is then changed for special cases such as when automatic highlighting is enabled.
            </summary>
            <returns>
            Brush information that is to be used for filling elements displayed at this index.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HistogramRenderer.GetBrush(System.Int32)">
            <summary>
            Brush information is retrieved from the style associated with the index of the point to be rendered.
            It is then changed for special cases such as when automatic highlighting is enabled.
            </summary>
            <param name="index">Index value of the point for which the brush information is required.</param>
            <returns>
            Brush information that is to be used for filling elements displayed at this index.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HistogramRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            Draws the icon on the legend.
            </summary>
            <param name="g">Instance of <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="bounds">Bounds of icon.</param>
            <param name="isShadow">If is true method draws the shadow.</param>
            <param name="shadowColor"><see cref="T:Syncfusion.Drawing.Color"/> of shadow.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HistogramRenderer.GetYDataMeasure">
            <summary>
            Measures the Y range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HistogramRenderer.GetHistogramIntervalsValues(Syncfusion.Chart.ChartPointWithIndex[],System.Double[]@,System.Double[]@)">
            <summary>
            Gets the histogram intervals values.
            </summary>
            <param name="cpwiA">The cpwi A.</param>
            <param name="histogramIntervals">The histogram intervals.</param>
            <param name="histogramValues">The histogram values.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HistogramRenderer.GetHistogramMax">
            <summary>
            Gets the maximal value of histogram.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.HistogramRenderer.GetHistogramMeanAndDeviation(Syncfusion.Chart.ChartPointWithIndex[],System.Double@,System.Double@)">
            <summary>
            Gets the histogram mean and deviation.
            </summary>
            <param name="cpwiA">The cpwi A.</param>
            <param name="mean">The mean.</param>
            <param name="standartDeviation">The standart deviation.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.KagiRenderer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.KagiRenderer.RequireYValuesCount">
            <summary>
            Gets count of required Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.KagiRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.KagiRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.KagiRenderer.Render(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.KagiRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.KagiRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="isShadow"></param>
            <param name="shadowColor"></param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.LineRenderer">
            <summary>
            The Line chartrendering class.
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.LineRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.LineRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.LineRenderer.ShouldSort">
            <summary>
            Gets a value indicating whether points should be sort.
            </summary>
            <value><c>true</c> if points should be sorted; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.LineRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.LineRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.LineRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.LineRenderer.Render(Syncfusion.Chart.ChartRenderArgs3D)">
            <summary>
            Renders chart by the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.LineRenderer.RenderAdornment(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint)">
            <summary>
            Renders the adornment.
            </summary>
            <param name="g"></param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.LineRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            Draws chart's icon.
            </summary>
            <param name="g">The <see cref="!:System.Drawing.Graphics"/> to render icon.</param>
            <param name="bounds">The icon bounds.</param>
            <param name="isShadow">The value indicates to draw shadow or not.</param>
            <param name="shadowColor">The <see cref="T:System.Drawing.Color"/> to render shadow.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.LineRenderer.DataUpdate(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Updates the points cache.
            </summary>
            <param name="args">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.LineRenderer.Update(Syncfusion.Chart.ChartUpdateFlags)">
            <summary>
            Updates by specified flags.
            </summary>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.LineRenderer.GetXDataMeasure">
            <summary>
            Measures the X range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.LineRenderer.GetYDataMeasure">
            <summary>
            Measures the Y range.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.PolygonWithTangent">
            <summary>
            Represents the polygon with the tangent.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PolygonWithTangent.Polygon">
            <summary>
            Gets or sets the polygon.
            </summary>
            <value>The polygon.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PolygonWithTangent.Tangent">
            <summary>
            Gets or sets the tangent.
            </summary>
            <value>The tangent.</value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PolygonWithTangent.#ctor(Syncfusion.Chart.Polygon,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.PolygonWithTangent"/> class.
            </summary>
            <param name="p">The polygon.</param>
            <param name="tan">The tangent.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.PolygonWithTangentComparer">
            <summary>
            Compares the <see cref="T:Syncfusion.Chart.Renderers.PolygonWithTangent"/> by <see cref="P:Syncfusion.Chart.Renderers.PolygonWithTangent.Tangent"/> value.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PolygonWithTangentComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.PieRenderer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.OuterRect">
            <summary>
            Gets or Sets the outer rectangle of doughnut chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.FillSpaceType">
            <summary>
            Indicates how much space this type will use.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.PieRenderer.PieSectorCorner">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.PieRenderer.PieSector">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.PieSector.StyledPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.PieSector.StartAngle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.PieSector.EndAngle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.PieSector.InnerBounds">
            <summary>
            Gets the inner bounds.
            </summary>
            <value>The inner bounds.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.PieSector.OuterBounds">
            <summary>
            Gets the outer bounds.
            </summary>
            <value>The outer bounds.</value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieSector.#ctor(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.PieRenderer.PieSector"/> class.
            </summary>
            <param name="point">The point.</param>
            <param name="outSideRect">The out side rect.</param>
            <param name="inSideRect">The inner bounds.</param>
            <param name="startAngle">The start angle.</param>
            <param name="endAngle">The end angle.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieSector.Render">
            <summary>
            Renders this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieSector.Draw(Syncfusion.Chart.ChartGraph,Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Chart.ChartPieFillMode,Syncfusion.Drawing.SkiaSharpHelper.ColorBlend)">
            <summary>
            Draws sector.
            </summary>
            <param name="graph">The graph.</param>
            <param name="brInfo">The br info.</param>
            <param name="pen">The pen.</param>
            <param name="type">The type.</param>
            <param name="gradient">The gradient.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieSector.CreateSegment(System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Creates the segment.
            </summary>
            <param name="startAngle">The start angle.</param>
            <param name="endAngle">The end angle.</param>
            <param name="left">if set to <c>true</c> left side will be created.</param>
            <param name="right">if set to <c>true</c> right side will be created.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieSector.AddSector(Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,Syncfusion.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="gp"></param>
            <param name="rect"></param>
            <param name="start"></param>
            <param name="angle"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieSector.AddClosedSector(Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,Syncfusion.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="gp"></param>
            <param name="rect"></param>
            <param name="start"></param>
            <param name="angle"></param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.PieRenderer.PieSectorComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieSectorComparer.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.PieRenderer.PieLabel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.StyledPoint">
            <summary>
            Gets the styled point.
            </summary>
            <value>The styled point.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.Rectangle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.ConnectPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.NotCorrectPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.CornerLabel">
            <summary>
            Set True if the label placed on top or bo
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.Series">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.LabelIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.Angle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.Corner">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.#ctor(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.#ctor(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint,System.Single,Syncfusion.Chart.ChartSeries,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.Measure(Syncfusion.Chart.ChartGraph,System.Single)">
            <summary>
            Measures the specified g.
            </summary>
            <param name="g">The g.</param>
            <param name="maxWidth">Width of the max.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.SetConnectPoint(Syncfusion.Drawing.PointF)">
            <summary>
            Sets the connect point.
            </summary>
            <param name="pt">The point to connect.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.CorrectTopLeft(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.CorrectTopRight(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.CorrectBottomLeft(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.CorrectBottomRight(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.AlignRightSide(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieLabel.AlignLeftSide(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.PieRenderer.PieLabelComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.PieLabelComparer.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.PieRenderer.Pie3DSegment">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.Pie3DSegment.Draw(Syncfusion.Chart.ChartGraph,Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Chart.ChartSeries)">
            <summary>
            Draws the specified graph.
            </summary>
            <param name="graph">The graph.</param>
            <param name="interior">The interior.</param>
            <param name="pen">The pen.</param>
            <param name="series">The ChartSeries.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders chart by the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.DrawCalloutOutsideLabel(Syncfusion.Chart.ChartRenderArgs2D,Syncfusion.Chart.ChartCalloutInfo,Syncfusion.Chart.Renderers.PieRenderer.PieLabel,Syncfusion.Drawing.RectangleF)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <param name="callout"></param>
            <param name="pieLabel"></param>
            <param name="boundsRect"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.DrawCalloutInsideLabel(Syncfusion.Chart.ChartRenderArgs2D,Syncfusion.Chart.ChartCalloutInfo,Syncfusion.Chart.Renderers.PieRenderer.PieSector,Syncfusion.Drawing.RectangleF,System.Single,System.Double,Syncfusion.Chart.Renderers.PieRenderer.PieLabel)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <param name="callout"></param>
            <param name="midpnt"></param>
            <param name="bnds"></param>
            <param name="angl"></param>
            <param name="centeAngle"> center angle of the slice</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.CalculateOuterPolygonPosition(Syncfusion.Chart.ChartCalloutInfo,Syncfusion.Drawing.Rectangle,Syncfusion.Drawing.PointF,Syncfusion.Chart.Renderers.PieRenderer.PieLabel)">
            <summary>
            
            </summary>
            <param name="callout"></param>
            <param name="bnds"> callout label bounds</param>
            <param name="pt"> sector center position</param>
            <param name="label">pie label</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.ChangeCalloutPosition(Syncfusion.Drawing.PointF,Syncfusion.Drawing.SizeF)">
            <summary>
            Changing the callout bounds position when it was rendering outside the chart area.
            </summary>
            <param name="pt">The callout shape x and y position.</param>
            <param name="siz">The callout shape width and height.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.DrawCalloutPolygon(Syncfusion.Chart.ChartRenderArgs2D,Syncfusion.Chart.ChartCalloutInfo,Syncfusion.Drawing.Rectangle,Syncfusion.Drawing.PointF)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <param name="callout">point callout</param>
            <param name="bnds">callout rectangle bounds</param>
            <param name="pointPos">point position</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.DrawCalloutText(Syncfusion.Chart.ChartRenderArgs2D,Syncfusion.Chart.ChartCalloutInfo,Syncfusion.Drawing.Rectangle,Syncfusion.Drawing.SizeF,System.Int32)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <param name="callout"></param>
            <param name="bnds"></param>
            <param name="siz"></param>
            <param name="index"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.RenderAdornments(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Overloaded. Renders elements such as Text and Point Symbols.
            </summary>
            <param name="g">The graphics object that is to be used.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.RenderAdornments(Syncfusion.Chart.Graphics3D)">
            <summary>
            Renders elements such as Text and Point Symbols.
            </summary>
            <param name="g">The graphics object that is to be used.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.CompareByStartAngle(Syncfusion.Chart.Renderers.PieRenderer.Pie3DSegment,Syncfusion.Chart.Renderers.PieRenderer.Pie3DSegment)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.GetCost(Syncfusion.Chart.Renderers.PieRenderer.Pie3DSegment)">
            <summary>
            Gets the cost.
            </summary>
            <param name="segment">The segment.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.GetCost(System.Single)">
            <summary>
            Gets the cost.
            </summary>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.CompareByEndAngle(Syncfusion.Chart.Renderers.PieRenderer.Pie3DSegment,Syncfusion.Chart.Renderers.PieRenderer.Pie3DSegment)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.GetMinSize(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.CreateSector(Syncfusion.Chart.Vector3D,System.Single,System.Single,System.Single,System.Single,System.Single,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="inSideRadius"></param>
            <param name="outSideRadius"></param>
            <param name="start"></param>
            <param name="fov"></param>
            <param name="depth"></param>
            <param name="pen"></param>
            <param name="brInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.CreateLabels(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint[])">
            <summary>
            
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.MeasureLabels(Syncfusion.Chart.Renderers.PieRenderer.PieLabel[],Syncfusion.Chart.ChartGraph,Syncfusion.Drawing.SizeF)">
            <summary>
            Measures the labels.
            </summary>
            <param name="labels">The labels.</param>
            <param name="g">The g.</param>
            <param name="radius">The radius.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.ArrangeLabels(Syncfusion.Chart.Renderers.PieRenderer.PieLabel[],Syncfusion.Drawing.SizeF,Syncfusion.Drawing.PointF,System.Boolean)">
            <summary>
            
            </summary>
            <param name="labels"></param>
            <param name="radius"></param>
            <param name="center"></param>
            <param name="inColumn"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.WrapLabels(Syncfusion.Chart.ChartGraph,Syncfusion.Chart.Renderers.PieRenderer.PieLabel[])">
            <summary>
            Method to wrap overlapping labels
            <param name="g">ChartGraph object</param>
            <param name="labels">Array of labels in the pie</param>
            </summary>        
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.GetAllValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.GetMaxZero(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.SelectKnow(Syncfusion.Chart.ChartPieType)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PieRenderer.DrawIcon(System.Int32,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            Draws the icon of pie chart on the legend.
            </summary>
            <param name="index">Index of point.</param>
            <param name="g">Instance of <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="bounds">Bounds of icon.</param>
            <param name="isShadow">If is true method draws the shadow.</param>
            <param name="shadowColor"><see cref="T:Syncfusion.Drawing.Color"/> of shadow.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.PointAndFigureRenderer">
            <summary>
            Summary description for PointAndFigureRenderer.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.PointAndFigureRenderer.PNFColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PointAndFigureRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.PointAndFigureRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PointAndFigureRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Constructor.
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PointAndFigureRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PointAndFigureRenderer.Render(Syncfusion.Chart.ChartRenderArgs3D)">
            <summary>
            Renders the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PointAndFigureRenderer.DrawPointO(Syncfusion.Chart.ChartGraph,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.RectangleF)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="pen"></param>
            <param name="rect"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PointAndFigureRenderer.DrawFigureX(Syncfusion.Chart.ChartGraph,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.RectangleF)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="pen"></param>
            <param name="rect"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PointAndFigureRenderer.ComputeRectangles(Syncfusion.Chart.ChartSeries)">
            <summary>
            Computes the rectangles.
            </summary>
            <param name="series">The series.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PointAndFigureRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="isShadow"></param>
            <param name="shadowColor"></param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.PyramidRenderer">
            <summary>
            Represents the pyramid type renderer.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PyramidRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.PyramidRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PyramidRenderer.Render(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PyramidRenderer.Render(Syncfusion.Chart.ChartRenderArgs3D)">
            <summary>
            Renders chart by the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PyramidRenderer.CreateLayersAndLabels(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint[],Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates the layers and labels.
            </summary>
            <param name="points">The points.</param>
            <param name="g">The g.</param>
            <param name="drawingRect">The drawing rect.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PyramidRenderer.OptimizationFunc_Pyramid(System.Double)">
            <summary>
            Optimizations the func_ pyramid.
            </summary>
            <param name="ctg">The CTG.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.PyramidRenderer.OptimizationFunc_SurfacePyramid(System.Double)">
            <summary>
            Optimizations the func_ surface pyramid.
            </summary>
            <param name="ctg">The CTG.</param>
            <returns>Returns double.</returns>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.RadarRenderer">
            <summary>
            The Radar chart renderering class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.RadarRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.RadarRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.RadarRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.RadarRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.RadarRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders chart by the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.RadarRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.RadarRenderer.GetBrush">
            <summary>
            Brush information is retrieved from the style associated with the index of the point to be rendered.
            It is then changed for special cases such as when automatic highlighting is enabled.
            </summary>
            <returns>
            Brush information that is to be used for filling elements displayed at this index.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.RadarRenderer.GetBrush(System.Int32)">
            <summary>
            Brush information is retrieved from the style associated with the index of the point to be rendered.
            It is then changed for special cases such as when automatic highlighting is enabled.
            </summary>
            <param name="index">Index value of the point for which the brush information is required.</param>
            <returns>
            Brush information that is to be used for filling elements displayed at this index.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.RadarRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            Draws the icon on the legend.
            </summary>
            <param name="g">Instance of <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="bounds">Bounds of icon.</param>
            <param name="isShadow">If is true method draws the shadow.</param>
            <param name="shadowColor"><see cref="T:Syncfusion.Drawing.Color"/> of shadow.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.RangeAreaRenderer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.RangeAreaRenderer.RequireYValuesCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.RangeAreaRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.RangeAreaRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.RangeAreaRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders chart by the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.RangeAreaRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.RangeAreaRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            Draws icon.
            </summary>
            <param name="g">The <see cref="!:System.Drawing.Graphics"/> to render icon.</param>
            <param name="bounds">The bounds of icon.</param>
            <param name="isShadow">The value indicates that draw shadow.</param>
            <param name="shadowColor">The shadow <see cref="T:System.Drawing.Color"/>.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.RenkoRenderer">
            <summary>
            Summary description for ChartRenkoRenderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.RenkoRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.RenkoRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.RenkoRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.RenkoRenderer.Render(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.RenkoRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.RenkoRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="isShadow"></param>
            <param name="shadowColor"></param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.RotatedSplineRenderer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.RotatedSplineRenderer.RegionDescription">
            <summary>
            Gets description of regions.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.RotatedSplineRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.RotatedSplineRenderer"/> class.
            </summary>
            <param name="series"></param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.ScatterRenderer">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ScatterRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ScatterRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ScatterRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ScatterRenderer.GetVisiblePoints(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint[])">
            <summary>
            Returns an array of visible points from the styled point collection
            </summary>
            <param name="list">Array of styled points</param>       
            <returns>Array of visible styled points</returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ScatterRenderer.Render(Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.Int32,System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ScatterRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ScatterRenderer.RenderAdornment(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint)">
            <summary>
            Renders the adornment.
            </summary>
            <param name="g"></param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ScatterRenderer.Render(Syncfusion.Chart.Graphics3D,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="from"></param>
            <param name="count"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ScatterRenderer.GetBrush">
            <summary>
            Brush information is retrieved from the style associated with the index of the point to be rendered.
            It is then changed for special cases such as when automatic highlighting is enabled.
            </summary>
            <returns>
            Brush information that is to be used for filling elements displayed at this index.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ScatterRenderer.GetBrush(System.Int32)">
            <summary>
            Brush information is retrieved from the style associated with the index of the point to be rendered.
            It is then changed for special cases such as when automatic highlighting is enabled.
            </summary>
            <param name="index">Index value of the point for which the brush information is required.</param>
            <returns>
            Brush information that is to be used for filling elements displayed at this index.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ScatterRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            Draws the icon on the legend.
            </summary>
            <param name="g">Instance of <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="bounds">Bounds of icon.</param>
            <param name="isShadow">If is true method draws the shadow.</param>
            <param name="shadowColor"><see cref="T:Syncfusion.Drawing.Color"/> of shadow.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.SplineAreaRenderer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.SplineAreaRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.SplineAreaRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.SplineAreaRenderer.Render(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.SplineAreaRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.SplineAreaRenderer.Render(Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="from"></param>
            <param name="count"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.SplineAreaRenderer.Render(Syncfusion.Chart.Graphics3D,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="from"></param>
            <param name="count"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.SplineAreaRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            Draws icon.
            </summary>
            <param name="g">The <see cref="!:System.Drawing.Graphics"/> to render icon.</param>
            <param name="bounds">The bounds of the icon.</param>
            <param name="isShadow">The value indicates that need draw shadow.</param>
            <param name="shadowColor">The <see cref="T:System.Drawing.Color"/> to render shadow.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.SplineRenderer">
            <summary>
            The Spline chart renderering class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.SplineRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.SplineRenderer.RegionDescription">
            <summary>
            Gets description of regions.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.SplineRenderer.ShouldSort">
            <summary>
            Gets a value indicating whether points should be sort.
            </summary>
            <value><c>true</c> if points should be sorted; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.SplineRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.SplineRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.SplineRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.SplineRenderer.Render(Syncfusion.Chart.ChartRenderArgs3D)">
            <summary>
            Renders the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.SplineRenderer.DrawBezier(Syncfusion.Chart.ChartRenderArgs2D,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Draws the 3D bezier line.
            </summary>
            <param name="args">The args.</param>
            <param name="pen">The pen.</param>
            <param name="interior">The interior.</param>
            <param name="pt1">The start point.</param>
            <param name="pt2">The first control point.</param>
            <param name="pt3">The second control point.</param>
            <param name="pt4">The end point.</param>
            <returns>The geometry of line.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.SplineRenderer.ComputeExtremums(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint,Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint,Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartPoint,System.Double@,System.Double@,System.Int32)">
            <summary>
            Computes the extremums of bezier line.
            </summary>
            <param name="point1">The start point.</param>
            <param name="point2">The end point.</param>
            <param name="controlPoint1">The first control point.</param>
            <param name="controlPoint2">The second control point.</param>
            <param name="intelator1">The first intelator.</param>
            <param name="intelator2">The second intelator.</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>
            	<c>true</c> if extremums is present. otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.SplineRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            Draw icon.
            </summary>
            <param name="g">The graphics to render icon.</param>
            <param name="bounds">The bounds of the icon.</param>
            <param name="isShadow">The value indicates draw shadow or not.</param>
            <param name="shadowColor">The shadow color.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.StackingAreaRenderer">
            <summary>
            The StackingArea chart renderering class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.StackingAreaRenderer.FillSpaceType">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.StackingAreaRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.StackingAreaRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StackingAreaRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.StackingAreaRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StackingAreaRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders chart by the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StackingAreaRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StackingAreaRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            Draws the icon on the legend.
            </summary>
            <param name="g">Instance of <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="bounds">Bounds of icon.</param>
            <param name="isShadow">If is true method draws the shadow.</param>
            <param name="shadowColor"><see cref="T:Syncfusion.Drawing.Color"/> of shadow.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StackingAreaRenderer.GetYDataMeasure">
            <summary>
            Measures the X range.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.StackingBarRenderer">
            <summary>
            The StackingBar chart Renderering class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.StackingBarRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StackingBarRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.StackingBarRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.StackingColumnRenderer">
            <summary>
            Represents the stacking-column type renderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.StackingColumnRenderer.FillSpaceType">
            <summary>
            Indicated how much space this type will fill.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.StackingColumnRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StackingColumnRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.StackingColumnRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StackingColumnRenderer.DrawChartPoint(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartStyleInfo,System.Int32)">
            <summary>
            Draws the specified point in specified style
            </summary>
            <param name="g">Graphics object</param>
            <param name="point">Chart Point</param>
            <param name="info">Style of the point</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StackingColumnRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StackingColumnRenderer.Render(Syncfusion.Chart.ChartRenderArgs3D)">
            <summary>
            Renders the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StackingColumnRenderer.GetPointByValueForSeries(Syncfusion.Chart.ChartPoint)">
            <summary>
            Gets the point by value for series.
            </summary>
            <param name="chpt">The <see cref="T:Syncfusion.Chart.ChartPoint"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StackingColumnRenderer.GetYDataMeasure">
            <summary>
            Measures the X range.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.StepAreaRenderer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.StepAreaRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.StepAreaRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StepAreaRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StepAreaRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders chart by the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StepAreaRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StepAreaRenderer.Render(Syncfusion.Chart.Graphics3D,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="from"></param>
            <param name="count"></param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.StepLineRenderer">
            <summary>
            The StepLine chart Renderering class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.StepLineRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.StepLineRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StepLineRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.StepLineRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StepLineRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.StepLineRenderer.Render(Syncfusion.Chart.ChartRenderArgs3D)">
            <summary>
            Renders chart by the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer">
            <summary>
            Summary description for ThreeLineBreakRenderer.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer.TLBRectangle">
            <summary>
            The TLBRectangle structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer.TLBRectangle.MinY">
            <summary>
            Gets the min Y.
            </summary>
            <value>The min Y.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer.TLBRectangle.MaxY">
            <summary>
            Gets the max Y.
            </summary>
            <value>The max Y.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer.TLBRectangle.NegativeValue">
            <summary>
            Gets a value indicating whether [negative value].
            </summary>
            <value><c>true</c> if [negative value]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer.TLBRectangle.FirstPoint">
            <summary>
            Gets or sets the first point.
            </summary>
            <value>The first point.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer.TLBRectangle.SecondPoint">
            <summary>
            Gets or sets the second point.
            </summary>
            <value>The second point.</value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer.TLBRectangle.Empty">
            <summary>
            Gets the empty.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer.TLBRectangle.#ctor(Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartPoint,System.Boolean,Syncfusion.Chart.ChartSeriesRenderer)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer.TLBRectangle"/> struct.
            </summary>
            <param name="fPoint">The f point.</param>
            <param name="sPoint">The s point.</param>
            <param name="negVal">if set to <c>true</c> [neg val].</param>
            <param name="renderer">The renderer.</param>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer.CalcTreeLineBreak">
            <summary>
            Calculates the tree line break.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer.GetRectangle(Syncfusion.Chart.Renderers.ThreeLineBreakRenderer.TLBRectangle)">
            <summary>
            Gets the rectangle.
            </summary>
            <param name="tlbr">The TLBR.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.ThreeLineBreakRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            Draws the icon on the legend.
            </summary>
            <param name="g">Instance of <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="bounds">Bounds of icon.</param>
            <param name="isShadow">If is true method draws the shadow.</param>
            <param name="shadowColor"><see cref="T:Syncfusion.Drawing.Color"/> of shadow.</param>
        </member>
        <member name="T:Syncfusion.Chart.Renderers.TornadoRenderer">
            <summary>
            The Tornado chart Renderering class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.TornadoRenderer.FillSpaceType">
            <summary>
            Indicated how much space this type will fill.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.TornadoRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.Renderers.TornadoRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.TornadoRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Renderers.TornadoRenderer"/> class.
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.TornadoRenderer.DrawChartPoint(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartStyleInfo,System.Int32)">
            <summary>
            Draws the specified point in specified style
            </summary>
            <param name="g">Graphics object</param>
            <param name="point">Chart Point</param>
            <param name="info">Style of the point</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.TornadoRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.Renderers.TornadoRenderer.Render(Syncfusion.Chart.ChartRenderArgs3D)">
            <summary>
            Renders the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartCustomPointsRenderer">
            <summary>
            The ChartCustomPoints Renderering class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPointsRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPointsRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartCustomPointsRenderer"/> class.
            </summary>
            <param name="series">ChartSeries that will be rendered by this renderer instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPointsRenderer.Render(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPointsRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
            In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does
            the rendering.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartGraph">
            <summary>
            The ChartGraph class provides methods for drawing primitives to the chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartGraph.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
            <value>The transform.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartGraph.SmoothingMode">
            <summary>
            Gets or sets the SmoothingMode.
            </summary>
            <value>The SmoothingMode.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.PushTranfsorm">
            <summary>
            Pushes the transform to the stack.
            </summary>
            
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.PushTransform">
            <summary>
            Pushes the transform to the stack.
            </summary>
            
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.Translate(Syncfusion.Drawing.SizeF)">
            <summary>
            Translates the specified offset.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.MultiplyTransform(Syncfusion.Drawing.Matrix)">
            <summary>
            Multiplies the transform.
            </summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.PopTransform">
            <summary>
            Pops the transform from the stack.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawLine(Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Draws the line.
            </summary>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
            <param name="pt1">The start point.</param>
            <param name="pt2">The end point.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawRect(Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the rectangle.
            </summary>
            <param name="brushInfo">The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/>.</param>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawRect(Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.RectangleF)">
            <summary>
            Draws the rectangle.
            </summary>
            <param name="brushInfo">The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/>.</param>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawRect(Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.RectangleF)">
            <summary>
            Draws the rectangle.
            </summary>
            <param name="brush">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Brush"/>.</param>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawRect(Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.RectangleF)">
            <summary>
            Draws the rectangle.
            </summary>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawEllipse(Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the ellipse.
            </summary>
            <param name="brushInfo">The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/>.</param>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawPath(Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath)">
            <summary>
            Draws the specified <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath"/>.
            </summary>
            <param name="brushInfo">The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/>.</param>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
            <param name="path">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawPath(Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath)">
            <summary>
            Draws the specified <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath"/>.
            </summary>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
            <param name="path">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawImage(Syncfusion.Drawing.Image,Syncfusion.Drawing.RectangleF)">
            <summary>
            Draws the image.
            </summary>
            <param name="image">The image.</param>
            <param name="rect">The bounds of image.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawRect(Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the rectangle.
            </summary>
            <param name="brush">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Brush"/>.</param>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawEllipse(Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the ellipse.
            </summary>
            <param name="brush">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Brush"/>.</param>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawPath(Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath)">
            <summary>
            Draws the path.
            </summary>
            <param name="brush">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Brush"/>.</param>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
            <param name="path">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawLine(Syncfusion.Drawing.SkiaSharpHelper.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the line.
            </summary>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawImage(Syncfusion.Drawing.Image,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the image.
            </summary>
            <param name="image">The <see cref="T:Syncfusion.Drawing.Image"/>.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawPolyline(Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.PointF[])">
            <summary>
            Draws the polyline.
            </summary>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawPolygon(Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.PointF[])">
            <summary>
            Draws the polygon.
            </summary>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.FillPolygon(Syncfusion.Drawing.SkiaSharpHelper.SolidBrush,Syncfusion.Drawing.PointF[])">
            <summary>
            Fill the polygon.
            </summary>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.RectangleF)">
            <summary>
            Draws the string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="rect">The rect.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.PointF,Syncfusion.Drawing.StringFormat)">
            <summary>
            Draws the string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="location">The location.</param>
            <param name="stringformat">The stringformat.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.DrawString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.StringFormat)">
            <summary>
            Draws the string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="rect">The rectangle.</param>
            <param name="stringformat">The stringformat.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.MeasureString(System.String,Syncfusion.Drawing.Font)">
            <summary>
            Measures the specified string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <returns>Returns the size of the Text.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.MeasureString(System.String,Syncfusion.Drawing.Font,System.Single)">
            <summary>
            Measures the specified string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="maxWidth">Maximal width of row.</param>
            <returns>Returns the size of the Text.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.MeasureString(System.String,Syncfusion.Drawing.Font,System.Single,Syncfusion.Drawing.StringFormat)">
            <summary>
            Measures the specified string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="maxWidth">Width of the max.</param>
            <param name="stringFormat">The string format.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.MeasureString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.SizeF,Syncfusion.Drawing.StringFormat)">
            <summary>
            Measures the specified string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="layoutArea">The layout area.</param>
            <param name="stringFormat">The string format.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.GetBrush(Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the brush.
            </summary>
            <param name="brushInfo">The brush info.</param>
            <param name="bounds">The bounds.</param>
            <returns>Returns the Brush.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.GetBrushItem(Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the brush item.
            </summary>
            <param name="brushInfo">The brush info.</param>
            <param name="bounds">The bounds.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartGraph.isRight">
            <summary>
            Used to render some specific ChartArea if it is true.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartGraph.GetGenericColorBlend(Syncfusion.Chart.Drawing.BrushInfoColorArrayList)">
            <summary>
            Gets the generic color blend.
            </summary>
            <param name="colors">The colors.</param>
            <returns>Returns the ColorBlend.</returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartGDIGraph">
            <summary>
            The ChartGDIGraph.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartGDIGraph.Graphics">
            <summary>
            Gets the graphics.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartGDIGraph.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
            <value>The transform.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartGDIGraph.SmoothingMode">
            <summary>
            Gets or sets the SmoothingMode.
            </summary>
            <value>The SmoothingMode.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartGDIGraph.#ctor(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartGDIGraph"/> class.
            </summary>
            <param name="g">The g.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGDIGraph.DrawRect(Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the rect.
            </summary>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGDIGraph.DrawEllipse(Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the ellipse.
            </summary>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGDIGraph.DrawPath(Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath)">
            <summary>
            Draws the path.
            </summary>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
            <param name="gp">The gp.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGDIGraph.DrawLine(Syncfusion.Drawing.SkiaSharpHelper.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the line.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGDIGraph.DrawImage(Syncfusion.Drawing.Image,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the image.
            </summary>
            <param name="image">The image.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGDIGraph.DrawPolyline(Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.PointF[])">
            <summary>
            Draws the polyline.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGDIGraph.DrawPolygon(Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.PointF[])">
            <summary>
            Draws the polygon.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGDIGraph.FillPolygon(Syncfusion.Drawing.SkiaSharpHelper.SolidBrush,Syncfusion.Drawing.PointF[])">
            <summary>
            Fill the polygon.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGDIGraph.MeasureString(System.String,Syncfusion.Drawing.Font)">
            <summary>
            Measures the specified string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartGDIGraph.MeasureString(System.String,Syncfusion.Drawing.Font,System.Single)">
            <summary>
            Measures the specified string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="maxWidth">Maximal width of row.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartGDIGraph.MeasureString(System.String,Syncfusion.Drawing.Font,System.Single,Syncfusion.Drawing.StringFormat)">
            <summary>
            Measures the specified string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="maxWidth">Maximal width of row.</param>
            <param name="stringFormat">StringFormat instance.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartGDIGraph.MeasureString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.SizeF,Syncfusion.Drawing.StringFormat)">
            <summary>
            Measures the specified string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="layoutArea">Maximal width of row.</param>
            <param name="stringFormat">StringFormat instance.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartGDIGraph.DrawString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.RectangleF)">
            <summary>
            Draws the string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="rect">The rect.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGDIGraph.DrawString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.PointF,Syncfusion.Drawing.StringFormat)">
            <summary>
            Draws the string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="location">The location.</param>
            <param name="stringformat">The stringformat.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartGDIGraph.DrawString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.StringFormat)">
            <summary>
            Draws the string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="rect">The rect.</param>
            <param name="stringformat">The stringformat.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartLabel">
            <summary>
            Represents the layout information of point label. 
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLabel.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLabel.Offset">
            <summary>
            Gets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLabel.ConnectPoint">
            <summary>
            Gets the connect point.
            </summary>
            <value>The connect point.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLabel.SymbolPoint">
            <summary>
            Gets the symbol point.
            </summary>
            <value>The symbol point.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLabel.Rect">
            <summary>
            Gets or sets the rect.
            </summary>
            <value>The rect.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartLabel.#ctor(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,Syncfusion.Drawing.SizeF,Syncfusion.Drawing.SizeF)">
            <summary>
            Creates instance of the ChartLabel.
            </summary>
            <param name="connectPoint">The connection point.</param>
            <param name="symbolPoint">The symbol point.</param>
            <param name="size">The size of the label.</param>
            <param name="offset">The label offset.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLabel.DrawPointingLine(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartStyleInfo,Syncfusion.Chart.ChartSeries)">
            <summary>
            Draw pointing line.
            </summary>
            <param name="g">The <see cref="!:System.Drawing.Graphics"/> to render line.</param>
            <param name="style">Line style.</param>
            <param name="mm_series">The Chart Series</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartLabelLayoutManager">
            <summary>
            Provides the 'SmartLabels' feature.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLabelLayoutManager.MinimalSize">
            <summary>
            Gets or sets the size of the minimal.
            </summary>
            <value>The size of the minimal.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLabelLayoutManager.Count">
            <summary>
            Gets the count of labels.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLabelLayoutManager.Item(System.Int32)">
            <summary>
            Gets the <see cref="!:Syncfusion.Windows.Forms.Chart.ChartLabel"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.ChartLabelLayoutManager.#ctor(Syncfusion.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartLabelLayoutManager"/> class.
            </summary>
            <param name="workArea">The work area.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLabelLayoutManager.AddLabel(Syncfusion.Chart.ChartLabel)">
            <summary>
            Add label to collection.
            </summary>
            <param name="label">The label to add.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLabelLayoutManager.AddPoint(Syncfusion.Drawing.PointF)">
            <summary>
            Add point to collection.
            </summary>
            <param name="p">Point to add.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLabelLayoutManager.Clear">
            <summary>
            Clears the labels.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLabelLayoutManager.Draw(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Draws the labels to the specified <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.
            </summary>
            <param name="g">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLabelLayoutManager.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLabelLayoutManager.Exclude2(Syncfusion.Drawing.RectangleF)">
            <summary>
            Exclude2s the specified rect.
            </summary>
            <param name="rect">The rect.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLabelLayoutManager.Exclude(Syncfusion.Drawing.RectangleF)">
            <summary>
            Excludes the specified rect.
            </summary>
            <param name="rect">The rect.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLabelLayoutManager.Exclude(Syncfusion.Drawing.PointF)">
            <summary>
            Excludes the specified p.
            </summary>
            <param name="p">The p.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLabelLayoutManager.FindFreeSpace(Syncfusion.Chart.ChartLabel)">
            <summary>
            Finds the free space.
            </summary>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLabelLayoutManager.CalcBestPlace(Syncfusion.Chart.ChartLabel,Syncfusion.Drawing.RectangleF)">
            <summary>
            Calculates the best place.
            </summary>
            <param name="label">The label.</param>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLabelLayoutManager.CheckWithMinSize(Syncfusion.Drawing.RectangleF,System.Collections.ArrayList)">
            <summary>
            Checks the size of the with min.
            </summary>
            <param name="rect">The rect.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLabelLayoutManager.CalcRadius(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Calculates the radius.
            </summary>
            <param name="pt1">The PT1.</param>
            <param name="pt2">The PT2.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLabelLayoutManager.CalcCenter(Syncfusion.Drawing.RectangleF)">
            <summary>
            Calculates the center.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartLabelLayoutManager.RectangleAreaComparer">
            <summary>
            Compares <see cref="T:Syncfusion.Drawing.RectangleF"/> by the area value.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLabelLayoutManager.RectangleAreaComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:Syncfusion.Chart.ChartSegment">
            <summary>
            Abstract class of series segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSegment.m_bounds">
            <summary>
            The bounds of segment.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Chart.ChartSegment.Clip">
            <summary>
            Clips Rectangle for the segment
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSegment.Update">
            <summary>
            Specifies whether segment region 
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSegment.m_zOrder">
            <summary>
            The drawing order of segment.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.ChartSegment.Bounds">
            <summary>
            Gets or sets the bounds of the segement.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSegment.ZOrder">
            <summary>
            Gets or sets the drawing order of segment.
            </summary>
            <value>The drawing order.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartSegment.Draw(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Draws the segment to specified <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.
            </summary>
            <param name="g">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/> instance.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesPath">
            <summary>
            Represents the simple geometry element.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSeriesPath"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesPath.#ctor(Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSeriesPath"/> class.
            </summary>
            <param name="gp">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath"/>.</param>
            <param name="br">The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/>.</param>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesPath.AddPrimitive(Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Adds the graphical primitive.
            </summary>
            <param name="gp">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath"/>.</param>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
            <param name="brushInfo">The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesPath.AddPrimitive(Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Chart.Drawing.BrushInfo,System.String)">
            <summary>
            Adds the graphical primitive.
            </summary>
            <param name="gp">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath"/>.</param>
            <param name="pen">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Pen"/>.</param>
            <param name="brushInfo">The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/>.</param>
            <param name="boxName">The <see cref="T:System.String"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesPath.Draw(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Draws the segment to specified <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.
            </summary>
            <param name="g">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/> instance.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesPath.Draw(Syncfusion.Chart.ChartGraph)">
            <summary>
            Draws the segment to specified <see cref="T:Syncfusion.Chart.ChartGraph"/>.
            </summary>
            <param name="cg">The <see cref="T:Syncfusion.Chart.ChartGraph"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesPath.Draw(Syncfusion.Chart.ChartGraph,System.String)">
            <summary>
            Draws the segment to specified <see cref="T:Syncfusion.Chart.ChartGraph"/>.
            </summary>
            <param name="cg">The <see cref="T:Syncfusion.Chart.ChartGraph"/>.</param>
            <param name="g">The <see cref="T:System.String"/>.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartUpdateFlags">
            <summary>
            The ChartUpdateFlags enumerator.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartUpdateFlags.None">
            <summary>
            None was changed
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartUpdateFlags.Data">
            <summary>
            Points was changed
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartUpdateFlags.Styles">
            <summary>
            Styles was changed
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartUpdateFlags.Config">
            <summary>
            Config items was changed
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartUpdateFlags.Indexed">
            <summary>
            Indexed mode was changed
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartUpdateFlags.Regions">
            <summary>
            Need update regions
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartUpdateFlags.Ranges">
            <summary>
            Axes was changed 
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartUpdateFlags.All">
            <summary>
            All was changed
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartRenderArgs">
            <summary>
            Provides the series render arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs.ActualXAxis">
            <summary>
            Gets or sets the actual X axis.
            </summary>
            <value>The actual X axis.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs.ActualYAxis">
            <summary>
            Gets or sets the actual Y axis.
            </summary>
            <value>The actual Y axis.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs.XRange">
            <summary>
            Gets the visible range of X axis.
            </summary>
            <value>The X range.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs.YRange">
            <summary>
            Gets the visible range of Y axis.
            </summary>
            <value>The Y range.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs.Series">
            <summary>
            Gets the series is being drawn.
            </summary>
            <value>The series.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs.Chart">
            <summary>
            Gets or sets the chart.
            </summary>
            <value>The chart.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs.SeriesIndex">
            <summary>
            Gets the index of the series.
            </summary>
            <value>The index of the series.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs.IsInvertedAxes">
            <summary>
            Gets or sets a value indicating whether this axes is inverted.
            </summary>
            <value>
            	<c>true</c> if this axes is inverted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs.Placement">
            <summary>
            Gets or sets the series position in the depth.
            </summary>
            <value>The placement.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs.Bounds">
            <summary>
            Gets or sets the rectangle that represents the bounds of the series that is being drawn.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs.SideBySideInfo">
            <summary>
            Gets or sets the side by side info.
            </summary>
            <value>The side by side info.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartRenderArgs.#ctor(Syncfusion.Chart.IChartAreaHost,Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartRenderArgs"/> class.
            </summary>
            <param name="chart">The <see cref="T:Syncfusion.Chart.IChartAreaHost"/>.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartRenderArgs.IsVisible(System.Double,System.Double)">
            <summary>
            Determines whether the specified coordinates is visible.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>
            	<c>true</c> if the specified x is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartRenderArgs.IsVisible(Syncfusion.Chart.DoubleRange,Syncfusion.Chart.DoubleRange)">
            <summary>
            Determines whether the specified ranges is visible.
            </summary>
            <param name="xRange">The x range.</param>
            <param name="yRange">The y range.</param>
            <returns>
            	<c>true</c> if the specified x range is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartRenderArgs.GetPoint(System.Double,System.Double)">
            <summary>
            Gets the rendering point.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartRenderArgs.GetRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets the rectangle.
            </summary>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartRenderArgs2D">
            <summary>
            Provides the series render arguments in 2D mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs2D.Graph">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Chart.ChartGraph"/> object.
            </summary>
            <value>The graph.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs2D.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs2D.DepthOffset">
            <summary>
            Gets or sets the depth offset.
            </summary>
            <value>The depth offset.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs2D.Is3D">
            <summary>
            Gets or sets a value indicating whether is 3D mode.
            </summary>
            <value><c>true</c> if is 3D mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartRenderArgs2D.#ctor(Syncfusion.Chart.IChartAreaHost,Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartRenderArgs"/> class.
            </summary>
            <param name="chart">The <see cref="T:Syncfusion.Chart.IChartAreaHost"/>.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartRenderArgs2D.GetPoint(System.Double,System.Double)">
            <summary>
            Gets the rendering point.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartRenderArgs3D">
            <summary>
            Provides the series render arguments in 3D mode. 
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs3D.Graph">
            <summary>
            Gets or sets the graph.
            </summary>
            <value>The graph.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs3D.Z">
            <summary>
            Gets or sets the Z.
            </summary>
            <value>The Z.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRenderArgs3D.Depth">
            <summary>
            Gets or sets the depth.
            </summary>
            <value>The depth.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartRenderArgs3D.#ctor(Syncfusion.Chart.IChartAreaHost,Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartRenderArgs"/> class.
            </summary>
            <param name="chart">The <see cref="T:Syncfusion.Chart.IChartAreaHost"/>.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartRenderArgs3D.GetVector(System.Double,System.Double)">
            <summary>
            Gets the <see cref="T:Syncfusion.Chart.Vector3D"/> by chart values.
            </summary>
            <param name="x">The X value.</param>
            <param name="y">The Y value.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesRenderer">
            <summary>
            <para>
            Base class for all renderers. Each renderer is responsible for rendering one data series 
            (please refer to <see cref="T:Syncfusion.Chart.ChartSeries"/>) inside of the chart area. ChartSeriesRenderer 
            provides the basic plumbing that is needed by all renderers. It is not an abstract class. 
            It is used as the renderer for the scatter plot since the scatter plot needs only basic 
            point rendering at the correct position.
            </para>
            <para>
            You can derive from ChartSeriesRenderer to create your own renderers.
            </para>
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint">
            <summary>
            This class is using for the caching points and styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>The X.</value>
            <remarks>
            In indexed mode it's the index of real X value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint.YValues">
            <summary>
            Gets or sets the Y values.
            </summary>
            <value>The Y values.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint.Category">
            <summary>
            Gets or sets the Y values.
            </summary>
            <value>The Y values.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint.IsVisible">
            <summary>
            Gets or sets a value indicating whether this point is visible.
            </summary>
            <value>
            	<c>true</c> if this point is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint.Style">
            <summary>
            Gets or sets the specified style of point.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint.#ctor(Syncfusion.Chart.ChartPoint,System.Int32)">
            <summary>
            Initialize the new instance.
            </summary>
            <param name="cp"></param>
            <param name="index"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint.Dispose">
            <summary>
            Method to dispose ChartStyledPoint object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPointComparer">
            <summary>
            This class is using for sorting <see cref="T:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint"/> by X or Index values.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPointComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPointComparerY">
            <summary>
            This class is using for sorting <see cref="T:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint"/> by Y or Index values.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPointComparerY.#ctor">
            <summary>
            This class is using for sorting <see cref="T:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPointComparerY"/> by Y or Index values.
            </summary>
            
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPointComparerY.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPointComparerXDescending">
            <summary>
            This class is using for descending order sorting <see cref="T:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint"/> by X or Index values.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPointComparerXDescending.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPointComparerXDescending"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPointComparerXDescending.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesRenderer.CategoryValueComparer">
            <summary>    
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CategoryValueComparer.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSeriesRenderer.CategoryValueComparer"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CategoryValueComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is equal to the other.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesRenderer.CategoryValueComparerDescending">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CategoryValueComparerDescending.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSeriesRenderer.CategoryValueComparerDescending"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CategoryValueComparerDescending.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is equal to the other.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPointComparerYDescending">
            <summary>
            This class is using for descending order sorting <see cref="T:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint"/> by Y or Index values.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPointComparerYDescending.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPointComparerYDescending"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPointComparerYDescending.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesRenderer.POLYGON_SECTORS">
            <summary>
            The number of polygons of cylinder
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesRenderer.SPLINE_DIGITIZATION">
            <summary>
            The number of polygons of spline
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesRenderer.m_series">
            <summary>
            The owner series.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesRenderer.m_segments">
            <summary>
            Internal member.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesRenderer.m_serStyle">
            <summary>
            The series style.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.StyledPoints">
            <summary>
             Retruns all Styled Point Collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.Place">
            <summary>
            Number of layer for specified series.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.PlaceSize">
            <summary>
            Count of the chart layers.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.FillSpaceType">
            <summary>
            Indicates how much space this type will use.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.Center">
            <summary>
            Gets the center of <see cref="P:Syncfusion.Chart.ChartSeriesRenderer.Bounds"/>.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.SeriesStyle">
            <summary>
            Gets the series style.
            </summary>
            <value>The series style.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.Segments">
            <summary>
            Gets array of geometry primitives for sorting before visualizting.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.UnEmptyRanges">
            <summary>
            Computes the array of <see cref="T:Syncfusion.Chart.IndexRange"/>, using for indicating unempty points.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.EnableStyles">
            <summary>
            Duplicates the <see cref="P:Syncfusion.Chart.ChartSeries.EnableStyles"/> property.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.Bounds">
            <summary>
            Returns the bounds that this renderer operates in.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.Chart">
            <summary>
            Reference to the <see cref="T:Syncfusion.Chart.IChartAreaHost"/> instance that uses this instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.ChartArea">
            <summary>
            Reference to the <see cref="P:Syncfusion.Chart.ChartSeriesRenderer.ChartArea"/> instance that uses this instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.CustomOriginX">
            <summary>
            Returns the X coordinate of the origin. This property will return the correct coordinate even if the X axis has a custom
            origin.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.CustomOriginY">
            <summary>
            Returns the Y coordinate of the origin. This property will return the correct coordinate even if the Y axis has a custom
            origin.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.IgnoreSeriesInversion">
            <summary>
            This setting allows chart types that are normally not rendered inverted to be combined with those that are
            normally rendered inverted. For example Bar charts are rendered inverted. The Bubble chart can be combined with
            Bar charts because it sets IgnoreSeriesInversion to true. When this property is set to true the renderer will ignore
            the inversion setting on the series being rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.OriginLocation">
            <summary>
            The location of the origin as used for rendering.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.XAxis">
            <summary>
            Returns the X axis object that the current renderer is tied to.
            <seealso cref="T:Syncfusion.Chart.ChartAxis"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.YAxis">
            <summary>
            Returns the Y axis object that the current renderer is tied to.
            <seealso cref="T:Syncfusion.Chart.ChartAxis"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.RegionDescription">
            <summary>
            Get description of regions.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.RequireYValuesCount">
            <summary>
            Gets count of require Y values of the points.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.ShouldSort">
            <summary>
            Gets a value indicating whether points should be sort.
            </summary>
            <value><c>true</c> if points should be sorted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.IsInvertedAxes">
            <summary>
            True if axes is inverted.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.IsRadial">
            <summary>
            True if series using the radial axes.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetMinPointsDelta">
            <summary>
            Gets the minimal points delta.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.IntervalSpace">
            <summary>
            Computes and returns the space occupied by each interval on the series being rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesRenderer.DividedIntervalSpace">
            <summary>
            Calculates and returns the number of display units that are used per logical(value) unit.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> class.
            </summary>
            <param name="series" type="Syncfusion.Windows.Forms.Chart.ChartSeries">
                <para>
                ChartSeries that will be rendered by this renderer instance.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.Dispose">
            <summary>
            Method to dispose ChartSeriesRenderer object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.Render(Syncfusion.Chart.ChartRenderArgs2D)">
            <summary>
            Renders chart by the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.Render(Syncfusion.Chart.ChartRenderArgs3D)">
            <summary>
            Renders chart by the specified args.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.Render(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
                In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does 
                the rendering. 
            </summary>
            <param name="g" type="System.Drawing.Graphics">
                <para>
                The graphics object that is to be used for rendering.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.RenderSeriesNameInDepth(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
                Renders series name in the minimal position of all axes.
            </summary>
            <param name="g" type="System.Drawing.Graphics">
                <para>
                The graphics object that is to be used for rendering.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.Render(Syncfusion.Chart.Graphics3D)">
            <summary>
                In the base <see cref="T:Syncfusion.Chart.ChartSeriesRenderer"/> it does not do anything. In derived classes this function does 
                the rendering. 
            </summary>
            <param name="g" type="System.Drawing.Graphics">
                <para>
                The graphics object that is to be used for rendering.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.RenderSeriesNameInDepth(Syncfusion.Chart.Graphics3D)">
            <summary>
            Renders series name in the minimal position of all axes.
            </summary>
            <param name="g" type="System.Drawing.Graphics">
                <para>
                The graphics object that is to be used for rendering.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.DrawIcon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            Draws the icon on the legend.
            </summary>
            <param name="g">Instance of <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="bounds">Bounds of icon.</param>
            <param name="isShadow">If is true method draws the shadow.</param>
            <param name="shadowColor"><see cref="T:Syncfusion.Drawing.Color"/> of shadow.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.DrawIcon(System.Int32,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Rectangle,System.Boolean,Syncfusion.Drawing.Color)">
            <summary>
            Draws the icon on the legend.
            </summary>
            <param name="index">Index of point.</param>
            <param name="g">Instance of <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="bounds">Bounds of icon.</param>
            <param name="isShadow">If is true method draws the shadow.</param>
            <param name="shadowColor"><see cref="T:Syncfusion.Drawing.Color"/> of shadow.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CanRender">
            <summary>
            Checks the count of values for rendering.
            </summary>
            <returns>True if renderer can to render the series.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.StackSorting">
            <summary>
            Sort the stacking sereies Y values.
            </summary>
            <returns>True if renderer can to render the series.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetMinSize(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Computes the size of necessary rectangle for the rendering.
            </summary>
            <returns><see cref="T:Syncfusion.Drawing.SizeF"/> of minimal rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.SetChart(Syncfusion.Chart.IChartAreaHost)">
            <summary>
            Sets the chart to representation.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetCharacterPoint(System.Int32)">
            <summary>
            Gets character point by index. Used for symbols and fancy tooltips.
            </summary>
            <param name="index">Index of point.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.Update(Syncfusion.Chart.ChartUpdateFlags)">
            <summary>
            Updates by specified flags.
            </summary>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.DataUpdate(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Updates the points cache.
            </summary>
            <param name="args">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.DrawChartPoint(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartStyleInfo,System.Int32)">
            <summary>
            Draws the specified point in specified style
            </summary>
            <param name="g">Graphics object</param>
            <param name="point">Chart Point</param>
            <param name="info">Style of the point</param>
            <param name="pointIndex">index of the point</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.VisiblePoint(System.Collections.IList,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Returns the next or previous visible point
            </summary>
            <param name="points">Collection of points</param>
            <param name="index">Index of the current point in collection</param>
            <param name="n">Index of the next or previous visible point</param>
            <param name="first">A boolean value specifiying whether the function should find next or previous visible point from index </param>
            <returns>Returns a point representing the screen co-ordinate of the next or previous visible chart point </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.VisiblePointIndex(System.Collections.IList,System.Int32,System.Boolean)">
            <summary>
            Returns the next or previous visible point index
            </summary>
            <param name="points">Collection of points</param>
            <param name="index">Index of the current point in collection</param>
            <param name="first">A boolean value specifiying whether the function should find next or previous visible point from index </param>
            <returns>An integer representing the index of next or previous visible point</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.VisibleChartPoint(System.Collections.IList,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Returns the next or previous visible chart point
            </summary>
            <param name="points">Collection of points</param>
            <param name="index">Index of the current point in collection</param>
            <param name="n">Index of the next or previous visible point</param>
            <param name="first">A boolean value specifiying whether the function should find next or previous visible point from index </param>
            <returns>Returns a point representing the next or previous visible chart point </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.VisibleChartPoint(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint[],System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Returns the next or previous visible chart styled point
            </summary>
            <param name="points">Collection of points</param>
            <param name="index">Index of the current point in collection</param>
            <param name="n">Index of the next or previous visible point</param>
            <param name="first">A boolean value specifiying whether the function should find next or previous visible point from index </param>
            <returns>Returns a point representing the next or previous visible chart styled point </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.RemoveDuplicates(Syncfusion.Drawing.PointF[])">
            <summary>
            Remove duplicate values in the array
            </summary>
            <param name="points">Array of points</param>       
            <returns>Array of points without any duplicate values</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetVisiblePoints(Syncfusion.Chart.ChartPointWithIndex[])">
            <summary>
            Returns an array of visible chart points
            </summary>
            <param name="list">Array of points</param>       
            <returns>Array of visible points</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetVisiblePoints(Syncfusion.Chart.ChartPointIndexer)">
            <summary>
            Returns an array of visible chart points
            </summary>
            <param name="list">Chart point indexer collection</param>       
            <returns>Array of visible points</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetVisiblePoints(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint[])">
            <summary>
            Returns an array of visible points from the styled point collection
            </summary>
            <param name="list">Array of styled points</param>       
            <returns>Array of visible styled points</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetPointByValueForSeries(Syncfusion.Chart.ChartPoint)">
            <summary>
            Gets the point by value for series.
            </summary>
            <param name="chpt">The ChartPoint.</param>
            <returns> Returns Real Point for the Specified ChartPoint </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetOffsetPoints(Syncfusion.Drawing.PointF[],Syncfusion.Drawing.SizeF)">
            <summary>
            Clones the points and shifts by offset.
            </summary>
            <param name="points"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetSeriesOffset">
            <summary>
            Calculates depth offset.
            </summary>
            <returns>Series offset.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetSeriesDepth">
            <summary>
            Gets the depth size of series.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetThisOffset">
            <summary>
            Gets the this series offset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetPlaceDepth">
            <summary>
            Gets the depth offset of series.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CalculateStepPointsForSeries3D(Syncfusion.Drawing.PointF[]@)">
            <summary>
            Overloaded. Calculates step point's offsets in derived classes to draw correctly series with close or same values.
            This method is needed only in cases when series are rendered in 3D mode.
            It fixes problems with overlapped series.
            </summary>
            <param name="stepPoints"></param> 
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CalculateStepPointsForSeries3D(Syncfusion.Drawing.PointF[]@,Syncfusion.Drawing.SizeF)">
            <summary>
            Calculates step point's offsets in derived classes to draw correctly series with close or same values.
            This method is needed only in cases when series are rendered in 3D mode.
            It fixes problems with overlapped series.
            </summary>
            <param name="stepPoints"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetUpPriceInterior(Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Returns the up interior for financial chart types.
            </summary>
            <param name="original">The base interior of chart.</param>
            <returns>The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> for the up price sectors.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetDownPriceInterior(Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Returns the down interior for financial chart types.
            </summary>
            <param name="original">The base interior of chart.</param>
            <returns>The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> for the down price sectors.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.Draw3DSpline(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartPointWithIndex[],System.Double[],Syncfusion.Drawing.SizeF,Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Draws 3D Spline from points array and additionally second derivatives added in y2 array.
            Remember that second derivatives should be calculated in naturalSpline function and
            improper y2[] values can cause improper spline drawing. 
            </summary>
            <param name="g"></param>
            <param name="points"></param>
            <param name="y2"></param>
            <param name="offset"></param>
            <param name="brush"></param>
            <param name="pen"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.AddExtremumPoints(Syncfusion.Chart.ChartPointWithIndex[],System.Double[],Syncfusion.Chart.ChartPointWithIndex[]@,System.Double[]@)">
            <summary>
             Adds all extremum points to new arrays. This method is needed to imitate 3D Spline strip.
            </summary>
            <param name="points"></param>
            <param name="y2"></param>
            <param name="pointsNew"></param>
            <param name="y2New"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.NaturalSpline(Syncfusion.Chart.ChartPointWithIndex[],System.Double[]@)">
            <summary>
            Given the array of chart points. The procedure returns array of second derivatives of cubic splines at this points.
            Then we can get bezier curve coordinates from the second derivatives and points array.
            </summary>
            <param name="points">The points.</param>
            <param name="ys2">The ys2.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.NaturalSpline(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint[],System.Double[]@)">
            <summary>
            Given the array of chart points. The procedure returns array of second derivatives of cubic splines at this points.
            Then we can get bezier curve coordinates from the second derivatives and points array.
            </summary>
            <param name="points">The points.</param>
            <param name="ys2">The ys2.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.BezierPointsFromSpline(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Single,System.Single,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@)">
            <summary>
            Gets bezier curve points from cubic spline curve defined by two points and two second derivative y2 at this points.
            </summary>
            <param name="point1"> Start  of spline curve </param>
            <param name="point2"> End  of spline curve</param>
            <param name="y2_1"> Second y derivative x at start point </param>
            <param name="y2_2"> Second y derivative x at end point </param>
            <param name="p0"> First Bezier curve point </param>
            <param name="p1"> Second Bezier curve point </param>
            <param name="p2"> Third Bezier curve point</param>
            <param name="p3"> Fourth Bezier curve point</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetBezierControlPoints(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint,Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint,System.Double,System.Double,Syncfusion.Chart.ChartPoint@,Syncfusion.Chart.ChartPoint@,System.Int32)">
            <summary>
            Gets the bezier control points.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="ys1">The ys1.</param>
            <param name="ys2">The ys2.</param>
            <param name="controlPoint1">The control point1.</param>
            <param name="controlPoint2">The control point2.</param>
            <param name="yIndex">Index of the y.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.BezierPointsFromSpline(Syncfusion.Chart.ChartPointWithIndex,Syncfusion.Chart.ChartPointWithIndex,System.Double,System.Double,Syncfusion.Chart.ChartPointWithIndex@,Syncfusion.Chart.ChartPointWithIndex@,Syncfusion.Chart.ChartPointWithIndex@,Syncfusion.Chart.ChartPointWithIndex@)">
            <summary>
            Gets bezier curve points from cubic spline curve defined by two points and two second derivative y2 at this points.
            </summary>
            <param name="point1"> Start  of spline curve </param>
            <param name="point2"> End  of spline curve</param>
            <param name="y2_1"> Second y derivative x at start point </param>
            <param name="y2_2"> Second y derivative x at end point </param>
            <param name="p0"> First Bezier curve point </param>
            <param name="p1"> Second Bezier curve point </param>
            <param name="p2"> Third Bezier curve point</param>
            <param name="p3"> Fourth Bezier curve point</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.canonicalSpline(Syncfusion.Chart.ChartPointWithIndex[],System.Double,System.Boolean,Syncfusion.Chart.ChartPointWithIndex[]@,Syncfusion.Chart.ChartPointWithIndex[]@)">
            <summary>
            Given the array of points. The procedure will fit the canonical spline curve to pass through all the points.
            Note: The curve will not be "function" line. There can be few Y values for one X value;
            </summary>
            <param name="points"></param>
            <param name="tension">Canonical spline tension</param>
            <param name="addextremumpoints"></param>
            <param name="bpoints">Bezier points array. The length of this array is 4n, where n is number of intervals (number of points - 1)</param>
            <param name="bextrpoints"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.SplitBezierCurve(Syncfusion.Chart.ChartPointWithIndex,Syncfusion.Chart.ChartPointWithIndex,Syncfusion.Chart.ChartPointWithIndex,Syncfusion.Chart.ChartPointWithIndex,System.Double,Syncfusion.Chart.ChartPointWithIndex@,Syncfusion.Chart.ChartPointWithIndex@,Syncfusion.Chart.ChartPointWithIndex@,Syncfusion.Chart.ChartPointWithIndex@,Syncfusion.Chart.ChartPointWithIndex@,Syncfusion.Chart.ChartPointWithIndex@,Syncfusion.Chart.ChartPointWithIndex@,Syncfusion.Chart.ChartPointWithIndex@)">
            <summary>
            Splits the bezier curve.
            </summary>
            <param name="p0">The p0.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="t0">The t0.</param>
            <param name="pb0">The PB0.</param>
            <param name="pb1">The PB1.</param>
            <param name="pb2">The PB2.</param>
            <param name="pb3">The PB3.</param>
            <param name="pe0">The pe0.</param>
            <param name="pe1">The pe1.</param>
            <param name="pe2">The pe2.</param>
            <param name="pe3">The pe3.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.Draw3DBeziers(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF[],Syncfusion.Drawing.SizeF,Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Draws beziers curve.
            </summary>
            <param name="g">The <see cref="!:System.Drawing.Graphics"/> to render curve.</param>
            <param name="drawpoints">The array of <see cref="T:System.Drawing.PointF"/> to render curve.</param>
            <param name="fillpoints">The array of <see cref="T:System.Drawing.PointF"/> to fill.</param>
            <param name="offset">The curve offset.</param>
            <param name="brush">The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> to fill curve body.</param>
            <param name="pen">The <see cref="!:System.Drawing.Pen"/> to render curve border.</param>
            <returns><see cref="!:System.Drawing.Region"/> that represent curve.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CreateVerticalCylinder3D(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SizeF)">
            <summary>
            Creates the vertical cylinder 3D geometry.
            </summary>
            <param name="rect">The bounds of the cylinder.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CreateHorizintalCylinder3DTop(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SizeF)">
            <summary>
            Creates the horizontal cylinder 3D top geometry.
            </summary>
            <param name="rect">The bounds of the cylinder.</param>
            <param name="offset">The offset.</param>
            <returns>
            	<see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> that represent cylinder.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CreateVerticalCylinder3DTop(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SizeF)">
            <summary>
            Creates the vertical cylinder 3D top geometry.
            </summary>
            <param name="rect">The bounds of the cylinder.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CreateHorizintalCylinder3D(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SizeF)">
            <summary>
            Creates the horizontal cylinder 3D geometry.
            </summary>
            <param name="rect">The bounds of the cylinder.</param>
            <param name="offset">The offset.</param>
            <returns>
            	<see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> that represent cylinder.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetLeftBezierPoint(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@)">
            <summary>
            Gets the left bezier point.
            </summary>
            <param name="p1">The start point.</param>
            <param name="p2">The first control point.</param>
            <param name="p3">The second control point.</param>
            <param name="p4">The end point.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetRightBezierPoint(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@)">
            <summary>
            Gets the right bezier point.
            </summary>
            <param name="p1">The start point.</param>
            <param name="p2">The first control point.</param>
            <param name="p3">The second control point.</param>
            <param name="p4">The end point.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetTopBezierPoint(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@)">
            <summary>
            Gets the top bezier point.
            </summary>
            <param name="p1">The start point.</param>
            <param name="p2">The first control point.</param>
            <param name="p3">The second control point.</param>
            <param name="p4">The end point.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetBottomBezierPoint(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@)">
            <summary>
            Gets the bottom bezier point.
            </summary>
            <param name="p1">The start point.</param>
            <param name="p2">The first control point.</param>
            <param name="p3">The second control point.</param>
            <param name="p4">The end point.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.Draw3DLines(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.SizeF,Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.Color[])">
            <summary>
            Draw 3D lines.
            </summary>
            <param name="g">The <see cref="!:System.Drawing.Graphics"/> to render lines.</param>
            <param name="points">The lines' points.</param>
            <param name="offset">The offset.</param>
            <param name="brush">The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> to fill lines body.</param>
            <param name="pen">The <see cref="!:System.Drawing.Pen"/> to render lines border.</param>
            <param name="colors">The array of <see cref="T:System.Drawing.Color"/> to draw lines.</param>
            <returns><see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> that represent lines.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.Draw3DLines(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.SizeF,Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Draw 3D lines.
            </summary>
            <param name="g">The <see cref="!:System.Drawing.Graphics"/> to render lines.</param>
            <param name="points">The lines' points.</param>
            <param name="offset">The offset.</param>
            <param name="brush">The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> to fill lines body.</param>
            <param name="pen">The <see cref="!:System.Drawing.Pen"/> to render lines border.</param>
            <returns><see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> that represent lines.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.Draw(Syncfusion.Chart.ChartGraph,Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Draw for given Graphical path.
            </summary>
            <param name="cg">Chart Graph.</param>
            <param name="gp">Graphical Path.</param>
             <param name=" br">BrushInfo.</param>
              <param name="p">Pen.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetRectangle(Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartPoint)">
            <summary>
            Calculates <see cref="T:System.Drawing.RectangleF"/> for given chart points.
            </summary>
            <param name="firstPoint">The first chart point to calculate rectangle.</param>
            <param name="secondPoint">The second chart point to calculate rectangle.</param>
            <returns>Calculated rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.Draw3DRectangle(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SizeF,Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Helper method to render a 3D rectangle.
            </summary>
            <param name="g">The graphics object that is to be used for rendering.</param>
            <param name="rc">The rectangle that is to be drawn.</param>
            <param name="offset">The Offset in 3D.</param>
            <param name="brush">The brush that is to be used for filling the rectangle sides.</param>
            <param name="pen">The pen that is to be used for drawing the rectangle sides.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CreateBox(Syncfusion.Drawing.RectangleF,System.Boolean)">
            <summary>
            Creates <see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> that represent box.
            </summary>
            <param name="rect">The bounds of the box.</param>
            <param name="is3D">The value indicates that box is in 3D.</param>
            <returns><see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> that represent box.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CreateBoxRight(Syncfusion.Drawing.RectangleF,System.Boolean)">
            <summary>
            Creates <see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> that represent box.
            </summary>
            <param name="rect">The bounds of the box.</param>
            <param name="is3D">The value indicates that box is in 3D.</param>
            <returns><see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> that represent box.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CreateBoxTop(Syncfusion.Drawing.RectangleF,System.Boolean)">
            <summary>
            Creates <see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> that represent box.
            </summary>
            <param name="rect">The bounds of the box.</param>
            <param name="is3D">The value indicates that box is in 3D.</param>
            <returns><see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> that represent box.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.DrawPointSymbol(Syncfusion.Chart.Graphics3D,Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint)">
            <summary>
            Renders the symbol that is to be associated with a point. Delegates to the <see cref="T:Syncfusion.Chart.RenderingHelper"/> class.
            <seealso cref="T:Syncfusion.Chart.ChartSymbolInfo"/>
            </summary>
            <param name="g">The graphics object that is to be used.</param>
            <param name="styledPoint">The associated point.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.DrawPointSymbol(Syncfusion.Chart.Graphics3D,Syncfusion.Chart.ChartStyleInfo,Syncfusion.Chart.Vector3D,System.Boolean)">
            <summary>
            Renders the symbol that is to be associated with a point. Delegates to the <see cref="T:Syncfusion.Chart.RenderingHelper"/> class.
            <seealso cref="T:Syncfusion.Chart.ChartSymbolInfo"/>
            </summary>
            <param name="g">The graphics object that is to be used.</param>
            <param name="style">The style that is to be used.</param>
            <param name="pt">Anchor point.</param>
            <param name="drawMarker">Indicates whether a marker should be drawn.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.AddSymbolRegion(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint)">
            <summary>
            Adds the symbol region by the specified point index.
            </summary>
            <param name="styledPoint">The associated point.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetRegionFromCircle(Syncfusion.Drawing.PointF,System.Single)">
            <summary>
            Called by several derived renderers to create a region from a 'Hit Test' circle. By overriding this
            method you can expand, contract or change this region.
            </summary>
            <param name="center">The anchor point.</param>
            <param name="radius">The radius of the circle that is to be used as the base for the region.</param>
            <returns>Region object that is commonly used for hit testing, for display of tooltips and the like.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetPath3DFromCircle(Syncfusion.Chart.Vector3D,System.Single)">
            <summary>
            Gets the 3D circle.
            </summary>
            <param name="pt">The center of circle.</param>
            <param name="radius">The radius.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetBrush(System.Int32)">
            <summary>
            Brush information is retrieved from the style associated with the index of the point to be rendered.
            It is then changed for special cases such as when automatic highlighting is enabled.
            </summary>
            <param name="index">Index value of the point for which the brush information is required.</param>
            <returns>Brush information that is to be used for filling elements displayed at this index.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetBrush(System.Int32,Syncfusion.Drawing.Color)">
            <summary>
            Brush information is retrieved from the style associated with the index of the point to be rendered.
            It is then changed for special cases such as when automatic highlighting, series highlighting, symbol highlighting are enabled.
            </summary>
            <param name="index">Index value of the point for which the brush information is required.</param>
            <returns>Brush information that is to be used for filling elements displayed at this index.</returns>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetBrush">
            <summary>
            Brush information is retrieved from the style associated with the index of the point to be rendered.
            It is then changed for special cases such as when automatic highlighting is enabled.
            </summary>
            <returns>Brush information that is to be used for filling elements displayed at this index.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetPhongInterior(Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.Color,System.Double,System.Double)">
            <summary>
            Gets the phong interior.
            </summary>
            <param name="brushInfo">The base brush info.</param>
            <param name="lightColor">Color of the light.</param>
            <param name="lightAlpha">The light alpha.</param>
            <param name="phongAlpha">The phong alpha.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetLowerAnchorPointValue(System.Int32)">
            <summary>
            Calculates the point that is considered to be the low anchor point of a series. This
            value is used when rendering text below chart point elements.
            </summary>
            <param name="index">Index value of the point for which the value is requested.</param>
            <returns>Calculated value that is to be used as the base anchor point.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetPointFromIndex(System.Int32,System.Int32)">
            <summary>
            Overloaded. Given a point index, returns the point to be plotted on the chart.
            </summary>
            <param name="i">X Index value</param>
            <param name="j">Y Index value</param>
            <returns>Point to be plotted</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetPointFromIndex(System.Int32)">
            <summary>
            Given a point index, returns the point to be plotted on the chart.
            </summary>
            <param name="i">X index. Y Index is taken as 0.</param>
            <returns>Point to be plotted.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetPointFromValue(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint)">
            <summary>
            Compute real point from specified <see cref="T:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint"/>
            </summary>
            <param name="cpt">The <see cref="T:Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetPointFromValue(System.Double,System.Double)">
            <summary>
            Compute real point from specified coordinates.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetPointFromValue(Syncfusion.Chart.ChartPoint)">
            <summary>
            Gets the point from value.
            </summary>
            <param name="cpt">The CPT.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetPointFromValue(Syncfusion.Chart.ChartPoint,System.Int32)">
            <summary>
            Gets the point from value.
            </summary>
            <param name="cpt">The <see cref="T:Syncfusion.Chart.ChartPoint"/>.</param>
            <param name="j">The index of Y value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetSideBySideRange">
            <summary>
            Gets the side by side range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetSideBySideInfo">
            <summary>
            Gets the "side by side" info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetStackInfo(System.Int32)">
            <summary>
            Overloaded. This method is used when series are rendered as stacked data. The value returned is a cumulative value of
            Y from all series that are below the series currently being rendered.
            </summary>
            <param name="i"></param>
            <returns>Value that gives the position from which this series should be rendered.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetStackInfoValue(System.Int32)">
            <summary>
            Overloaded. This method is used when series are rendered as stacked data. The value returned is a cumulative value of
            Y from all series that are below the series currently being rendered.
            </summary>
            <param name="i">The index of point.</param>
            <returns>Value that gives the position from which this series should be rendered.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetStackInfoValue(System.Int32,System.Boolean)">
            <summary>
            Overloaded. This method is used when series are rendered as stacked data. The value returned is a cumulative value of
            Y from all series that are below the series currently being rendered.
            </summary>
            <param name="i">The index of point.</param>
            <param name="isWithMe">if set to <c>true</c> the Y value of point will be added to result.</param>
            <returns>Value that gives the position from which this series should be rendered.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetSymbolPoint(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint)">
            <summary>
            Returns the anchor point at which the symbol associated with an index is to be
            displayed.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetSymbolVector(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint)">
            <summary>
            Gets the symbol vector.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetSymbolCoordinates(System.Int32)">
            <summary>
            
            </summary>
            <param name="pointIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetHiLoSymbolCoordinates(System.Int32)">
            <summary>
            Gets the symbol coordinate for hilo series
            </summary>
            <param name="pointIndex">Index of the point</param>
            <returns>Location of the point at specified index</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetSymbolCoordinates(Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint)">
            <summary>
            Gets the symbol coordinates.
            </summary>
            <param name="styledPoint">The styled point.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetXFromIndex(System.Int32,System.Int32)">
            <summary>
            Given a point index, returns the X value to be plotted on the chart.
            </summary>
            <param name="i">X index</param>
            <param name="j">Y index</param>
            <returns>X value to be plotted.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetXFromValue(Syncfusion.Chart.ChartPoint,System.Int32)">
            <summary>
            Given a point and y value, returns the X value to be plotted on the chart.
            </summary>
            <param name="cp">The chart point</param>
            <param name="j">The Y index</param>
            <returns>X value to be plotted.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetXFromCoordinate(System.Double)">
            <summary>
            Given an X coordinate value, returns the display value.
            </summary>
            <param name="value">Coordinate on the axis.</param>
            <returns>Display value.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetYFromIndex(System.Int32,System.Int32)">
            <summary>
            Given the point indices, returns the Y value to be plotted on the chart.
            </summary>
            <param name="i">X index</param>
            <param name="j">Y index</param>
            <returns>Y value to be plotted</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetYFromValue(Syncfusion.Chart.ChartPoint,System.Int32)">
            <summary>
            Given a point and y value, returns the Y value to be plotted on the chart.
            </summary>
            <param name="cp">The chart point value.</param>
            <param name="j">The Y index</param>
            <returns>Y value to be plotted</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetYFromCoordinate(System.Double)">
            <summary>
            Given a Y coordinate value, returns the display value.
            </summary>
            <param name="y"></param>
            <returns>Display value.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetIndexValueFromX(System.Double)">
            <summary>
            This function transforms x vales of series points to index vales.
            Also it populates index hash table.
            </summary>
            <param name="x">The X value of <see cref="T:Syncfusion.Chart.ChartPoint"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetAngleValue(Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartSeries)">
            <summary>
            Gets the angle value.
            </summary>
            <param name="cp">The cp.</param>
            <param name="series">The series.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetAngleValue(System.Int32,Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartSeries)">
            <summary>
            Gets the angle by X value.
            </summary>
            <param name="index">The index.</param>
            <param name="cp">The cp.</param>
            <param name="series">The series.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetXAxisValue(Syncfusion.Chart.ChartPoint,System.Int32)">
            <summary>
            Returns the value form <see cref="T:Syncfusion.Chart.ChartPoint"/> requiring by X axis.
            </summary>
            <param name="cpt">Instance of <see cref="T:Syncfusion.Chart.ChartPoint"/></param>
            <param name="j">Index of Y value from specified point.</param>
            <returns>Require value for axis.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetYAxisValue(Syncfusion.Chart.ChartPoint,System.Int32)">
            <summary>
            Returns the value form <see cref="T:Syncfusion.Chart.ChartPoint"/> requiring by Y axis.
            </summary>
            <param name="cpt">Instance of <see cref="T:Syncfusion.Chart.ChartPoint"/></param>
            <param name="j">Index of Y value from specified point.</param>
            <returns>Require value for axis.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetXDataMeasure">
            <summary>
            Measures the X range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetYDataMeasure">
            <summary>
            Measures the X range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.DrawText(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint,Syncfusion.Drawing.PointF)">
            <summary>
            Overloaded. Renders text. Performs positioning and delegates to the <see cref="T:Syncfusion.Chart.RenderingHelper"/> class.
            </summary>
            <param name="g">Renders text. Performs positioning and delegates to the <see cref="T:Syncfusion.Chart.RenderingHelper"/> class.</param>
            <param name="styledPoint">The associated point.</param>
            <param name="p">Point that is to be used as the anchor.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.DrawCalloutShapeText(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint,Syncfusion.Drawing.PointF)">
            <summary>
            Overloaded. Renders text. Performs positioning and delegates to the <see cref="T:Syncfusion.Chart.RenderingHelper"/> class.
            </summary>
            <param name="g">Renders text. Performs positioning and delegates to the <see cref="T:Syncfusion.Chart.RenderingHelper"/> class.</param>
            <param name="styledPoint">The associated point.</param>
            <param name="pointPos">Point that is to be used as the anchor.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CalculateCalloutPath(Syncfusion.Chart.ChartCalloutInfo,Syncfusion.Drawing.Rectangle,Syncfusion.Drawing.PointF)">
            <summary>
            
            </summary>
            <param name="callout">callout object</param>
            <param name="bnds"> callout rect bounds</param>
            <param name="pointPos">point position</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.ChangeCalloutPosition(Syncfusion.Chart.ChartCalloutInfo,Syncfusion.Drawing.PointF,Syncfusion.Drawing.SizeF,System.Single,System.Single)">
            <summary>
            Changing the callout bounds position when it was rendering outside the chart area.
            </summary>
            <param name="callout">The callout.</param>
            <param name="calloutPos">The callout shape x and y position.</param>
            <param name="siz">The callout shape width and height.</param>
            <param name="offsetX">The callout text offsetX.</param>
            <param name="offsetY">The callout text offsetY.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CalculatePolygonPosition(Syncfusion.Chart.ChartCalloutInfo,Syncfusion.Drawing.Rectangle,Syncfusion.Drawing.PointF)">
            <summary>
            
            </summary>
            <param name="callout">callout object</param>
            <param name="bnds"> callout rect bounds</param>
            <param name="pointPos">point position</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.DrawText(Syncfusion.Chart.Graphics3D,Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint,Syncfusion.Chart.Vector3D,Syncfusion.Drawing.Size)">
            <summary>
            Renders text. Performs positioning and delegates to the <see cref="T:Syncfusion.Chart.RenderingHelper"/> class.
            </summary>
            <param name="g">The graphics object that is to be used.</param>
            <param name="styledPoint">The associated point.</param>
            <param name="p">The point that is to be used as anchor.</param>
            <param name="sz">The display size of the string.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.RenderAdornments(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Overloaded. Renders elements such as Text and Point Symbols.
            </summary>
            <param name="g">The graphics object that is to be used.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.RenderAdornments(Syncfusion.Chart.Graphics3D)">
            <summary>
            Renders elements such as Text and Point Symbols.
            </summary>
            <param name="g">The graphics object that is to be used.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.RenderAdornment(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartSeriesRenderer.ChartStyledPoint)">
            <summary>
            Renders the adornment.
            </summary>
            <param name="g">The g.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.SetBoundsAndRange(Syncfusion.Chart.IChartAreaHost,Syncfusion.Drawing.RectangleF,Syncfusion.Chart.ChartAxis,Syncfusion.Chart.ChartAxis)">
            <summary>
            
            </summary>
            <param name="chart"></param>
            <param name="bounds"></param>
            <param name="xAxis"></param>
            <param name="yAxis"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CreateBoundsPolygon(System.Single)">
            <summary>
            Creates the space separator.
            </summary>
            <param name="z">The Z coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetStyleAt(System.Int32)">
            <summary>
            Delegates to <see cref="M:Syncfusion.Chart.ChartSeries.GetOfflineStyle"/> to return the style associated with this index.
            You can use this override to specify additional style attributes on a renderer basis.
            </summary>
            <param name="index">Index value of the point for which the style is required.</param>
            <returns>Offline composed copy of the style associated with the index.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.FillStyles">
            <summary>
            Fills the styles.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.IsVisiblePoint(Syncfusion.Chart.ChartPoint)">
            <summary>
            Determines whether the specified point is visible.
            </summary>
            <param name="cpt">The ChartPoint instance.</param>
            <returns>
            	<c>true</c> if the specified point is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.PrepearePoints">
            <summary>
            Generates the array of points with specified style.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetDateTimeInterval(System.Double,System.Boolean)">
            <summary>
            Get dateTime interval;
            </summary>
            <param name="value">Date time double value</param>
            <param name="isMonth">True, the interval type is months, otherwise year</param>
            <returns>Interval value</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CreateStyledPoint(System.Int32)">
            <summary>
            Creates the styled point.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CalculateVisibleRange">
            <summary>
            Calculate the visible indices of points for rendering.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CalculateUnEmptyRanges(Syncfusion.Chart.IndexRange)">
            <summary>
            Computes the array of <see cref="T:Syncfusion.Chart.IndexRange"/>, using for indicating unempty points.
            </summary>
            <param name="vrange">The visible range of points.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.PhongShadingColors(Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,System.Double,System.Double,Syncfusion.Drawing.Color[]@,System.Single[]@)">
            <summary>
            Gets the phong shading blend.
            </summary>
            <param name="ambientColor">Color of the ambient.</param>
            <param name="diffusiveColor">Color of the diffusive.</param>
            <param name="lightColor">Color of the light.</param>
            <param name="alpha">The alpha.</param>
            <param name="phong_alpha">The phong_alpha.</param>
            <param name="colors">The colors.</param>
            <param name="positions">The positions.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetTotalDepth">
            <summary>
            Gets the total depth.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetCache">
            <summary>
            Gets the points cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.InsertPoint(System.Int32)">
            <summary>
            Inserts the point.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.RemovePoint(System.Int32)">
            <summary>
            Removes the point.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.UpdatePoint(System.Int32)">
            <summary>
            Updates the point.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.ResetCache">
            <summary>
            Resets the cache.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.GetStyledPoint(System.Int32)">
            <summary>
            Gets the styled point.
            </summary>
            <param name="pointIndex">Index of the point.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesRenderer.CalCachePoints">
            <summary>
            calculates the points to draw when huge data source binded to chart for improving the performance.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSegmentComparer">
            <summary>
            Compares the segments by the position.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSegmentComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSegmentComparer"/> class.
            </summary>
            <param name="inversed">if set to <c>true</c> comparering inversed.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSegmentComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:Syncfusion.Chart.RenderViewer">
            <summary>
            Provides the sorting and rendering of segments.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.RenderViewer.NeedRegionUpdate">
            <summary>
            Gets or sets a value indicating whether need update regions.
            </summary>
            <value><c>true</c> if need update regions; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.RenderViewer.AxisInverted">
            <summary>
            Gets or sets a value indicating whether axis is inverted.
            </summary>
            <value><c>true</c> if axis inverted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.RenderViewer.Regions">
            <summary>
            Gets or sets the regions.
            </summary>
            <value>The regions.</value>
        </member>
        <member name="M:Syncfusion.Chart.RenderViewer.AddSegment(Syncfusion.Chart.ChartSegment)">
            <summary>
            Adds the segment.
            </summary>
            <param name="segment">The segment.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderViewer.Add(Syncfusion.Chart.ChartSeriesRenderer)">
            <summary>
            Adds segments form the specified render.
            </summary>
            <param name="render">The render.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderViewer.Sort">
            <summary>
            Sorts this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.RenderViewer.View(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Draws to the specified <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.
            </summary>
            <param name="g">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderViewer.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.Statistics.BasicStatisticalFormulas">
            <summary>
            The BasicStatisticalFormulas class provides the functionality for the Basic Statistical formulas Mean,Median, .
            </summary>
            <remark>
            Statistical formulas help end-users to analyze their information as well as create more meaningful data. Statistical formulas are implemented using the Statistics class and can be organized into three general groups: Statistical Tests, Basic Statistical Functions and Utility functions.Statistical formulas help end-users to analyze their information as well as create more meaningful data. 
            Statistical formulas are implemented using the Statistics class and can be organized into three general groups: Statistical Tests, Basic Statistical Functions and Utility functions.
            </remark>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.#ctor">
             <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Statistics.BasicStatisticalFormulas"/> class.
             </summary>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.Mean(Syncfusion.Chart.ChartSeries)">
            <summary>
            Calculates mean value of series X values. 
            </summary>
            <param name="series">The name of the Series object that stores the first group's data for which an average is required.</param>
            <returns>Returns a double value that represents the average of all the data points in the given series. </returns>
            <example>
            <p>The following code demonstrate how to get the average of the data points in a series.
            </p>
            <code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double Mean1=BasicStatisticalFormulas.Mean(series1);
            </code>
            <code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim Mean1 As Double
            Mean1=BasicStatisticalFormulas.Mean(series1)
            </code>
            </example>
            <remarks>
            <p>Use this method to calculate the mean (i.e. average) of the points stored in a series.</p>
            <p>If the specified input series does not exist in the SeriesCollection at the time of the method call than an exception will be thrown. </p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.Mean(Syncfusion.Chart.ChartSeries,System.Int32)">
            <summary>
            Calculates mean value of series Y values.
            </summary>
            <param name="series">The name of the Series object that stores the first group's data for which an average is required.</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>
            Returns a double value that represents the average of all the data points in the given series.
            </returns>
            <example>
               <p>The following code demonstrate how to get the average of the data points in a series.
            </p>
               <code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double Mean1=BasicStatisticalFormulas.Mean(series1, 0);
            </code>
             <code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim Mean1 As Double
            Mean1=BasicStatisticalFormulas.Mean(series1, 0)
            </code>
            </example>
            <remarks>
                <p>Use this method to calculate the mean (i.e. average) of the points stored in a series.</p>
                <p>If the specified input series does not exist in the SeriesCollection at the time of the method call than an exception will be thrown. </p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.VarianceUnbiasedEstimator(Syncfusion.Chart.ChartSeries)">
            <summary>
            Calculates variance of series X values. 
            </summary>
            <param name="series">The name of the Series object that stores the group of data. 
            </param>
            <returns>A double that represents the variance within the group of data.
            </returns>
            <example>
            <p>The following Code demonstrate how to gets the VarianceUnBasedEstimator of the data points in a series</p>
            <code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double VarianceUnBased1= Statistics.BasicStatisticalFormulas.VarianceUnBiasedEstimator(series);
            </code>
            <code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim VarianceUnBased1 As Double
            VarianceUnBased1=BasicStatisticalFormulas.VarianceUnBiasedEstimator(series)
            </code>
            </example>
            <remarks>
            <p>This method estimates the variance for a sample.</p>
            <p>If the specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.VarianceUnbiasedEstimator(Syncfusion.Chart.ChartSeries,System.Int32)">
            <summary>
            Calculates variance of series Y values.
            </summary>
            <param name="series">The name of the Series object that stores the group of data.</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>
            A double that represents the variance within the group of data.
            </returns>
            <example>
            	<p>The following Code demonstrate how to gets the VarianceUnBasedEstimator of the data points in a series</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double VarianceUnBased1= Statistics.BasicStatisticalFormulas.VarianceUnBiasedEstimator(series, 0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim VarianceUnBased1 As Double
            VarianceUnBased1=BasicStatisticalFormulas.VarianceUnBiasedEstimator(series, 0)
            </code>
            </example>
            <remarks>
            	<p>This method estimates the variance for a sample.</p>
            	<p>If the specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.VarianceBiasedEstimator(Syncfusion.Chart.ChartSeries)">
             <summary>
             Calculates variance of series X values. 
             </summary>
             <param name="series">The name of the Series object that stores the group of data. 
            </param>
             <returns>A double that represents the variance within the group of data.
            </returns>
             /// <example>
             <p>The following Code demonstrate how to gets the VarianceBasedEstimator of the data points in a series</p>
             <code lang="C#">
             using Syncfusion.Windows.Forms.Chart.Statistics;
            	............
            	double VarianceBased1= Statistics.BasicStatisticalFormulas.VarianceBiasedEstimator(series);
             </code>
             <code lang="VB">
             Imports Syncfusion.Windows.Forms.Chart.Statistics
            	.............
            	Dim VarianceBased1 As Double
            	VarianceBased1=BasicStatisticalFormulas.VarianceBiasedEstimator(series)
            	</code>
             </example>
             <remarks>
             <p>This method estimates the variance for a sample.</p>
            	<p>If the specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
             </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.VarianceBiasedEstimator(Syncfusion.Chart.ChartSeries,System.Int32)">
            <summary>
            Calculates variance of series Y values.
            </summary>
            <param name="series">The name of the Series object that stores the group of data.</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>
            A double that represents the variance within the group of data.
            </returns>
            /// 
            <example>
            	<p>The following Code demonstrate how to gets the VarianceBasedEstimator of the data points in a series</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double VarianceBased1= Statistics.BasicStatisticalFormulas.VarianceBiasedEstimator(series, 0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim VarianceBased1 As Double
            VarianceBased1=BasicStatisticalFormulas.VarianceBiasedEstimator(series, 0)
            </code>
            </example>
            <remarks>
            	<p>This method estimates the variance for a sample.</p>
            	<p>If the specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.Variance(Syncfusion.Chart.ChartSeries,System.Boolean)">
             <summary>
             Calculates variance of series X values. 
             </summary>
             <param name="series">The name of the Series object that stores the group of data. 
            </param>
             <param name="sampleVariance">True if the data is a sample of a population, false if it is the entire population. </param>
             <returns>A double that represents the variance within the group of data.
            </returns>
             <example>
             <p>The following Code demonstrate how to gets the Variance of the data points in a series</p>
             <code lang="C#">
             using Syncfusion.Windows.Forms.Chart.Statistics;
            	............
            	double Variance1= Statistics.BasicStatisticalFormulas.Variance(series,true);
             </code>
             <code lang="VB">
             Imports Syncfusion.Windows.Forms.Chart.Statistics
            	.............
            	Dim Variance1 As Double
            	Variance1=BasicStatisticalFormulas.Variance(series,true)
            	</code>
             </example>
             <remarks>
             <p>This method estimates the variance for a sample.</p>
            	<p>If the specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
             </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.Variance(Syncfusion.Chart.ChartSeries,System.Int32,System.Boolean)">
            <summary>
            Calculates variance of series Y values.
            </summary>
            <param name="series">The name of the Series object that stores the group of data.</param>
            <param name="yIndex">Index of the Y value.</param>
            <param name="sampleVariance">True if the data is a sample of a population, false if it is the entire population.</param>
            <returns>
            A double that represents the variance within the group of data.
            </returns>
            <example>
            	<p>The following Code demonstrate how to gets the Variance of the data points in a series</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double Variance1= Statistics.BasicStatisticalFormulas.Variance(series,true);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim Variance1 As Double
            Variance1=BasicStatisticalFormulas.Variance(series,true)
            </code>
            </example>
            <remarks>
            	<p>This method estimates the variance for a sample.</p>
            	<p>If the specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.StandardDeviation(Syncfusion.Chart.ChartSeries,System.Boolean)">
             <summary>
             Calculates variance of series X values. 
             </summary>
             <param name="series">The name of the Series object that stores the group of data. 
            </param>
             <param name="sampleVariance">True if the data is a sample of a population, false if it is the entire population. </param>
             <returns>A double that represents the Standard Deviation within the group of data.
             </returns>
             <example>
             <p>The following Code demonstrate how to gets the Standard Deviation of the data points in a series</p>
             <code lang="C#">
             using Syncfusion.Windows.Forms.Chart.Statistics;
            	............
            	double Standard1= Statistics.BasicStatisticalFormulas.StandartDeviation(series,false);
             </code>
             <code lang="VB">
             Imports Syncfusion.Windows.Forms.Chart.Statistics
            	.............
            	Dim Standard1 As Double
            	Standard1=BasicStatisticalFormulas.StandartDeviation(series,false)
            	</code>
             </example>
             <remarks>
             <p>This method estimates the Standard Deviation for a sample.</p>
            	<p>If the specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
             </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.StandardDeviation(Syncfusion.Chart.ChartSeries,System.Int32,System.Boolean)">
            <summary>
            Calculates variance of series Y values.
            </summary>
            <param name="series">The name of the Series object that stores the group of data.</param>
            <param name="yIndex">Index of the Y value.</param>
            <param name="sampleVariance">True if the data is a sample of a population, false if it is the entire population.</param>
            <returns>
            A double that represents the Standard Deviation within the group of data.
            </returns>
            <example>
            	<p>The following Code demonstrate how to gets the Standard Deviation of the data points in a series</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double Standard1= Statistics.BasicStatisticalFormulas.StandardDeviation(series,0,false);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim Standard1 As Double
            Standard1=BasicStatisticalFormulas.StandardDeviation(series,0,false)
            </code>
            </example>
            <remarks>
            	<p>This method estimates the Standard Deviation for a sample.</p>
            	<p>If the specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.Covariance(Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartSeries)">
             <summary>
             Calculates covariance of series X values. 
             </summary>
             <param name="series1">The name of the Series object that stores the first group's data. 
            </param>
             <param name="series2"> The name of the Series object that stores the second group's data.
             An exception will be raised if the input series do not have the same number of data points. </param>
             <returns>A double that represents the covariance value between the two groups of data.
            </returns>
             <example>
             <p>The following Code demonstrate how to gets the Covariance of the data points in a series</p>
             <code lang="C#">
             using Syncfusion.Windows.Forms.Chart.Statistics;
            	............
            	double Covariance1= Statistics.BasicStatisticalFormulas.Covariance(series1,series2);
             </code>
             <code lang="VB">
             Imports Syncfusion.Windows.Forms.Chart.Statistics
            	.............
            	Dim Covariance1 As Double
            	Covariance1=BasicStatisticalFormulas.Covariance(series1,series2)
            	</code>
             </example>
             <remarks>
             <p>This method returns the average of the product of deviations of the data points from their respective means.</p>
             <p>Covariance is a measure of the relationship between two ranges of data, and can be used to determine whether two ranges of data move together - that is, whether large values of one set are associated with large values of the other (positive covariance), whether small values of one set are associated with large values of the other (negative covariance), or whether values in both sets are unrelated (covariance near zero).</p>
            	<p>If a specified input series does not exist in the series collection at the time of the method call than an exception will be thrown. An exception will also be raised if the series do not have the same number of data points.</p>
             </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.Covariance(Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartSeries,System.Int32)">
            <summary>
            Calculates covariance of series Y values.
            </summary>
            <param name="series1">The name of the Series object that stores the first group's data.</param>
            <param name="series2">The name of the Series object that stores the second group's data.
            An exception will be raised if the input series do not have the same number of data points.</param>
            <param name="yIndex">Index of the Y index.</param>
            <returns>
            A double that represents the covariance value between the two groups of data.
            </returns>
            <example>
            	<p>The following Code demonstrate how to gets the Covariance of the data points in a series</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double Covariance1= Statistics.BasicStatisticalFormulas.Covariance(series1,series2, 0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim Covariance1 As Double
            Covariance1=BasicStatisticalFormulas.Covariance(series1,series2, 0)
            </code>
            </example>
            <remarks>
            	<p>This method returns the average of the product of deviations of the data points from their respective means.</p>
            	<p>Covariance is a measure of the relationship between two ranges of data, and can be used to determine whether two ranges of data move together - that is, whether large values of one set are associated with large values of the other (positive covariance), whether small values of one set are associated with large values of the other (negative covariance), or whether values in both sets are unrelated (covariance near zero).</p>
            	<p>If a specified input series does not exist in the series collection at the time of the method call than an exception will be thrown. An exception will also be raised if the series do not have the same number of data points.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.Correlation(Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartSeries)">
             <summary>
             Calculates correlation of series X values. 
             </summary>
             <param name="series1">The name of the Series object that stores the first group's data. 
            </param>
             <param name="series2"> The name of the Series object that stores the second group's data.
             An exception will be raised if the input series do not have the same number of data points. </param>
             <returns>A double that represents the Correlation value between the two groups of data.
             </returns>
             <example>
             <p>The following Code demonstrate how to gets the Correlation of the data points in a series</p>
             <code lang="C#">
             using Syncfusion.Windows.Forms.Chart.Statistics;
            	............
            	double Correlation1= Statistics.BasicStatisticalFormulas.Correlation(series1,series2);
             </code>
             <code lang="VB">
             Imports Syncfusion.Windows.Forms.Chart.Statistics
            	.............
            	Dim Correlation1 As Double
            	Correlation1=BasicStatisticalFormulas.Correlation(series1,series2)
            	</code>
             </example>
             <remarks>
             <p>Correlation measures the relationship between two data sets that are scaled to be independent of the unit of measurement. This correlation method returns the covariance of two data sets divided by the product of their standard deviations, and always ranges from -1 to 1.
             Use correlation to determine whether two ranges of data move together that is, whether large values of one set are associated with large values of the other (positive correlation), whether small values of one set are associated with large values of the other (negative correlation), or whether values in both sets are unrelated (correlation near zero).</p>
             <p>If a specified input series does not exist in the series collection at the time of the method call than an exception will be thrown. An exception will also be raised if the series do not have the same number of data points.</p>
             </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.Correlation(Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartSeries,System.Int32)">
            <summary>
            Calculates correlation of series Y values.
            </summary>
            <param name="series1">The name of the Series object that stores the first group's data.</param>
            <param name="series2">The name of the Series object that stores the second group's data.
            An exception will be raised if the input series do not have the same number of data points.</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>
            A double that represents the Correlation value between the two groups of data.
            </returns>
            <example>
            	<p>The following Code demonstrate how to gets the Correlation of the data points in a series</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double Correlation1= Statistics.BasicStatisticalFormulas.Correlation(series1,series2,0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim Correlation1 As Double
            Correlation1=BasicStatisticalFormulas.Correlation(series1,series2,0)
            </code>
            </example>
            <remarks>
            	<p>Correlation measures the relationship between two data sets that are scaled to be independent of the unit of measurement. This correlation method returns the covariance of two data sets divided by the product of their standard deviations, and always ranges from -1 to 1.
            Use correlation to determine whether two ranges of data move together that is, whether large values of one set are associated with large values of the other (positive correlation), whether small values of one set are associated with large values of the other (negative correlation), or whether values in both sets are unrelated (correlation near zero).</p>
            	<p>If a specified input series does not exist in the series collection at the time of the method call than an exception will be thrown. An exception will also be raised if the series do not have the same number of data points.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.Median(Syncfusion.Chart.ChartSeries)">
             <summary>
             Calculates Median of series X values. 
             </summary>
             <param name="series">The input series</param>
             <example>
             <p>The following Code demonstrate how to gets the median of the data points in a series</p>
             <code lang="C#">
             using Syncfusion.Windows.Forms.Chart.Statistics;
            	............
            	double Median1= Statistics.BasicStatisticalFormulas.Median(series1);
             </code>
             <code lang="VB">
             Imports Syncfusion.Windows.Forms.Chart.Statistics
            	.............
            	Dim Median1 As Double
            	Median1=BasicStatisticalFormulas.Median(series1)
            	</code>
             </example>
             <remarks>
             <p>Use this method to calculate the median of the points stored in a series.
            	The median is the middle value of a sample set, where half of the members are greater in size and half the members are lesser in size.</p>
            <p>if the specified input series does not exist in the SeriesCollection at the time of the method call than an exception will be thrown.</p>
             </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.Median(Syncfusion.Chart.ChartSeries,System.Int32)">
            <summary>
            Calculates Median of series Y values.
            </summary>
            <param name="series">The input series</param>
            <param name="yIndex">Index of the Y index.</param>
            <returns></returns>
            <example>
            	<p>The following Code demonstrate how to gets the median of the data points in a series</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double Median1= Statistics.BasicStatisticalFormulas.Median(series1, 0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim Median1 As Double
            Median1=BasicStatisticalFormulas.Median(series1, 0)
            </code>
            </example>
            <remarks>
            	<p>Use this method to calculate the median of the points stored in a series.
            The median is the middle value of a sample set, where half of the members are greater in size and half the members are lesser in size.</p>
            	<p>if the specified input series does not exist in the SeriesCollection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.ZTest(System.Double,System.Double,System.Double,System.Double,Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartSeries)">
            <summary>
            Performs Z test on input series. This test assumes that 
            there is some difference between mean values of input series populations.
            Input series are regarded as samples from normally distributed populations 
            with known variances.
            </summary>
            <param name="hypothesizedMeanDifference">Difference between populations means.</param>
            <param name="varianceFirstGroup">Variance of the first series population.</param>
            <param name="varianceSecondGroup">Variance of the second series population.</param>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data..</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data..</param>
            <returns>ZTestResult Class</returns>
            <example>
            <p>The following code demonstrate how to calculate Ztest</p>
            <code lang="C#">
            ZTestResult ztr = BasicStatisticalFormulas.ZTest( Convert.ToDouble(TextBox6.Text.ToString()),sqrtVarianceOfFirstSeries*sqrtVarianceOfFirstSeries,sqrtVarianceOfSecondSeries* sqrtVarianceOfSecondSeries,0.05,series1,series2);
            </code>
            <code lang="VB">
            Dim ztr As ZTestResult = BasicStatisticalFormulas.ZTest(Convert.ToDouble(TextBox6.Text.ToString()), sqrtVarianceOfFirstSeries*sqrtVarianceOfFirstSeries, sqrtVarianceOfSecondSeries*sqrtVarianceOfSecondSeries, 0.05, series1, series2)
            </code> 
            </example>
            <remarks>
            <p>This method performs a Z test for two groups of data, and returns the results using a ZTestResult object.</p>
            <p>Two and only two groups of data must be specified. If either input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.ZTest(System.Double,System.Double,System.Double,System.Double,Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartSeries,System.Int32)">
            <summary>
            Performs Z test on input series. This test assumes that
            there is some difference between mean values of input series populations.
            Input series are regarded as samples from normally distributed populations
            with known variances.
            </summary>
            <param name="hypothesizedMeanDifference">Difference between populations means.</param>
            <param name="varianceFirstGroup">Variance of the first series population.</param>
            <param name="varianceSecondGroup">Variance of the second series population.</param>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data..</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data..</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>ZTestResult Class</returns>
            <example>
            	<p>The following code demonstrate how to calculate Ztest</p>
            	<code lang="C#">
            ZTestResult ztr = BasicStatisticalFormulas.ZTest( Convert.ToDouble(TextBox6.Text.ToString()),sqrtVarianceOfFirstSeries*sqrtVarianceOfFirstSeries,sqrtVarianceOfSecondSeries* sqrtVarianceOfSecondSeries,0.05,series1,series2, 0);
            </code>
            	<code lang="VB">
            Dim ztr As ZTestResult = BasicStatisticalFormulas.ZTest(Convert.ToDouble(TextBox6.Text.ToString()), sqrtVarianceOfFirstSeries*sqrtVarianceOfFirstSeries, sqrtVarianceOfSecondSeries*sqrtVarianceOfSecondSeries, 0.05, series1, series2, 0)
            </code>
            </example>
            <remarks>
            	<p>This method performs a Z test for two groups of data, and returns the results using a ZTestResult object.</p>
            	<p>Two and only two groups of data must be specified. If either input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.TTestEqualVariances(System.Double,System.Double,Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartSeries)">
            <summary>
            Performs T test on input series. This test assumes that 
            there is some difference between mean values of input series populations.
            Input series are regarded as samples from normally distributed populations.
            The population variances are assumed to be equal. This is a key feature of the test, because 
            there is no exact T test for two samples from populations with different variances.
            </summary>
            <param name="hypothesizedMeanDifference">Difference between populations means.</param>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data.</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data.</param>
            <returns> TTestResult class </returns>
            <example>
            <p>The following code demonstrate how to calculate TTest Equal Variance</p>
            <code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            TTestResult ttr = BasicStatisticalFormulas.TTestEqualVariances (0.2, 0.05, series1, series2);
            </code>
            <code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ttr As TTestResult = BasicStatisticalFormulas.TTestEqualVariances (0.2, 0.05, series1, series2)
            </code> 
            </example>
            <remarks>
            <p>This method performs a T test for two groups of data, and assumes equal variances between the two groups (i.e. series).</p>
            <p>If either input series does not exist in the series collection at the time of the method call an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.TTestEqualVariances(System.Double,System.Double,Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartSeries,System.Int32)">
            <summary>
            Performs T test on input series. This test assumes that
            there is some difference between mean values of input series populations.
            Input series are regarded as samples from normally distributed populations.
            The population variances are assumed to be equal. This is a key feature of the test, because
            there is no exact T test for two samples from populations with different variances.
            </summary>
            <param name="hypothesizedMeanDifference">Difference between populations means.</param>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data.</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data.</param>
            <param name="yIndex">Index of the Y index.</param>
            <returns>TTestResult class</returns>
            <example>
            	<p>The following code demonstrate how to calculate TTest Equal Variance</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            TTestResult ttr = BasicStatisticalFormulas.TTestEqualVariances (0.2, 0.05, series1, series2, 0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ttr As TTestResult = BasicStatisticalFormulas.TTestEqualVariances (0.2, 0.05, series1, series2, 0)
            </code>
            </example>
            <remarks>
            	<p>This method performs a T test for two groups of data, and assumes equal variances between the two groups (i.e. series).</p>
            	<p>If either input series does not exist in the series collection at the time of the method call an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.TTestUnEqualVariances(System.Double,System.Double,Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartSeries)">
            <summary>
            Performs T test on input series. This test assumes that 
            there is some difference between mean values of input series populations.
            Input series are regarded as samples from normally distributed populations.
            The population variances are assumed to be unequal. So this method is not statistically exact,
            but it works well, and sometimes is called robust T test.
            </summary>
            <param name="hypothesizedMeanDifference">Difference between populations means.</param>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data.</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data.</param>
            <returns> TTestResult class </returns>
            <example>
            <p>The following code demonstrate how to calculate TTest UnEqual Variance</p>
            <code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            TTestResult ttr = BasicStatisticalFormulas.TTestUnEqualVariances (0.2, 0.05, series1, series2);
            </code>
            <code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ttr As TTestResult = BasicStatisticalFormulas.TTestUnEqualVariances (0.2, 0.05, series1, series2)
            </code> 
            </example>
            <remarks>
            <p>This method performs a T test for two groups of data, and assumes unequal variances between the two groups (i.e. series).</p>
            <p>This analysis tool is referred to as a heteroscedastic t-test, and can be used when the groups under study are distinct. Use a paired test when there is one group before and after a treatment.</p>
            <p>If either input series does not exist in the series collection at the time of the method call an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.TTestUnEqualVariances(System.Double,System.Double,Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartSeries,System.Int32)">
            <summary>
            Performs T test on input series. This test assumes that
            there is some difference between mean values of input series populations.
            Input series are regarded as samples from normally distributed populations.
            The population variances are assumed to be unequal. So this method is not statistically exact,
            but it works well, and sometimes is called robust T test.
            </summary>
            <param name="hypothesizedMeanDifference">Difference between populations means.</param>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data.</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data.</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>TTestResult class</returns>
            <example>
            	<p>The following code demonstrate how to calculate TTest UnEqual Variance</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            TTestResult ttr = BasicStatisticalFormulas.TTestUnEqualVariances (0.2, 0.05, series1, series2, 0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ttr As TTestResult = BasicStatisticalFormulas.TTestUnEqualVariances (0.2, 0.05, series1, series2, 0)
            </code>
            </example>
            <remarks>
            	<p>This method performs a T test for two groups of data, and assumes unequal variances between the two groups (i.e. series).</p>
            	<p>This analysis tool is referred to as a heteroscedastic t-test, and can be used when the groups under study are distinct. Use a paired test when there is one group before and after a treatment.</p>
            	<p>If either input series does not exist in the series collection at the time of the method call an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.TTestPaired(System.Double,System.Double,Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartSeries)">
            <summary>
            Performs T test on input series. This test assumes that 
            there is some difference between mean values of input series populations.
            Input series are regarded as samples from normally distributed populations.
            The population variances are assumed to be unequal. So this method is not statistically exact,
            but it works well, and sometimes is called robust T test.
            </summary>
            <param name="hypothesizedMeanDifference">Difference between populations means.</param>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data.</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data.</param>
            <returns> TTestResult class </returns>
            <example>
            <p>The following code demonstrate how to calculate TTestPaired</p>
            <code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            TTestResult ttr = BasicStatisticalFormulas.TTestPaired(0.2, 0.05, series1, series2);
            </code>
            <code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ttr As TTestResult = BasicStatisticalFormulas.TTestPaired (0.2, 0.05, series1, series2)
            </code> 
            </example>
            <remarks>
            <p>This method performs a paired two-sample student's t-test to determine whether a sample's means are distinct. This form of the t-test does not assume that the variances of both populations are equal.</p>
            <p>Use a paired test when there is a natural pairing of observations in the samples, such as a sample group that is tested twice (e.g. before and after an experiment).</p>
            <p>If either input series does not exist in the series collection at the time of the method call an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.TTestPaired(System.Double,System.Double,Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartSeries,System.Int32)">
            <summary>
            Performs T test on input series. This test assumes that
            there is some difference between mean values of input series populations.
            Input series are regarded as samples from normally distributed populations.
            The population variances are assumed to be unequal. So this method is not statistically exact,
            but it works well, and sometimes is called robust T test.
            </summary>
            <param name="hypothesizedMeanDifference">Difference between populations means.</param>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data.</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data.</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>TTestResult class</returns>
            <example>
            	<p>The following code demonstrate how to calculate TTestPaired</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            TTestResult ttr = BasicStatisticalFormulas.TTestPaired(0.2, 0.05, series1, series2, 0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ttr As TTestResult = BasicStatisticalFormulas.TTestPaired (0.2, 0.05, series1, series2, 0)
            </code>
            </example>
            <remarks>
            	<p>This method performs a paired two-sample student's t-test to determine whether a sample's means are distinct. This form of the t-test does not assume that the variances of both populations are equal.</p>
            	<p>Use a paired test when there is a natural pairing of observations in the samples, such as a sample group that is tested twice (e.g. before and after an experiment).</p>
            	<p>If either input series does not exist in the series collection at the time of the method call an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.FTest(System.Double,Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartSeries)">
            <summary>
            Performs F test on input series. This test looks whether first series variance is smaller than second series variance.
            If FValue in FTestResult is bigger than FCriticalValueOneTail than we can't deduce that it is truly smaller.
            The test tests ratio of two variances s1^2/s2^2 which is proved to be distributed 
            according F distribution. The null hypothesis is that variances are equal.
            </summary>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data.</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data.</param>
            <returns> FTestResult class </returns>
            <example>
            <p>The following code demonstrate how to calculate FTest.</p>
            <code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            FTestResult ftr = BasicStatisticalFormulas.FTest(0.05, series1, series2);
            </code>
            <code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ftr As FTestResult = BasicStatisticalFormulas.FTest(0.05, series1, series2)
            </code> 
            </example>
            <remarks>
            <p>This method returns the results of the F-test using an FTestResult object.</p>
            <p>FTest performs a two-sample F-test to compare two population variances. For example, it can be used to determine whether the time scores in a swimming meet have a difference in variance for samples from two teams.</p>
            <p>If a specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.FTest(System.Double,Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartSeries,System.Int32)">
            <summary>
            Performs F test on input series. This test looks whether first series variance is smaller than second series variance.
            If FValue in FTestResult is bigger than FCriticalValueOneTail than we can't deduce that it is truly smaller.
            The test tests ratio of two variances s1^2/s2^2 which is proved to be distributed
            according F distribution. The null hypothesis is that variances are equal.
            </summary>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data.</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data.</param>
            <param name="yIndex">Index of the y.</param>
            <returns>FTestResult class</returns>
            <example>
            	<p>The following code demonstrate how to calculate FTest.</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            FTestResult ftr = BasicStatisticalFormulas.FTest(0.05, series1, series2, 0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ftr As FTestResult = BasicStatisticalFormulas.FTest(0.05, series1, series2, 0)
            </code>
            </example>
            <remarks>
            	<p>This method returns the results of the F-test using an FTestResult object.</p>
            	<p>FTest performs a two-sample F-test to compare two population variances. For example, it can be used to determine whether the time scores in a swimming meet have a difference in variance for samples from two teams.</p>
            	<p>If a specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.Anova(System.Double,Syncfusion.Chart.ChartSeries[])">
            <summary>
            Performs Anova (Analysis of variance test) on input series. All series should have the same 
            number of points. The tests null hypothesis assumes that all series means are equal and 
            that all variances of series are also equal. The alternative to null hypothesis is that there 
            is one inequality between means of series. For better understanding of this test, we recommend to read:
            Dowdy, S. M.
            Statistics for research / Shirley Dowdy, Stanley Weardon, Daniel Chilko.
            p. cm. – (Wiley series in probability and statistics; 1345)
            </summary>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="inputSeries">Series array</param>
            <returns> AnovaResult class </returns>
            <example>
            <p>The following code demonstrate how to calculate AnovaTest</p>
            <code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            AnovaResult ar = BasicStatisticalFormulas.Anova(0.5,new ChartSeries[]{ series1, series2, series3} );
            </code>
            <code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ar As AnovaResult = BasicStatisticalFormulas.Anova(0.5, New ChartSeries(){ series1, series2, series3})
            </code> 
            </example> 
            <remarks>
            <p>An ANOVA test is used to test the difference between the means of two or more groups of data.</p>
            <p>Two or more groups of data (series) must be specified, and each series must have the same number of data points otherwise an exception will be raised.</p>
            <p>If a specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.Anova(System.Double,Syncfusion.Chart.ChartSeries[],System.Int32)">
            <summary>
            Performs Anova (Analysis of variance test) on input series. All series should have the same
            number of points. The tests null hypothesis assumes that all series means are equal and
            that all variances of series are also equal. The alternative to null hypothesis is that there
            is one inequality between means of series. For better understanding of this test, we recommend to read:
            Dowdy, S. M.
            Statistics for research / Shirley Dowdy, Stanley Weardon, Daniel Chilko.
            p. cm. – (Wiley series in probability and statistics; 1345)
            </summary>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="inputSeries">Series array</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>AnovaResult class</returns>
            <example>
            	<p>The following code demonstrate how to calculate AnovaTest</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            AnovaResult ar = BasicStatisticalFormulas.Anova(0.5,new ChartSeries[]{ series1, series2, series3}, 0 );
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ar As AnovaResult = BasicStatisticalFormulas.Anova(0.5, New ChartSeries(){ series1, series2, series3}, 0)
            </code>
            </example>
            <remarks>
            	<p>An ANOVA test is used to test the difference between the means of two or more groups of data.</p>
            	<p>Two or more groups of data (series) must be specified, and each series must have the same number of data points otherwise an exception will be raised.</p>
            	<p>If a specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.DifferenceX(Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartSeries)">
            <summary>
            Calculates new series by substracting corresponding values of second series from firs series. 
            </summary>
            <param name="series1">The name of the series that stores the first group of data.</param>
            <param name="series2">The name of the series that stores the second group of data.</param>
            <returns>Return difference between the two series points</returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.BasicStatisticalFormulas.DifferenceY(Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartSeries,System.Int32)">
            <summary>
            Calculates new series by substracting corresponding values of second series from firs series.
            </summary>
            <param name="series1">The name of the series that stores the first group of data.</param>
            <param name="series2">The name of the series that stores the second group of data.</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>
            Return difference between the two series points
            </returns>
        </member>
        <member name="T:Syncfusion.Chart.Statistics.ZTestResult">
            <summary>
            The result of statistical Z test is stored in this class.
            If the Z value is closer to 0.0 than ZCriticalValueTwoTail or 
            even ZCriticalValueOneTail, then we can't deduce that D(hypothesized difference) is not 
            good mean value difference. In other case ( ZCriticalValueTwoTail is closer to 0.0
            than ZValue), there is a huge probability that  hypothesized difference D hadn't been 
            chosen correctly.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.ZTestResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Statistics.ZTestResult"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.ZTestResult.FirstSeriesMean">
            <summary>
            Gets first series mean value. Series represents sample from studied population.
            </summary>
            <value>The first series mean.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.ZTestResult.FirstSeriesVariance">
            <summary>
            Gets first series variance. Series represents sample from studied population.
            </summary>
            <value>The first series variance.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.ZTestResult.ProbabilityZOneTail">
            <summary>
            Gets the probability that the random variable has values at the tail, assuming that null hypothesis is true.
            </summary>
            <value>The probability Z one tail.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.ZTestResult.ProbabilityZTwoTail">
            <summary>
            Gets the probability that the random variable has values at the tails, assuming that null hypothesis is true.
            </summary>
            <value>The probability Z two tail.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.ZTestResult.SecondSeriesMean">
            <summary>
            Gets second series mean value. Series represents sample from studied population.
            </summary>
            <value>The second series mean.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.ZTestResult.SecondSeriesVariance">
            <summary>
            Gets second series variance. Series represents sample from studied population.
            </summary>
            <value>The second series variance.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.ZTestResult.ZCriticalValueOneTail">
            <summary>
            Gets critical value of Z which corresponds to Alpha probability.
            The area under normal probability density curve of tail is equal to alpha probability.
            </summary>
            <value>The Z critical value one tail.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.ZTestResult.ZCriticalValueTwoTail">
            <summary>
            Gets critical value of Z which corresponds to Alpha probability.
            The area under normal probability density curve of two symmetrical tails is equal to alpha probability.
            </summary>
            <value>The Z critical value two tail.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.ZTestResult.ZValue">
            <summary>
            Gets calculated z value. ( Value of normally distributed random variable with mean=0, and variance=1 ).
            </summary>
            <value>The Z value.</value>
        </member>
        <member name="T:Syncfusion.Chart.Statistics.TTestResult">
            <summary>
            The result of statistical T test is stored in this class.
            If the T value is closer to 0.0 than TCriticalValueTwoTail or 
            even TCriticalValueOneTail, then we can't deduce that D(hypothesized difference) is not 
            good mean value difference. In other case ( TCriticalValueTwoTail is closer to 0.0 
            than TValue), there is a huge probability that  hypothesized difference D hadn't been 
            chosen correctly.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.TTestResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Statistics.TTestResult"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.TTestResult.DegreeOfFreedom">
            <summary>
            Gets number of degrees of freedom of T variable student's distribution.
            </summary>
            <value>The degree of freedom.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.TTestResult.FirstSeriesMean">
            <summary>
            Gets first series mean value. Series represents sample from studied population.
            </summary>
            <value>The first series mean.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.TTestResult.FirstSeriesVariance">
            <summary>
            Gets first series variance. Series represents sample from studied population.
            </summary>
            <value>The first series variance.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.TTestResult.ProbabilityTOneTail">
            <summary>
            Gets the probability that the random variable has values at the tail, assuming that null hypothesis is true.
            </summary>
            <value>The probability T one tail.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.TTestResult.ProbabilityTTwoTail">
            <summary>
            Gets the probability that the random variable has values at the tails, assuming that null hypothesis is true.
            </summary>
            <value>The probability T two tail.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.TTestResult.SecondSeriesMean">
            <summary>
            Gets second series mean value. Series represents sample from studied population.
            </summary>
            <value>The second series mean.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.TTestResult.SecondSeriesVariance">
            <summary>
            Gets second series variance. Series represents sample from studied population.
            </summary>
            <value>The second series variance.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.TTestResult.TCriticalValueOneTail">
            <summary>
            Gets critical value of T which corresponds to Alpha probability.
            The area under normal probability density curve of tail is equal to alpha probability.
            </summary>
            <value>The T critical value one tail.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.TTestResult.TCriticalValueTwoTail">
            <summary>
            Gets critical value of T which corresponds to Alpha probability.
            The area under normal probability density curve of two symmetrical tails is equal to alpha probability.
            </summary>
            <value>The T critical value two tail.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.TTestResult.TValue">
            <summary>
            Gets calculated T value. ( Value of normally distributed random variable with mean=0, and variance=1 ).
            </summary>
            <value>The T value.</value>
        </member>
        <member name="T:Syncfusion.Chart.Statistics.FTestResult">
            <summary>
            The result of statistical F test is stored in this class.
            If the F value is closer to 1.0 than FCriticalValueOneTail, then we can't deduce that first variance 
            is smaller than second. But if F value is bigger than 1.0, then replace the series and run the 
            test again. Maybe second series variance is smaller than first.
            Note: That if the second test also fails, this doesn't automatically prove that your variances
            are equal.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.FTestResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Statistics.FTestResult"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.FTestResult.FirstSeriesMean">
            <summary>
            Gets first series mean value. Series represents sample from studied population.
            </summary>
            <value>The first series mean.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.FTestResult.FirstSeriesVariance">
            <summary>
            Gets first series variance. Series represents sample from studied population.
            </summary>
            <value>The first series variance.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.FTestResult.ProbabilityFOneTail">
            <summary>
            Gets the probability that the random variable has values at the tail, assuming that null hypothesis is true.
            </summary>
            <value>The probability F one tail.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.FTestResult.SecondSeriesMean">
            <summary>
            Gets second series mean value. Series represents sample from studied population.
            </summary>
            <value>The second series mean.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.FTestResult.SecondSeriesVariance">
            <summary>
            Gets second series variance. Series represents sample from studied population.
            </summary>
            <value>The second series variance.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.FTestResult.FCriticalValueOneTail">
            <summary>
            Gets critical value of F which corresponds to Alpha probability.
            The area under normal probability density curve of tail is equal to alpha probability.
            </summary>
            <value>The F critical value one tail.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.FTestResult.FValue">
            <summary>
            Gets calculated F value. ( Value of normally distributed random variable with mean=0, and variance=1 ).
            </summary>
            <value>The F value.</value>
        </member>
        <member name="T:Syncfusion.Chart.Statistics.AnovaResult">
            <summary>
            Result of Anova test is stored in this class.
            If AnovaResult.FRatio is farther from unity than FCritical value, then the null hypothesis
            (that all means are equal) fails.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.AnovaResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.Statistics.AnovaResult"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.AnovaResult.DegreeOfFreedomBetweenGroups">
            <summary>
            Gets degrees of freedom between groups. This is simply a - 1, where a is number of series in anova test.
            </summary>
            <value>The degree of freedom between groups.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.AnovaResult.DegreeOfFreedomTotal">
            <summary>
            Gets total degrees of freedom. This is simply n*a - 1, where a is number of series in anova test, and n is number of points in series.
            </summary>
            <value>The degree of freedom total.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.AnovaResult.DegreeOfFreedomWithinGroups">
            <summary>
            Gets degrees of freedom within groups ( returns a*(n - 1) ).
            </summary>
            <value>The degree of freedom within groups.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.AnovaResult.FCriticalValue">
            <summary>
            Gets critical value of FRatio which corresponds to specified confidence probability.
            </summary>
            <value>The F critical value.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.AnovaResult.FRatio">
            <summary>
            Gets FRatio ( ratio of between group variance and within group variance). This ratio should be
            compared with FCritical value, and if it is farther from unity than FCritical value, then the null hypothesis
            (that all means are equal) fails.
            </summary>
            <value>The F ratio.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.AnovaResult.MeanSquareVarianceBetweenGroups">
            <summary>
            Gets mean square variance between groups.
            </summary>
            <value>The mean square variance between groups.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.AnovaResult.MeanSquareVarianceWithinGroups">
            <summary>
            Gets mean square variance within groups.
            </summary>
            <value>The mean square variance within groups.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.AnovaResult.SumOfSquaresBetweenGroups">
            <summary>
            Gets sum of squares between groups.
            </summary>
            <value>The sum of squares between groups.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.AnovaResult.SumOfSquaresTotal">
            <summary>
            Gets total sum of squares.
            </summary>
            <value>The sum of squares total.</value>
        </member>
        <member name="P:Syncfusion.Chart.Statistics.AnovaResult.SumOfSquaresWithinGroups">
            <summary>
            Gets sum of squares within groups.
            </summary>
            <value>The sum of squares within groups.</value>
        </member>
        <member name="T:Syncfusion.Chart.Statistics.NamespaceDoc">
            <summary>
            The Syncfusion.Windows.Forms.Chart.Statistics namespace conatins the different types of statistical methods to perform tests such as AnovaResult, BasicStatisticalFormulas, FTestResult, TTestResult, UtilityFunctions, ZTestResult on Histogram chart.
            </summary>    
        </member>
        <member name="T:Syncfusion.Chart.Statistics.UtilityFunctions">
            <summary>
            Class contains Gamma, factorial, Beta and other functions used in statistical distributions formulas.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.GammaLn(System.Double)">
            <summary>
            Natural logarithm of gamma function ( for y > 0 ).
            </summary>
            <param name="y"></param>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.Gamma(System.Double)">
            <summary>
            Gamma function ( for y > 0 ).
            </summary>
            <param name="y"></param>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.Factorial(System.Int32)">
            <summary>
            Factorial n! ( for n >= 0 ).
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.FactorialLn(System.Int32)">
            <summary>
            Logarithm of factorial n! ( for n >= 0 ).
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.Binomial(System.Int32,System.Int32)">
            <summary>
            Binomial coefficient n!/(k!(n-k)!) ( for n >= k >= 0 ).
            </summary>
            <param name="n"></param>
            <param name="k"></param>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.BetaLn(System.Double,System.Double)">
            <summary>
            Logarithm of Beta function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.Beta(System.Double,System.Double)">
            <summary>
            Beta function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.NormalDistributionDensity(System.Double,System.Double,System.Double)">
            <summary>
            Returns Normal Distribution density function.
            </summary>
            <param name="x">Value at which the distribution density is evaluated.</param>
            <param name="m">Expected value of distribution (Mean value)</param>
            <param name="sigma">Variance of distribution</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.NormalDistributionDensityLn(System.Double,System.Double,System.Double)">
            <summary>
            Returns Logarithm of Normal Distribution density function.
            </summary>
            <param name="x">Value at which the distribution density is evaluated.</param>
            <param name="m">Expected value of distribution (Mean value)</param>
            <param name="sigma">Variance of distribution</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.Erf(System.Double)">
            <summary>
            Error function.
            </summary>
            <param name="x">.</param>
            <returns>Returns error function.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.InverseNormalDistribution(System.Double)">
            <summary>
            Inverse Normal Distribution function.
            This is rational approximation of Normal Distribution function.
            The absolute value of the relative error is less than 1.15·10-9 in the entire region.
            Lower tail quantile for standard normal distribution function.
            This function returns an approximation of the inverse cumulative
            standard normal distribution function.  I.e., given P, it returns
            an approximation to the X satisfying P = Pr{Z is smaller than X} where Z is a
            random variable from the standard normal distribution.
            </summary>
            <param name="p">Probability at which function is evaluated. p must be in ( 0,1 ) range. </param>
            <returns> Returns Inverse cumulative distribution.</returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.NormalDistribution(System.Double)">
            <summary>
            Normal Distribution function.
            </summary>
            <param name="x">Value at which the distribution is evaluated.</param>
            <returns> Returns cumulative distribution. ( Returns probability that normally distributed random variable (X - mean)/sigma is smaller than x.).</returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.InverseErf(System.Double)">
            <summary>
            Inverse Error function.
            This is rational approximation of erf function.
            The absolute value of the relative error is less than 1.15·10-9 in the entire region.
            </summary>
            <param name="x">value x is in (-1 , 1) range. </param>
            <returns>Returns Value that corresponds to given x. </returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.GammaCumulativeDistribution(System.Double,System.Double)">
            <summary>
            Returns cumulative gamma distribution. http://en.wikipedia.org/wiki/Gamma_distribution
            ( for x >= 0, a > 0 )
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <returns>Returns cumulative gamma distribution. (http://en.wikipedia.org/wiki/Gamma_distribution) ( for x >= 0, a > 0 )</returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.BetaCumulativeDistribution(System.Double,System.Double,System.Double)">
            <summary>
            Returns cumulative beta distribution. 
            ( for x >= 0, a > 0, b > 0 )
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns>Returns cumulative beta distribution. http://en.wikipedia.org/wiki/Beta_distribution) ( for x >= 0, a > 0, b > 0 )</returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.InverseBetaCumulativeDistribution(System.Double,System.Double,System.Double)">
            <summary>
            Returns inverse cumulative beta distribution. 
            ( for 1 >= p >= 0 , a > 0, b > 0 )
            </summary>
            <param name="a">Beta function parameter </param>
            <param name="b">Beta function parameter</param>
            <param name="p">Probability</param>
            <returns>Returns inverse cumulative beta distribution. http://en.wikipedia.org/wiki/Beta_distribution) ( for p in [0,1], a > 0, b > 0 )</returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.TCumulativeDistribution(System.Double,System.Double,System.Boolean)">
            <summary>
            Returns cumulative T distribution. 
            ( for degreeOfFreedom > 0 )
            </summary>
            <param name="tValue"></param>
            <param name="degreeOfFreedom"></param>
            <param name="oneTail"></param>
            <returns>Returns T cumulative distribution. http://en.wikipedia.org/wiki/T_distribution) ( for degreeOfFreedom > 0 )</returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.InverseTCumulativeDistribution(System.Double,System.Double,System.Boolean)">
            <summary>
            Inverse cumulative T distribution. 
            ( for degreeOfFreedom > 0 )
            </summary>
            <param name="p">Probability (must be in range [0, 1]. )</param>
            <param name="degreeOfFreedom"></param>
            <param name="oneTail"></param>
            <returns>Inverse T cumulative distribution. http://en.wikipedia.org/wiki/T_distribution) ( for degreeOfFreedom > 0 )</returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.FCumulativeDistribution(System.Double,System.Double,System.Double)">
            <summary>
            Returns cumulative F distribution. 
            ( for firstDegreeOfFreedom >= 1 and firstDegreeOfFreedom >= 1 )
            </summary>
            <param name="fValue"></param>
            <param name="firstDegreeOfFreedom"></param>
            <param name="secondDegreeOfFreedom"></param>
            <returns>Returns T cumulative distribution. http://en.wikipedia.org/wiki/F_distribution) ( for degreeOfFreedom > 0 )</returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.InverseFCumulativeDistribution(System.Double,System.Double,System.Double)">
            <summary>
            Inverse cumulative F distribution. 
            ( for firstDegreeOfFreedom >= 1 and firstDegreeOfFreedom >= 1 )
            </summary>
            <param name="p">Probability (must be in range [0, 1]. )</param>
            <param name="firstDegreeOfFreedom"></param>
            <param name="secondDegreeOfFreedom"></param>
            <returns>Inverse F cumulative distribution. http://en.wikipedia.org/wiki/F_distribution) ( for firstDegreeOfFreedom >= 1 and firstDegreeOfFreedom >= 1 )</returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.GammaCumulativeS(System.Double,System.Double)">
            <summary>
            Gammas the cumulative S.
            </summary>
            <param name="a">A.</param>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.GammaCumulativeCF(System.Double,System.Double)">
            <summary>
            Gammas the cumulative CF.
            </summary>
            <param name="a">A.</param>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.BtaCumulativeCF(System.Double,System.Double,System.Double)">
            <summary>
            Btas the cumulative CF.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.Statistics.UtilityFunctions.InverseBtaCumulativeBrent(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Inverses the bta cumulative brent.
            </summary>
            <param name="aa">The aa.</param>
            <param name="bb">The bb.</param>
            <param name="prblty">The prblty.</param>
            <param name="x1">The x1.</param>
            <param name="x2">The x2.</param>
            <param name="tol">The tol.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartBaseStyleIdentity">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseStyleIdentity.Dispose">
            <summary>
            Releases all resources used by the component.
            </summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseStyleIdentity.#ctor(Syncfusion.Chart.ChartBaseStylesMap)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartBaseStyleIdentity"/> class.
            </summary>
            <param name="styleInfoMap">The style info map.</param>
        </member>
        <member name="P:Syncfusion.Chart.ChartBaseStyleIdentity.BaseStylesMap">
            <summary>
            Gets the base styles map.
            </summary>
            <value>The base styles map.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseStyleIdentity.GetBaseStyles(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Returns an array with base styles for the specified style object.
            </summary>
            <param name="thisStyleInfo">The style object.</param>
            <returns>
            An array of style objects that are base styles for the current style object.
            </returns>
            <override/>
        </member>
        <member name="T:Syncfusion.Chart.ChartBaseStyleInfo">
            <summary>
            BaseStyles are styles that are used to uniformly affect an arbitrary set of styles that they are applied to.
            BaseStyles are applied to a style by associating them with a style using its BaseStyle property (<see cref="P:Syncfusion.Chart.ChartStyleInfo.BaseStyle"/>).
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseStyleInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartBaseStyleInfo"/> class.
            </summary>
            <param name="name" type="string">
                <para>
                The name of this base style.
                </para>
            </param>
        </member>
        <member name="P:Syncfusion.Chart.ChartBaseStyleInfo.System">
            <summary>
            Indicates whether this base style is a system registered base style. System registered base styles are
            preregistered by the charting style system and are needed for the proper functioning of Essential
            Chart.
            </summary>
            <value><c>true</c> if system; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartBaseStyleInfo.HasSystem">
            <summary>
            Gets a value indicating whether this instance has local value of System property.
            </summary>
            <value>
            	<c>true</c> if this instance has local value of System property; otherwise, <c>false</c>.
            </value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartBaseStyleInfo.Name">
            <summary>
            Gets or sets the name for this base style object.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartBaseStyleInfo.HasName">
            <summary>
            Gets a value indicating whether this instance has name.
            </summary>
            <value><c>true</c> if this instance has name; otherwise, <c>false</c>.</value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartBaseStyleInfo.BaseStylesMap">
            <summary>
            Gets  ChartBaseStylesMap object. Base styles are registered with and managed by a <see cref="T:Syncfusion.Chart.ChartBaseStylesMap"/> object at the chart level.
            </summary>
            <value>The base styles map.</value>
        </member>
        <member name="T:Syncfusion.Chart.ChartBorderStyle">
            <summary>
              Specifies the style of a specific point border in the <see cref="T:Syncfusion.Chart.ChartBorder"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBorderStyle.NotSet">
            <summary>
              No edge style is set.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBorderStyle.None">
            <summary>
               No border is drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBorderStyle.Dashed">
            <summary>
              Border style that consists of a dashed line.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBorderStyle.Dotted">
            <summary>
               Border style that consists of a dotted line.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBorderStyle.DashDot">
            <summary>
              Border style that consists of a series of a dash and a dot.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBorderStyle.DashDotDot">
            <summary>
               Border style that consists of a series of a dash and two dots.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBorderStyle.Solid">
            <summary>
               Border style that consists of a solid line.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBorderStyle.Standard">
            <summary>
               Use border as specified in the Chart.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartBorderWeight">
            <summary>
                Specifies the weight of a specific point border in the <see cref="T:Syncfusion.Chart.ChartBorder"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBorderWeight.Thin">
            <summary>
               A thin line with 1 pixel.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBorderWeight.Medium">
            <summary>
             A thin line with dots.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartBorderWeight.Thick">
            <summary>
              A thick line with 4 pixels.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartBorder">
            <summary>
            The ChartBorder class holds formatting information for the border associated with a point.
            <seealso cref="T:Syncfusion.Chart.ChartBordersInfo"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBorder.Clone">
            <summary>
            Creates an exact copy of this object.
            </summary>
            <returns>A <see cref="T:Syncfusion.Chart.ChartBorder"/> object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartBorder.#ctor">
            <overload>
            	Overloaded constructor.
            </overload>
            <summary>
            	Initializes a new instance of the ChartBorder class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBorder.#ctor(Syncfusion.Chart.ChartBorderStyle)">
            <summary>
            	Initializes a new instance of the ChartBorder class with the specified <see cref="T:Syncfusion.Chart.ChartBorderStyle"/>.
            </summary>
            <param name="style">
            	The line style that is to be applied to the border.
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartBorder.#ctor(Syncfusion.Chart.ChartBorderStyle,Syncfusion.Drawing.Color)">
            <summary>
            	Initializes a new instance of the ChartBorder class with the
            	specified <see cref="T:Syncfusion.Chart.ChartBorderStyle"/> and
            	<see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="style">
            	A <see cref="T:Syncfusion.Chart.ChartBorderStyle"/> that is to be applied to the border.
            </param>
            <param name="color">
            	A <see cref="T:System.Drawing.Color"/> specifying the color of the border.
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartBorder.#ctor(Syncfusion.Chart.ChartBorderStyle,Syncfusion.Drawing.Color,Syncfusion.Chart.ChartBorderWeight)">
            <summary>
            	Initializes a new instance of the ChartBorder class with the
            	specified <see cref="T:Syncfusion.Chart.ChartBorderStyle"/> and
            	<see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="style">
            	A <see cref="T:Syncfusion.Chart.ChartBorderStyle"/> that is to be applied to the border.
            </param>
            <param name="color">
            	A <see cref="T:System.Drawing.Color"/> specifying the color of the border.
            </param>
            <param name="weight">
            	A <see cref="T:Syncfusion.Chart.ChartBorderWeight"/> specifying the thickness of the border.
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartBorder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Chart.ChartBorder"/> from a serialization stream.
            </summary>
            <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialized stream specified by info. </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartBorder.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the ISerializable interface and returns the data needed to serialize the <see cref="T:Syncfusion.Chart.ChartBorder"/>.
            </summary>
            <param name="info">A SerializationInfo object containing the information required to serialize the object.</param>
            <param name="context">A StreamingContext object containing the source and destination of the serialized stream.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartBorder.MakeBlackAndWhite">
            <summary>
            Returns a copy of this border object replacing the color with <see cref="P:System.Drawing.Color.Black"/>.
            </summary>
            <returns>A black colored <see cref="T:Syncfusion.Chart.ChartBorder"/>.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartBorder.Dispose">
            <summary>
            Method to dispose ChartBorder object
             </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBorder.ToString">
            <summary>
            Returns a compact string representation of the ChartBorder.
            All information in ChartBorder will be encoded.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <overload>
            Overloaded. Overridden. Returns a compact string representation of the ChartBorder.
            All information in ChartBorder will be encoded.
            </overload>
        </member>
        <member name="M:Syncfusion.Chart.ChartBorder.ToString(System.String)">
            <summary>
            Returns a compact string representation of the ChartBorder.
            All information in ChartBorder will be encoded.
            </summary>
            <param name="format">Format in which string representation should be rendered. "compact" for compact text; default is full text version.</param>
            <returns>The String.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartBorder.Equals(System.Object)">
            <summary>
            	Overridden. Returns True if the ChartBorder object passed is equal.
            </summary>
            <param name="o">The object to compare to.</param>
            <returns>
            	True if both are equal; false otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartBorder.op_Equality(Syncfusion.Chart.ChartBorder,Syncfusion.Chart.ChartBorder)">
            <summary cref="M:Syncfusion.Chart.ChartBorder.Equals(System.Object)">
            	The basic == operator.
            </summary>
            <param name="lhs">The left-hand side of the operator.</param>
            <param name="rhs">The right-hand side of the operator.</param>
            <returns>
            	Boolean value.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartBorder.op_Inequality(Syncfusion.Chart.ChartBorder,Syncfusion.Chart.ChartBorder)">
            <summary cref="M:Syncfusion.Chart.ChartBorder.Equals(System.Object)">
            	The basic != operator.
            </summary>
            <param name="lhs">The left-hand side of the operator.</param>
            <param name="rhs">The right-hand side of the operator.</param>
            <returns>
            	Boolean value.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartBorder.Compare(Syncfusion.Chart.ChartBorder,Syncfusion.Chart.ChartBorder)">
            <summary cref="M:Syncfusion.Chart.ChartBorder.Equals(System.Object)">
            	The basic == operator.
            </summary>
            <param name="lhs">The left-hand side of the operator.</param>
            <param name="rhs">The right-hand side of the operator.</param>
            <returns>
            	Boolean value.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartBorder.GetHashCode">
            <summary>
            Overridden. Returns the hash code for the current ChartBorder instance.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartBorder.IsEmpty">
            <summary>
            gets whether this ChartBorder is uninitialized.
            </summary>
            <value><c>True</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartBorder.Style">
            <summary>
            Gets what type of border line style this border has. This value
            comes from the <see cref="T:Syncfusion.Chart.ChartBorderStyle"/> enumeration.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartBorder.Weight">
            <summary>
            Gets the weight of the border the chart.  This value
            comes from the <see cref="T:Syncfusion.Chart.ChartBorderWeight"/>  enumeration.
            </summary>
            <value>The weight.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartBorder.Color">
            <summary>
            Specifies the color of the chart border. This value
            comes from the <see cref="T:System.Drawing.Color"/>  enumeration.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartBorder.Width">
            <summary>
            Gets the width in pixels of the chart border.
            </summary>
            <value>The width.</value>
        </member>
        <member name="T:Syncfusion.Chart.ChartBordersInfoStore">
            <summary>
            Implements the data store for the <see cref="T:Syncfusion.Chart.ChartBordersInfo"/> object.
            </summary>
            <seealso cref="T:Syncfusion.Styles.StyleInfoStore"/>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartBordersInfoStore.OuterProperty">
            <summary>
            The Outer Property which is used to set outer border.
            </summary>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartBordersInfoStore.InnerProperty">
            <summary>
            The Inner Property which is used to set inner border.
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartBordersInfoStore.StaticDataStore">
            <summary>
            Static data must be declared static in derived classes (this avoids collisions
            when StyleInfoStore is used in the same project for different types of style
            classes).
            </summary>
            <value>The Static Data Store.</value>
            <override/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartBordersInfoStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartBordersInfoStore"/> class.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartBordersInfoStore.#cctor">
            <summary>
            Initializes the <see cref="T:Syncfusion.Chart.ChartBordersInfoStore"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBordersInfoStore.InitializeStaticVariables">
            <summary>
            Internal method to initialize static variables of ChartBordersInfoStore object after disposing it
            </summary>
            <returns>ChartBordersInfoStore</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartBordersInfoStore.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartBordersInfoStore"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartBordersInfoStore.Dispose">
            <summary>
            Method to dispose ChartBordersInfoStore object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBordersInfoStore.Clone">
            <summary>
            Creates an exact copy of the current object.
            </summary>
            <returns>
            A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> with same data as the current object.
            </returns>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Chart.ChartBordersInfo">
            <summary>
            Provides a <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> object for borders in a symbol. The inner / outer border of
            the symbol can be configured individually with a <see cref="T:Syncfusion.Chart.ChartBorder"/> value. Borders that
            have not been initialized will inherit default values from a base style.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBordersInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartBordersInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBordersInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.Chart.ChartBordersInfo"/>  instance and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Chart.ChartBordersInfo"/>.
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartBordersInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity,Syncfusion.Chart.ChartBordersInfoStore)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.Chart.ChartBordersInfo"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Chart.ChartBordersInfo"/>.
            <param name="store">A <see cref="T:Syncfusion.Chart.ChartBordersInfoStore"/> that holds data for this <see cref="T:Syncfusion.Chart.ChartBordersInfo"/>.
            All changes made in this style object will be saved in the <see cref="T:Syncfusion.Chart.ChartBordersInfoStore"/> object.</param>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartBordersInfo.Dispose">
            <summary>
            Method to dispose ChartBordersInfo object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBordersInfo.MakeCopy(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="P:Syncfusion.Chart.ChartBordersInfo.Default">
            <summary>
            Returns a default <see cref="T:Syncfusion.Chart.ChartBordersInfo"/> to be used with a default style.
            </summary>
            <remarks>
            The <see cref="P:Syncfusion.Chart.ChartStyleInfo.Default"/> of the <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> class
            will return the default border info that this method generates through it's
            overridden version of <see cref="M:Syncfusion.Chart.ChartBordersInfo.GetDefaultStyle"/>.
             </remarks>
        </member>
        <member name="M:Syncfusion.Chart.ChartBordersInfo.GetDefaultStyle">
            <summary>
            Overridden. Returns a ChartBordersInfo object with default values.
            </summary>
            <returns>A <see cref="T:Syncfusion.Chart.ChartBordersInfo"/> object with default values.</returns>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.ChartBordersInfo.All">
            <summary>
            Sets the inner and outer border with one command.
            </summary>
            <value>All.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartBordersInfo.ResetAll">
            <summary>
            Resets the inner and outer border with one command.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartBordersInfo.Inner">
            <summary>
            Gets or sets the inner border.
            </summary>
            <value>The inner.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartBordersInfo.ResetInner">
            <summary>
            Resets the inner border.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBordersInfo.ShouldSerializeInner">
            <summary>
            Should the serialize inner.
            </summary>
            <returns>Returns bool.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartBordersInfo.HasInner">
            <summary>
            Indicates whether the inner border has been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartBordersInfo.Outer">
            <summary>
            Gets or sets the outer border.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBordersInfo.ResetOuter">
            <summary>
            Resets the outer border.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartFontInfoStore">
            <summary>
            Implements the data store for the <see cref="T:Syncfusion.Chart.ChartFontInfo"/> object.
            </summary>
            <seealso cref="T:Syncfusion.Styles.StyleInfoStore"/>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartFontInfoStore.FacenameProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Chart.ChartFontInfo.Facename"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartFontInfoStore.SizeProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Chart.ChartFontInfo.Size"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartFontInfoStore.BoldProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Chart.ChartFontInfo.Bold"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartFontInfoStore.ItalicProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Chart.ChartFontInfo.Italic"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartFontInfoStore.UnderlineProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Chart.ChartFontInfo.Underline"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartFontInfoStore.StrikeoutProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Chart.ChartFontInfo.Strikeout"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartFontInfoStore.OrientationProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Chart.ChartFontInfo.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartFontInfoStore.UnitProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Chart.ChartFontInfo.Unit"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartFontInfoStore.FontFamilyTemplateProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Chart.ChartFontInfo.FontFamilyTemplate"/> property. 
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfoStore.StaticDataStore">
            <override/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfoStore.InitializeStaticVariables">
            <summary>
            Internal method to initialize static variables in ChartFontInfoStore object after disposing it
            </summary>
            <returns>ChartFontInfoStore</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfoStore.#ctor">
            <overload>
            Overloaded Contructor.
            </overload>
            <summary>
            Initializes an empty <see cref="T:Syncfusion.Chart.ChartFontInfoStore"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfoStore.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor. Initializes a new <see cref="T:Syncfusion.Chart.ChartFontInfoStore"/> from a serialization stream.
            </summary>
            <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialized stream specified by info. </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfoStore.Clone">
            <override/>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfoStore.Dispose">
            <summary>
            Method to dispose ChartFontInfoStore object
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartFontInfo">
             <summary>
             Provides a <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> object for font settings associated with a point.
             Each font property of the point can be configured individually. <para/>
             Font properties that have not been initialized will inherit default
             values from a base style.
             </summary>
             <example>
             The following code changes font information for a point:
             <code lang="C#">
            
                        this.chart.Series[0].Styles[0].Font.Facename = "Arial";
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.Dispose">
            <summary>
            Clears all resources used by the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.#ctor">
            <overload>
            Overloaded constructor.
            </overload>
            <summary>
            Initializes a <see cref="T:Syncfusion.Chart.ChartFontInfo"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.Chart.ChartFontInfo"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Chart.ChartFontInfo"/>.
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity,Syncfusion.Chart.ChartFontInfoStore)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.Chart.ChartFontInfo"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Chart.ChartFontInfo"/>.
            <param name="store">A <see cref="T:Syncfusion.Chart.ChartFontInfoStore"/> that holds data for this <see cref="T:Syncfusion.Chart.ChartFontInfo"/>.
            All changes made in this style object will be saved in the <see cref="T:Syncfusion.Chart.ChartFontInfoStore"/> object.</param>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.MakeCopy(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.Default">
            <summary>
            Returns a default <see cref="T:Syncfusion.Chart.ChartFontInfo"/> to be used with a default style.
            </summary>
            <remarks>
            The <see cref="P:Syncfusion.Chart.ChartStyleInfo.Default"/> of the <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> class
            will return the default border info that this method generates through its
            overridden version of <see cref="M:Syncfusion.Chart.ChartFontInfo.GetDefaultStyle"/>.
             </remarks>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.SizeInWorldUnit(Syncfusion.Drawing.Font)">
            <summary>
            Gets the em-size of the specified font object in world-units.
            </summary>
            <param name="font">The font object.</param>
            <returns>The size in world units.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.GdipFont">
            <summary>
            Creates or returns a cached GDI+ font generated from font information of
            this <see cref="T:Syncfusion.Chart.ChartFontInfo"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.OnStyleChanged(Syncfusion.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.GetDefaultStyle">
            <summary>
            Returns a default <see cref="T:Syncfusion.Chart.ChartFontInfo"/> to be used with a default style.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.FontStyle">
            <summary>
            Gets or sets the style information for the font.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.Facename">
            <summary>
            Gets or sets the face name of this <see cref="T:Syncfusion.Chart.ChartFontInfo"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ResetName">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartFontInfo.Facename"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ShouldSerializeName">
            <summary>
            Indicates whether the Facename property should be serialized
            </summary>
            <returns></returns>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.HasName">
            <summary>
            Indicates whether the <see cref="P:Syncfusion.Chart.ChartFontInfo.Facename"/> property has been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.Size">
            <summary>
            Gets or sets the size in pixels of this <see cref="T:Syncfusion.Chart.ChartFontInfo"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ResetSize">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartFontInfo.Size"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ShouldSerializeSize">
            <summary>
            Indicates whether the Size property should be serialized
            </summary>
            <returns></returns>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.HasSize">
            <summary>
            Indicates whether the <see cref="P:Syncfusion.Chart.ChartFontInfo.Size"/> property has been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.Orientation">
            <summary>
            Gets or sets the orientation of this <see cref="T:Syncfusion.Chart.ChartFontInfo"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ResetOrientation">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartFontInfo.Orientation"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ShouldSerializeOrientation">
            <summary>
            Indicates whether the Orientation property should be serialized
            </summary>
            <returns></returns>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.HasOrientation">
            <summary>
            Indicates whether the <see cref="P:Syncfusion.Chart.ChartFontInfo.Orientation"/> property has been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.Bold">
            <summary>
            Indicates whether this <see cref="T:Syncfusion.Chart.ChartFontInfo"/> object is bold.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ResetBold">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartFontInfo.Bold"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ShouldSerializeBold">
            <summary>
            Indicates whether the Bold property should be serialized
            </summary>
            <returns></returns>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.HasBold">
            <summary>
            Indicates whether the <see cref="P:Syncfusion.Chart.ChartFontInfo.Bold"/> property has been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.Italic">
            <summary>
            Indicates whether this <see cref="T:Syncfusion.Chart.ChartFontInfo"/> object is italic.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ResetItalic">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartFontInfo.Italic"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ShouldSerializeItalic">
            <summary>
            Indicates whether the Italic property should be serialized
            </summary>
            <returns></returns>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.HasItalic">
            <summary>
            Indicates whether the <see cref="P:Syncfusion.Chart.ChartFontInfo.Italic"/> property has been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.Underline">
            <summary>
            Indicates whether this <see cref="T:Syncfusion.Chart.ChartFontInfo"/> object is underlined.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ResetUnderline">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartFontInfo.Underline"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ShouldSerializeUnderline">
            <summary>
            Indicates whether the Underline property should be serialized
            </summary>
            <returns></returns>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.HasUnderline">
            <summary>
            Indicates whether the <see cref="P:Syncfusion.Chart.ChartFontInfo.Underline"/> property has been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.Strikeout">
            <summary>
            Indicates whether this <see cref="T:Syncfusion.Chart.ChartFontInfo"/> object
            should draw a horizontal line through the text.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ResetStrikeout">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartFontInfo.Strikeout"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ShouldSerializeStrikeout">
            <summary>
            Indicates whether the Strikeout property should be serialized
            </summary>
            <returns></returns>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.HasStrikeout">
            <summary>
            Indicates whether the <see cref="P:Syncfusion.Chart.ChartFontInfo.Strikeout"/> property has been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.Unit">
            <summary>
            Gets or sets the graphics unit for this <see cref="T:Syncfusion.Chart.ChartFontInfo"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ResetUnit">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartFontInfo.Unit"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ShouldSerializeUnit">
            <summary>
            Indicates whether the Unit property should be serialized
            </summary>
            <returns></returns>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.HasUnit">
            <summary>
            Indicates whether the <see cref="P:Syncfusion.Chart.ChartFontInfo.Unit"/> property has been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.FontFamilyTemplate">
            <summary>
            Gets or sets the font family of this <see cref="T:Syncfusion.Chart.ChartFontInfo"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ResetFontFamilyTemplate">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartFontInfo.FontFamilyTemplate"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartFontInfo.ShouldSerializeFontFamilyTemplate">
            <summary>
            Indicates whether the FontFamily property should be serialized
            </summary>
            <returns></returns>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartFontInfo.HasFontFamilyTemplate">
            <summary>
            Indicates whether the <see cref="P:Syncfusion.Chart.ChartFontInfo.FontFamilyTemplate"/> property has been initialized.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartLineInfoStore">
            <summary>
            Implements the data store for the <see cref="T:Syncfusion.Chart.ChartLineInfo"/> object.
            </summary>
            <seealso cref="T:Syncfusion.Styles.StyleInfoStore"/>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartLineInfoStore.sd">
            <summary>
            The Static Data class.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLineInfoStore.ColorProperty">
             <summary>
            Gets or sets the color of the line.
             </summary>
             <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartLineInfoStore.WidthProperty">
            <summary>
            Gets or sets the width in pixels of the line represented by this object. 
            </summary>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartLineInfoStore.AlignmentProperty">
            <summary>
            Gets or sets the pen alignment of the line represented by this object.
            </summary>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartLineInfoStore.DashStyleProperty">
            <summary>
            Gets or sets the style of the line represented by this object.  
            </summary>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartLineInfoStore.DashPatternProperty">
            <summary>
            Gets or sets the dash pattern of the line represented by this object. 
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartLineInfoStore.StaticDataStore">
            <summary>
            Static data must be declared static in derived classes (this avoids collisions
            when StyleInfoStore is used in the same project for different types of style
            classes).
            </summary>
            <value></value>
            <override/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfoStore.InitializeStaticData">
            <summary>
            Internam method to initialize static variables in ChartLineInfoStore object after disposing it
            </summary>
            <returns>ChartLineInfoStore</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfoStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartLineInfoStore"/> class.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfoStore.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Chart.ChartFontInfoStore"/> from a serialization stream.
            </summary>
            <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialized stream specified by info. </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfoStore.Dispose">
            <summary>
            Method to dispose ChartlineInfoStore object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfoStore.Clone">
            <summary>
            Creates an exact copy of the current object.
            </summary>
            <returns>
            A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> with same data as the current object.
            </returns>
            <override/>
        </member>
        <member name="T:Syncfusion.Chart.ChartLineInfo">
            <summary>
            Provides a <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> object for border line settings associated with a point.
            Properties that have not been initialized will inherit default
            values from a base style.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLineInfo.m_defaultLine">
            <summary>
            Store default <see cref="T:Syncfusion.Chart.ChartLineInfo"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLineInfo.m_pen">
            <summary>
            Store pen to draw.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLineInfo.m_updatePen">
            <summary>
            Store value indicates that need recreate pen.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartLineInfo.Default">
            <summary>
            Gets a default <see cref="T:Syncfusion.Chart.ChartLineInfo"/> to be used with a default style.
            </summary>
            <value>The default.</value>
            <remarks>
            The <see cref="P:Syncfusion.Chart.ChartStyleInfo.Default"/> of the <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> class
            will return the default line info that this method generates through its
            overridden version of <see cref="M:Syncfusion.Chart.ChartLineInfo.GetDefaultStyle"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Chart.ChartLineInfo.GdipPen">
            <summary>
            Gets pen associated with style.
            </summary>
            <value>The gdip pen.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLineInfo.Color">
            <summary>
            Gets or sets the color of the line. For line based charts it works only when 3D is enabled.
            </summary>
            <value>The color.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.ResetColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartLineInfo.Color"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.ShouldSerializeColor">
            <summary>
            Should the color of the serialize.
            </summary>
            <returns>Returns true whether it should serialize the element else false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartLineInfo.HasColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.Chart.ChartLineInfo.Color"/> property has been initialized.
            </summary>
            <value><c>True</c> if this instance has color; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLineInfo.Width">
            <summary>
            Gets or sets the width in pixels of the line represented by this object.
            </summary>
            <value>The width.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.ResetWidth">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartLineInfo.Width"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.ShouldSerializeWidth">
            <summary>
            Should the width of the serialize.
            </summary>
            <returns>Returns true whether if it should serialize the element else false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartLineInfo.HasWidth">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.Chart.ChartLineInfo.Width"/> property has been initialized.
            </summary>
            <value><c>True</c> if this instance has width; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLineInfo.Alignment">
            <summary>
            Gets or sets the pen alignment of the line represented by this object.
            </summary>
            <value>The alignment.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.ResetAlignment">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartLineInfo.Alignment"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.ShouldSerializeAlignment">
            <summary>
            Should the serialize alignment.
            </summary>
            <returns>Returns true whether if it should serialize the element else false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartLineInfo.HasAlignment">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.Chart.ChartLineInfo.Alignment"/> property has been initialized.
            </summary>
            <value>
               <c>True</c> if this instance has alignment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLineInfo.DashStyle">
            <summary>
            Gets or sets the style of the line represented by this object.
            <seealso cref="P:Syncfusion.Chart.ChartLineInfo.DashStyle"/>
            </summary>
            <value>The dash style.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.ResetDashStyle">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartLineInfo.DashStyle"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.ShouldSerializeDashStyle">
            <summary>
            Should the serialize dash style.
            </summary>
            <returns>Returns true whether if it should serialize the element else false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartLineInfo.HasDashStyle">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.Chart.ChartLineInfo.DashStyle"/> property has been initialized.
            </summary>
            <value>
               <c>True</c> if this instance has dash style; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartLineInfo.DashPattern">
            <summary>
            Gets or sets the dash pattern of the line represented by this object.
            </summary>
            <value>The dash pattern.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.ResetDashPattern">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartLineInfo.DashPattern"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.ShouldSerializeDashPattern">
            <summary>
            Should the serialize dash pattern.
            </summary>
            <returns>
            Returns true whether if it should serialize the element else false.
            </returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartLineInfo.HasDashPattern">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.Chart.ChartLineInfo.DashPattern"/> property has been initialized.
            </summary>
            <value>
               <c>True</c> if this instance has dash pattern; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.#cctor">
            <summary>
            Initializes the <see cref="T:Syncfusion.Chart.ChartLineInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.#ctor">
            <summary>
            Overloaded. Constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Chart.ChartLineInfo"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Chart.ChartLineInfo"/>.
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity,Syncfusion.Chart.ChartLineInfoStore)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Chart.ChartLineInfo"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Chart.ChartLineInfo"/>.
            <param name="store">A <see cref="T:Syncfusion.Chart.ChartLineInfoStore"/> that holds data for this <see cref="T:Syncfusion.Chart.ChartLineInfo"/>.
            All changes made in this style object will be saved in the <see cref="T:Syncfusion.Chart.ChartLineInfoStore"/> object.</param>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.OnStyleChanged(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Notifies the associated identity object that a specific property was changed.
            </summary>
            <param name="sip">Identifies the property to look for.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.GetDefaultStyle">
            <summary>
            Calculate default style.
            </summary>
            <returns>Default style.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.MakeCopy(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Makes an exact copy of the current object.
            </summary>
            <param name="newOwner">The new owner style object for the copied object.</param>
            <param name="sip">The identifier for this object.</param>
            <returns>
            A copy of the current object registered with the new owner style object.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.CreateDefault">
            <summary>
            Resets the changes made in the ChartLineInfo class.
            </summary>
            <returns>Returns default ChartLineInfo. </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.GetGdipPen">
            <summary>
            Calulates the pen. If <see cref="F:Syncfusion.Chart.ChartLineInfo.m_updatePen"/> is set to TRUE create new Pen otherwise return <see cref="F:Syncfusion.Chart.ChartLineInfo.m_pen"/>.
            </summary>
            <returns>Pen to draw.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartLineInfo.Dispose">
            <summary>
            Method to dispose ChartLineInfo object
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartRelatedPointSymbolInfo">
            <summary>
               For certain chart types such as Gantt charts, it is required to have relationships between points.
               These are called 'Related Points'. This class represents symbol information that links such related points.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointSymbolInfo.#ctor(Syncfusion.Chart.ChartSymbolShape,System.Int32,Syncfusion.Drawing.Color,Syncfusion.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartRelatedPointSymbolInfo"/> class.
            </summary>
            <param name="shape">The shape.</param>
            <param name="imageIndex">Index of the image.</param>
            <param name="color">The color.</param>
            <param name="size">The size.</param>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointSymbolInfo.Shape">
            <summary>
            Gets the shape of the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointSymbolInfo.ImageIndex">
            <summary>
            Gets the index value of the image that is to be used by the symbol.
            <seealso cref="P:Syncfusion.Chart.ChartStyleInfo.Images"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointSymbolInfo.Color">
            <summary>
            Gets the color of this symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointSymbolInfo.Size">
            <summary>
            Gets the size of this symbol.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartRelatedPointInfoStore">
            <summary>
            Implements the data store for the <see cref="T:Syncfusion.Chart.ChartRelatedPointInfo"/> object.
            </summary>
            <seealso cref="T:Syncfusion.Styles.StyleInfoStore"/>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartRelatedPointInfoStore.PointsProperty">
            <summary>
            Gets or sets an array of indices of related points.  
            </summary>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartRelatedPointInfoStore.ColorProperty">
             <summary>
            Color that is to be used for any visual representation.    
             </summary>
             <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartRelatedPointInfoStore.WidthProperty">
            <summary>
            Width that is to be used for any visual representation.  
            </summary>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartRelatedPointInfoStore.AlignmentProperty">
            <summary>
            Pen alignment that is to be used for any visual representation.  
            </summary>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartRelatedPointInfoStore.DashStyleProperty">
            <summary>
            Gets a value indicating whether the DashStyle property has been initialized.  
            </summary>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartRelatedPointInfoStore.DashPatternProperty">
            <summary>
            Gets a value indicating whether the DashPattern property has been initialized. 
            </summary>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartRelatedPointInfoStore.StartSymbolProperty">
             <summary>
            Start symbol that is to be used for any visual representation linking this related point with others.  
             </summary>
             <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartRelatedPointInfoStore.EndSymbolProperty">
            <summary>
            The end symbol that is to be used for any visual representation linking this related point with others.
            </summary>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartRelatedPointInfoStore.BorderProperty">
            <summary>
            Gets or sets the border that is to be used for any visual representation linking this related point with others.  
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfoStore.StaticDataStore">
            <summary>
            Static data must be declared static in derived classes (this avoids collisions
            when StyleInfoStore is used in the same project for different types of style
            classes).
            </summary>
            <value>The Static Data.</value>
            <override/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfoStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartRelatedPointInfoStore"/> class.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfoStore.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Chart.ChartFontInfoStore"/> from a serialization stream.
            </summary>
            <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialized stream specified by info. </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfoStore.Clone">
            <summary>
            Creates an exact copy of the current object.
            </summary>
            <returns>
            A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> with same data as the current object.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfoStore.#cctor">
            <summary>
            Initializes the <see cref="T:Syncfusion.Chart.ChartRelatedPointInfoStore"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartRelatedPointInfo">
            <summary>
               For certain chart types such as Gantt charts, it is required to have relationships between points.
               These are called 'Related Points'. This class represents such related points.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.Dispose">
            <summary>
            Clears all the resources used by the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartRelatedPointInfo"/> class.
            </summary>  
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Chart.ChartRelatedPointInfo"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Chart.ChartRelatedPointInfo"/>.
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity,Syncfusion.Chart.ChartRelatedPointInfoStore)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Chart.ChartRelatedPointInfo"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Chart.ChartRelatedPointInfo"/>.
            <param name="store">A <see cref="T:Syncfusion.Chart.ChartRelatedPointInfoStore"/> that holds data for this <see cref="T:Syncfusion.Chart.ChartRelatedPointInfo"/>.
            All changes made in this style object will be saved in the <see cref="T:Syncfusion.Chart.ChartRelatedPointInfo"/> object.</param>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.MakeCopy(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Makes an exact copy of the current object.
            </summary>
            <param name="newOwner">The new owner style object for the copied object.</param>
            <param name="sip">The identifier for this object.</param>
            <returns>
            A copy of the current object registered with the new owner style object.
            </returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.Default">
            <summary>
            Returns a default <see cref="T:Syncfusion.Chart.ChartRelatedPointInfo"/> that is to be used with a default style.
            </summary>
            <remarks>
            The <see cref="P:Syncfusion.Chart.ChartStyleInfo.Default"/> of the <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> class
            will return the default border info that this method generates through its
            overridden version of <see cref="M:Syncfusion.Chart.ChartRelatedPointInfo.GetDefaultStyle"/>.
             </remarks>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.GdipPen">
            <summary>
            Gets the GDI+ pen.
            </summary>
            <value>The GDI+ pen.</value>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ResetGdipFont">
            <summary>
            Resets the gdip font.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.GetGdipPen">
            <summary>
            Gets the gdip pen.
            </summary>
            <returns>Returns GdipPen object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.OnStyleChanged(Syncfusion.Styles.StyleInfoProperty)">
            <param name="sip"></param>
            <override/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.GetDefaultStyle">
            <summary>
            Override this method to return a default style object for your derived class.
            </summary>
            <returns>A default style object.</returns>
            <override/>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.Count">
            <summary>
            Gets the number of points.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.Points">
            <summary>
            Gets or sets an array of indices of related points.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ResetPoints">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.Points"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ShouldSerializePoints">
            <summary>
            Should the serialize points.
            </summary>
            <returns>True if the instance should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.HasPoints">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.Points"/> property has been initialized.
            </summary>
            <value>
            	<c>true</c> if this instance has points; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.Color">
            <summary>
            Gets or sets the color that is to be used for any visual representation.
            </summary>
            <value>The color.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ResetColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.Color"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ShouldSerializeColor">
            <summary>
            Should the color of the serialize.
            </summary>
            <returns>True if the instance should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.HasColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.Color"/> property has been initialized.
            </summary>
            <value><c>true</c> if this instance has color; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.Width">
            <summary>
            Gets or sets the width that is to be used for any visual representation.
            </summary>
            <value>The width.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ResetWidth">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.Width"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ShouldSerializeWidth">
            <summary>
            Should the width of the serialize.
            </summary>
            <returns>True if the instance should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.HasWidth">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.Width"/> property has been initialized.
            </summary>
            <value><c>true</c> if this instance has width; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.Alignment">
            <summary>
            Gets or sets the pen alignment that is to be used for any visual representation.
            </summary>
            <value>The alignment.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ResetAlignment">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.Alignment"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ShouldSerializeAlignment">
            <summary>
            Should the serialize alignment.
            </summary>
            <returns>True if the instance should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.HasAlignment">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.Alignment"/> property has been initialized.
            </summary>
            <value>
            	<c>true</c> if this instance has alignment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.DashStyle">
            <summary>
            Gets or sets the dash style that is to be used for any visual representation.
            </summary>
            <value>The dash style.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ResetDashStyle">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.DashStyle"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ShouldSerializeDashStyle">
            <summary>
            Should the serialize dash style.
            </summary>
            <returns>True if the instance should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.HasDashStyle">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.DashStyle"/> property has been initialized.
            </summary>
            <value>
            	<c>true</c> if this instance has dash style; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.DashPattern">
            <summary>
            Gets or sets the dash pattern that is to be used for any visual representation.
            </summary>
            <value>The dash pattern.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ResetDashPattern">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.DashPattern"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ShouldSerializeDashPattern">
            <summary>
            Should the serialize dash pattern.
            </summary>
            <returns>True if the instance should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.HasDashPattern">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.DashPattern"/> property has been initialized.
            </summary>
            <value>
            	<c>true</c> if this instance has dash pattern; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.StartSymbol">
            <summary>
            Gets or sets the start symbol that is to be used for any visual representation linking this related point with others.
            </summary>
            <value>The start symbol.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ResetStartSymbol">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.StartSymbol"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ShouldSerializeStartSymbol">
            <summary>
            Should the serialize start symbol.
            </summary>
            <returns>True if the instance should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.HasStartSymbol">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.StartSymbol"/> property has been initialized.
            </summary>
            <value>
            	<c>true</c> if this instance has start symbol; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.EndSymbol">
            <summary>
            Gets or sets the end symbol that is to be used for any visual representation linking this related point with others.
            </summary>
            <value>The end symbol.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ResetEndSymbol">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.EndSymbol"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ShouldSerializeEndSymbol">
            <summary>
            Should the serialize end symbol.
            </summary>
            <returns>True if the instance should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.HasEndSymbol">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.EndSymbol"/> property has been initialized.
            </summary>
            <value>
            	<c>true</c> if this instance has end symbol; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.Border">
            <summary>
            Gets or sets the border that is to be used for any visual representation linking this related point with others.
            </summary>
            <value>The border.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ResetBorder">
            <summary>
            Resets the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.Border"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointInfo.ShouldSerializeBorder">
            <summary>
            Should the serialize border.
            </summary>
            <returns>True if the instance should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointInfo.HasBorder">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.Chart.ChartRelatedPointInfo.Border"/> property has been initialized.
            </summary>
            <value>
            	<c>true</c> if this instance has border; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Chart.ChartRelatedPointLineInfo">
            <summary>
            This class contains border information that is to be used for any visual representation linking a related point with others.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointLineInfo.#ctor(Syncfusion.Drawing.Color,System.Single,Syncfusion.Drawing.PenAlignment,Syncfusion.Drawing.DashStyle,System.Single[])">
            <summary>
            Overloaded constructor.
            </summary>
            <param name="color" type="System.Drawing.Color">
                <para>
                Color of the border line.
                </para>
            </param>
            <param name="width" type="float">
                <para>
                Width of the line.
                </para>
            </param>
            <param name="alignment" type="System.Drawing.Drawing2D.PenAlignment">
                <para>
                Pen alignment to be used to render the line.
                </para>
            </param>
            <param name="dashStyle" type="System.Drawing.Drawing2D.DashStyle">
                <para>
                Dash style of the line.
                </para>
            </param>
            <param name="dashPattern" type="float[]">
                <para>
                Dash pattern of the line.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointLineInfo.#ctor(Syncfusion.Drawing.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartRelatedPointLineInfo"/> class.
            </summary>
            <param name="color">The color.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointLineInfo.#ctor(Syncfusion.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartRelatedPointLineInfo"/> class.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointLineInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartRelatedPointLineInfo"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointLineInfo.GdipPen">
            <summary>
            Gets the GDI+ pen.
            </summary>
            <value>The GDI+ pen.</value>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartRelatedPointLineInfo.GetGdipPen">
            <summary>
            Gets the GDI+ pen.
            </summary>
            <returns>Returns the GdipPen.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointLineInfo.Color">
            <summary>
            Gets the color of the line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointLineInfo.Width">
            <summary>
            Gets the width of the line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointLineInfo.Alignment">
            <summary>
            Gets the pen alignment of the line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointLineInfo.DashStyle">
            <summary>
            Gets the dash style of the line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartRelatedPointLineInfo.DashPattern">
            <summary>
            Gets the dash pattern of the line.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesComposedStylesModel">
            <summary>
            The ChartSeriesComposedStylesModel class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesComposedStylesModel.#ctor(Syncfusion.Chart.IChartSeriesStylesModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSeriesComposedStylesModel"/> class.
            </summary>
            <param name="chartSeries">The chart series.</param>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesComposedStylesModel.Style">
            <summary>
            Gets the style object that is common to the series (for which this model holds style information).
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesComposedStylesModel.Item(System.Int32)">
            <summary>
            The ChartStyleInfo indexer.
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesComposedStylesModel.GetOfflineStyle">
            <summary>
            Overloaded. Returns an 'offline' version of the series style. Offline styles do not propagate changes made, back to the data store.
            </summary>
            <returns>Returns ChartStyleInfo object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesComposedStylesModel.GetOfflineStyle(System.Int32)">
            <summary>
            Returns an 'offline' version of the point style. Offline styles do not propagate changes made, back to the data store.
            </summary>
            <param name="index">Index value of the style.</param>
            <returns>Returns ChartStyleInfo object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesComposedStylesModel.GetBaseStyles(Syncfusion.Styles.IStyleInfo,System.Int32)">
            <summary>
            Looks up base style information for any <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> object.
            <seealso cref="T:Syncfusion.Chart.ChartBaseStylesMap"/>
            </summary>
            <param name="chartStyleInfo">The style object for which base style information is to be retrieved.</param>
            <param name="index">The index value of the style.</param>
            <returns>Returns ChartStyleInfo array.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesComposedStylesModel.ChangeStyle(Syncfusion.Chart.ChartStyleInfo,System.Int32)">
            <summary>
            Changes the style stored at the specified index to be the same as the specified style. Affects the data store.
            </summary>
            <param name="style">Style object whose information is to be stored.</param>
            <param name="index">The index value of the style to be changed.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesComposedStylesModel.ChangeStyle(Syncfusion.Chart.ChartStyleInfo)">
            <summary>
            Changes the style.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesComposedStylesModel.ResetCache">
            <summary>
            Removes any information that is cached.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesComposedStylesModel.GetStyle(System.Int32,System.Boolean)">
            <summary>
            Gets the style.
            </summary>
            <param name="index">The index.</param>
            <param name="offLine">if set to <c>true</c> [off line].</param>
            <returns>Returns ChartStyleInfo object.</returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartStyleInfoIndexer">
            <summary>
            Indexer helper class to access individual point styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfoIndexer.Item(System.Int32)">
            <summary>
            Returns the ChartStyleInfo object at the specified index.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoIndexer.#ctor(Syncfusion.Chart.IChartSeriesStylesModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartStyleInfoIndexer"/> class.
            </summary>
            <param name="chartSeries">The chart series.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesStylesModel">
            <summary>
            The ChartSeriesStylesModel class.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartSeriesStylesModel.Changed">
            <summary>
            Occurs when model is changed
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesStylesModel.Style">
            <summary>
            Gets the series style information.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSeriesStylesModel.ComposedStyles">
            <summary>
            Gets the ComposedStyles. Completely composed styles can be accessed using the interface returned by this property.
            Composed styles have all information initialized from base styles and any other styles along their
            inheritance hierarchy.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesStylesModel.#ctor(Syncfusion.Chart.IChartSeriesStylesHost)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSeriesStylesModel"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesStylesModel.GetStyleAt(System.Int32)">
            <summary>
            Returns the style information at the specified index. This is the actual style information and not composed style information.
            </summary>
            <param name="index">The index value of the point for which style information is needed.</param>
            <returns>
            Style information at the specified index.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesStylesModel.ChangeStyleAt(Syncfusion.Chart.ChartStyleInfo,System.Int32)">
            <summary>
            Changes style information at the specified index.
            </summary>
            <param name="style">Style whose attributes are to be stored.</param>
            <param name="index">Index value where they need to be stored.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesStylesModel.ChangeStyle(Syncfusion.Chart.ChartStyleInfo)">
            <summary>
            Changes series style information.
            </summary>
            <param name="style">Style whose attributes are to be stored in the series style.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesStylesModel.GetBaseStyles(Syncfusion.Styles.IStyleInfo,System.Int32)">
            <summary>
            Accesses base style information for the specified style.
            </summary>
            <param name="styleInfo">Style for which base style information is needed.</param>
            <param name="index">Index value where the style is stored.</param>
            <returns>Returns ChartStyleInfo array.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSeriesStylesModel.RaiseStyleChanged(System.Int32)">
            <summary>
            Raises the style changed.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartStyleChangedEventHandler">
             <summary>
               Delegate that is to be used for events that broadcast changes to <see cref="T:Syncfusion.Chart.ChartStyleInfo"/>.
             </summary>
             <param name="sender" type="object">
                 <para>
            	     Sender.
                 </para>
             </param>
             <param name="args" type="Syncfusion.Windows.Forms.Chart.ChartStyleChangedEventArgs">
                 <para>
                  Argument.
                 </para>
             </param>
             <remarks>
            
             </remarks>
        </member>
        <member name="T:Syncfusion.Chart.ChartStyleChangedEventArgs">
            <summary>
            Argument that is to be used in the <see cref="T:Syncfusion.Chart.ChartStyleChangedEventHandler"/> delegate.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartStyleChangedEventArgs.Type">
            <summary>
            Specifies the types of changes.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartStyleChangedEventArgs.Type.Changed">
            <summary>
            Style has been changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartStyleChangedEventArgs.Type.Reset">
            <summary>
            Style has been reset to default.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartStyleChangedEventArgs.InvalidIndex">
            <summary>
            The Invalid Index.
            </summary>
            /// <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleChangedEventArgs.CreateResetEventArgs">
            <summary>
            Creates the Reset typeof arguments.
            </summary>
            <returns>Returns ChartStyleChangedEventArgs object.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleChangedEventArgs.#ctor(Syncfusion.Chart.ChartStyleChangedEventArgs.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartStyleChangedEventArgs"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="xIndex">Index of the x.</param>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleChangedEventArgs.EventType">
            <summary>
                Gets the type of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleChangedEventArgs.Index">
            <summary>
                Gets the index value of the changed style.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartStyleInfoBase">
            <summary>
            Abstract implementation of StyleInfoBase.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfoBase.CacheValues">
            <summary>
            Gets or sets a value indicating whether this instance should cache values
            for resolved base style properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfoBase.WeakReferenceChangedListeners">
            <summary>
                A list of listeners that will be referenced using a WeakReference. The listeners
                must implement the Syncfusion.Styles.IStyleChanged interface. When this style
                object Syncfusion.Styles.StyleInfoBase.OnStyleChanged(Syncfusion.Styles.StyleInfoProperty)
                method is called it will then loop through all objects in this list and call
                each objects Syncfusion.Styles.IStyleChanged.StyleChanged(Syncfusion.Styles.StyleChangedEventArgs)
                method.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoBase.#ctor(Syncfusion.Styles.StyleInfoIdentityBase,Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartStyleInfoBase"/> class.
            </summary>
            <param name="identity">The identity.</param>
            <param name="store">The store.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoBase.#ctor(Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartStyleInfoBase"/> class.
            </summary>
            <param name="store">The store.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartSubStyleInfoBase">
            <summary>
            Abstract implementation of StyleInfoSubObjectBase.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSubStyleInfoBase.CacheValues">
            <summary>
            Gets or sets a value indicating whether this instance should cache values
            for resolved base style properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSubStyleInfoBase.WeakReferenceChangedListeners">
            <summary>
                A list of listeners that will be referenced using a WeakReference. The listeners
                must implement the Syncfusion.Styles.IStyleChanged interface. When this style
                object Syncfusion.Styles.StyleInfoBase.OnStyleChanged(Syncfusion.Styles.StyleInfoProperty)
                method is called it will then loop through all objects in this list and call
                each objects Syncfusion.Styles.IStyleChanged.StyleChanged(Syncfusion.Styles.StyleChangedEventArgs)
                method.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSubStyleInfoBase.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity,Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartStyleInfoBase"/> class.
            </summary>
            <param name="identity">The identity.</param>
            <param name="store">The store.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSubStyleInfoBase.#ctor(Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartStyleInfoBase"/> class.
            </summary>
            <param name="store">The store.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartStyleInfo">
            <summary>
            This class contains appearance information for each ChartPoint <see cref="T:Syncfusion.Chart.ChartPoint"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.#cctor">
            <summary>
            Initializes the new instance of the <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.#ctor">
            <summary>
            Overloaded constructor. Initializes a new style object.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.#ctor(Syncfusion.Chart.ChartStyleInfo)">
            <summary>
            Initializes a new style object and copies all data from an existing style object.
            </summary>
            <param name="style">The style object that contains the original data.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.#ctor(Syncfusion.Chart.ChartStyleInfoStore)">
            <summary>
            Initializes a new style object and associates it with an existing <see cref="T:Syncfusion.Chart.ChartStyleInfoStore"/>.
            </summary>
            <param name="store">A <see cref="T:Syncfusion.Chart.ChartStyleInfoStore"/> that holds data for this <see cref="T:Syncfusion.Chart.ChartStyleInfo"/>.
            All changes made in this style object will be saved in the <see cref="T:Syncfusion.Chart.ChartStyleInfoStore"/> object.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.#ctor(Syncfusion.Styles.StyleInfoIdentityBase)">
            <summary>
            Initializes a new style object and associates it with an existing <see cref="T:Syncfusion.Chart.ChartStyleInfoIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Chart.ChartStyleInfoIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Chart.ChartStyleInfo"/>.
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.#ctor(Syncfusion.Styles.StyleInfoIdentityBase,Syncfusion.Chart.ChartStyleInfoStore)">
            <summary>
            Initializes a new style object and associates it with an existing <see cref="T:Syncfusion.Chart.ChartStyleInfoIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Chart.ChartStyleInfoIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Chart.ChartStyleInfo"/>.
            </param>
            <param name="store">A <see cref="T:Syncfusion.Chart.ChartStyleInfoStore"/> that holds data for this <see cref="T:Syncfusion.Chart.ChartStyleInfo"/>.
            All changes made in this style object will be saved in the <see cref="T:Syncfusion.Chart.ChartStyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.CopyFrom(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Copies properties from another style object. This method raises Changing and Changed 
            notifications if the other object differs. (ModifyStyle does not raise these events).
            </summary>
            <param name="iStyle">The style object to be applied on the current object.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.Dispose">
            <summary>
            Method to dispose ChartStyleInfo object
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.Store">
            <summary>
            Gets the <see cref="T:Syncfusion.Chart.ChartStyleInfoStore"/> object that holds all the data for this style object.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.CreateSubObjectIdentity(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Override this method to create a product-specific identity object for a sub object.
            </summary>
            <param name="sip"></param>
            <returns>
            An identity object for a subobject of this style.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.GetDefaultStyle">
            <summary>
            Override this method to return a default style object for your derived class.
            </summary>
            <returns>A default style object.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.WriteXmlSchema(System.Xml.XmlWriter)">
            <summary>
            Serializes this style to XML.
            </summary>
            <param name="xw"></param>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.Default">
            <summary>
            Returns a <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> with default settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.TextShape">
            <summary>
             Gets or sets custom shape in the background of the displaytext. 
             Before use this, enable "DrawTextShape" property of series style.
             </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.TextColor">
            <summary>
            Gets or sets the color of the text that is to be rendered for a <see cref="T:Syncfusion.Chart.ChartPoint"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetTextColor">
            <summary>
            Resets TextColor.
            </summary>     
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasTextColor">
            <summary>
            Gets a value indicating whether this instance has text color.
            </summary>
            <value>
            	<c>true</c> if this instance has text color; otherwise, <c>false</c>.
            </value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.BaseStyle">
            <summary>
            Gets or sets the base style with default settings that is to be used 
            for the appearance of the <see cref="T:Syncfusion.Chart.ChartPoint"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.AltTagFormat">
            <summary>
            Gets or sets the alt tag with default settings that is to be used. this is used in ASP.NET chart to define the format of "alt" tag value. 
            for the appearance of the <see cref="T:Syncfusion.Chart.ChartPoint"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetBaseStyle">
            <summary>
            Resets the base style.
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasBaseStyle">
            <summary>
            Gets a value indicating whether this instance has base style.
            </summary>
            <value>
            	<c>true</c> if this instance has base style; otherwise, <c>false</c>.
            </value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.GdipFont">
            <summary>
            Creates or returns a cached GDI+ font generated from font information of
            the <see cref="P:Syncfusion.Chart.ChartStyleInfo.Font"/> object.
            </summary>
            <value>The gdip font.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.Font">
            <summary>
            Gets /sets the font that is to be used for drawing text.
            </summary>
            <value>The font.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetFont">
            <summary>
            Resets font information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ShouldSerializeFont">
            <summary>
            Should the serialize font.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasFont">
            <summary>
            Gets a value indicating whether font information has been initialized for the current object.
            </summary>
            <value><c>true</c> if this instance has font; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.GdipPen">
            <summary>
            Creates or returns a cached GDI+ font generated from font information of
            the <see cref="P:Syncfusion.Chart.ChartStyleInfo.Font"/> object.
            </summary>
            <value>The gdip pen.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.Border">
            <summary>
            Gets or sets the information that is to be used for drawing lines.
            </summary>
            <value>The border.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetBorder">
            <summary>
            Resets line information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ShouldSerializeBorder">
            <summary>
            Should the serialize border.
            </summary>
            <returns> True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasBorder">
            <summary>
            Gets a value indicating whether line information has been initialized for the current object.
            </summary>
            <value>
            	<c>true</c> if this instance has border; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.Interior">
            <summary>
            Gets or sets a solid backcolor, gradient or pattern style with both back and forecolor for a <see cref="T:Syncfusion.Chart.ChartPoint"/>'s background.
            </summary>
            <value>The interior.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetInterior">
            <summary>
            Resets interior information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ShouldSerializeInterior">
            <summary>
            Should the serialize interior.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasInterior">
            <summary>
            Gets a value indicating whether interior information has been initialized for the current object.
            </summary>
            <value>
            	<c>true</c> if this instance has interior; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.CustomProperties">
            <summary>
            Returns a collection of custom property objects that have
            at least one initialized value. The primary purpose of this
            collection is to support design-time code serialization of
            custom properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.Text">
            <summary>
            Gets or sets the text that is to be associated with a <see cref="T:Syncfusion.Chart.ChartPoint"/>. This text will be rendered at a position near the point if
            <see cref="P:Syncfusion.Chart.ChartStyleInfo.DisplayText"/> is set to True.
            </summary>
            <value>The text.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetText">
            <summary>
            Resets text information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ShouldSerializeText">
            <summary>
            Should the serialize text.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasText">
            <summary>
            Gets a value indicating whether text information has been initialized for the current object.
            </summary>
            <value><c>true</c> if this instance has text; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.ToolTip">
            <summary>
            Gets or sets the ToolTip that is to be associated with the <see cref="T:Syncfusion.Chart.ChartPoint"/>.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetToolTip">
            <summary>
            Resets ToolTip information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ShouldSerializeToolTip">
            <summary>
            Should the serialize tool tip.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasToolTip">
            <summary>
            Gets a value indicating whether ToolTip information has been initialized for the current object.
            </summary>
            <value>
            	<c>true</c> if this instance has tool tip; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.ToolTipFormat">
            <summary>
            Gets or sets the formatting that is to be applied to values that are displayed as ToolTips.
            </summary>
            <value>The tool tip format.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetToolTipFormat">
            <summary>
            Resets TooltipFormat.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ShouldSerializeToolTipFormat">
            <summary>
            Should the serialize tool tip format.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasToolTipFormat">
            <summary>
            Gets a value indicating whether this instance has tool tip format.
            </summary>
            <value>
            	<c>true</c> if this instance has tool tip format; otherwise, <c>false</c>.
            </value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.Images">
            <summary>
            Gets or sets the imagelist that is to be associated with this <see cref="T:Syncfusion.Chart.ChartPoint"/>. This property is used in conjunction with the
            <see cref="P:Syncfusion.Chart.ChartStyleInfo.ImageIndex"/> property to display images associated with this point.
            </summary>
            <value>The images.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetImages">
            <summary>
            Resets ImageList information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ShouldSerializeImages">
            <summary>
            Should the serialize images.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasImages">
            <summary>
            Gets a value indicating whether ImageList information has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.ImageIndex">
            <summary>
            Gets or sets the image index from the associated <see cref="!:ImageList"/> property.
            </summary>
            <value>The index of the image.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetImageIndex">
            <summary>
            Resets image index information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ShouldSerializeImageIndex">
            <summary>
            Should the index of the serialize image.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasImageIndex">
            <summary>
            Gets a value indicating whether image index information has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.Symbol">
            <summary>
            Gets or sets the attributes of the symbol that is to be displayed at this point.
            </summary>
            <value>The symbol.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetSymbol">
            <summary>
            Resets symbol information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ShouldSerializeSymbol">
            <summary>
            Should the serialize symbol.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasSymbol">
            <summary>
            Gets a value indicating whether symbol information has been initialized for the current object.
            </summary>
            <value>
            	<c>true</c> if this instance has symbol; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.Callout">
            <summary>
            Gets or sets the attributes of the Callout that is to be displayed at this point.
            </summary>
            <value>The Callout.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetCallout">
            <summary>
            Resets Callout information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ShouldSerializeCallout">
            <summary>
            Should the serialize Callout.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasCallout">
            <summary>
            Gets a value indicating whether Callout information has been initialized for the current object.
            </summary>
            <value>
            	<c>true</c> if this instance has Callout; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo._System">
            <summary>
            Gets or sets a value indicating whether [_ system].
            </summary>
            <value><c>true</c> if [_ system]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetSystem">
            <summary>
            Resets System.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ShouldSerializeSystem">
            <summary>
            Should the serialize system.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo._HasSystem">
            <summary>
            Gets a value indicating whether [_ has system].
            </summary>
            <value><c>true</c> if [_ has system]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo._Name">
            <summary>
            Gets or sets the name of the _.
            </summary>
            <value>The name of the _.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetName">
            <summary>
            Resets Name.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.TextOrientation">
            <summary>
            Gets or sets the orientation of text that is to be displayed at this point.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetTextOrientation">
            <summary>
            Resets TextOrientation.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ShouldSerializeTextOrientation">
            <summary>
            Should the serialize text orientation.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasTextOrientation">
            <summary>
            Gets a value indicating whether this instance has text orientation.
            </summary>
            <value>
            	<c>true</c> if this instance has text orientation; otherwise, <c>false</c>.
            </value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.DisplayShadow">
            <summary>
            Gets a value indicating whether a shadow should be rendered when this point is displayed.
            </summary>
            <value><c>true</c> if [display shadow]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetDisplayShadow">
            <summary>
            Resets DisplayShadow.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ShouldSerializeDisplayShadow">
            <summary>
            Should the serialize display shadow.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasDisplayShadow">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.ShadowOffset">
            <summary>
            Gets or sets the offset that is to be used when a shadow is rendered for this <see cref="T:Syncfusion.Chart.ChartPoint"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetShadowOffset">
            <summary>
            Resets ShadowOffset.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasShadowOffset">
            <summary>
            Gets a value indicating whether this style contains the local value of ShadowOffset property.
            </summary>
            <value>
            	<c>true</c> if this instance contains the local value of ShadowOffset property; otherwise, <c>false</c>.
            </value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.ShadowInterior">
            <summary>
            Gets or sets the interior attributes of the shadow displayed underneath this point.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetShadowInterior">
            <summary>
            Resets ShadowInterior.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasShadowInterior">
            <summary>
            Gets a value indicating whether this style contains the local value of ShadowInterior property.
            </summary>
            <value>
            	<c>true</c> if this instance contains the local value of ShadowInterior property; otherwise, <c>false</c>.
            </value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HighlightOnMouseOver">
            <summary>
            Gets a value indicating whether this point should be highlighted when the mouse moves over it.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetHighlightOnMouseOver">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasHighlightOnMouseOver">
            <summary>
            Gets a value indicating whether this style contains the local value of HighlightOnMouseOver property.
            </summary>
            <value>
            	<c>true</c> if this instance contains the local value of HighlightOnMouseOver property; otherwise, <c>false</c>.
            </value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HighlightInterior">
            <summary>
            Gets or sets the attributes of the brush that are to be used to highlight this point when the mouse moves over it and <see cref="P:Syncfusion.Chart.ChartStyleInfo.HasHighlightOnMouseOver"/>
            is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.DimmedInterior">
            <summary>
            Gets or sets the attributes of the brush that are to be used to hide this point when the mouse moves over on other point.        
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetHihglightInterior">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetHighlightInterior">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetDimmedInterior">
            <summary>
            Resets DimmedInterior.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasHighlightInterior">
            <summary>
            Gets a value indicating whether this style contains the local value of HighlightInterior property.
            </summary>
            <value>
            	<c>true</c> if this instance contains the local value of HighlightInterior property; otherwise, <c>false</c>.
            </value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasDimmedInterior">
            <summary>
            Gets a value indicating whether this style contains the local value of DimmedInterior property.
            </summary>
            <value>
            	<c>true</c> if this instance contains the local value of DimmedInterior property; otherwise, <c>false</c>.
            </value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HitTestRadius">
            <summary>
            Controls the circle around this point that would be considered as being within the bounds of this
            point for hit-testing purposes.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetHitTestRadius">
            <summary>
            Resets HitTestRadius.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasHitTestRadius">
            <summary>
            Gets a value indicating whether this style contains the local value of HitTestRadius property.
            </summary>
            <value>
            	<c>true</c> if this instance contains the local value of HitTestRadius property; otherwise, <c>false</c>.
            </value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.Label">
            <summary>
            Gets or sets the Label value.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetLabel">
            <summary>
            Resets Label.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasLabel">
            <summary>
            Gets a value indicating whether this style contains the local value of Label property.
            </summary>
            <value>
            	<c>true</c> if this instance contains the local value of Label property; otherwise, <c>false</c>.
            </value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.TextFormat">
            <summary>
            Gets or sets the format that is to be applied to values that are displayed as text.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetTextFormat">
            <summary>
            Resets TextFormat.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasTextFormat">
            <summary>
            Gets a value indicating whether this style contains the local value of TextFormat property.
            </summary>
            <value>
            	<c>true</c> if this instance contains the local value of TextFormat property; otherwise, <c>false</c>.
            </value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.Format">
            <summary>
            Gets or sets the stringformat.
            </summary>
            <value>The format.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetFormat">
            <summary>
            Resets the Format.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.DisplayText">
            <summary>
            Gets or Sets whether text should be displayed at this point.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.DrawTextShape">
            <summary>
            Gets or sets whether text should be draw with shape in the background at this point.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetDisplayText">
            <summary>
            Resets DisplayText.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasDisplayText">
            <summary>
            Gets a value indicating whether this style contains the local value of DisplayText property.
            </summary>
            <value>
            	<c>true</c> if this instance contains the local value of DisplayText property; otherwise, <c>false</c>.
            </value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.PointWidth">
            <summary>
            Gets or sets the width of this point relative to the total width available. It is specially useful with Gantt charts to render
            series that overlap.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetPointWidth">
            <summary>
            Resets PointWidth.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasPointWidth">
            <summary>
            Gets a value indicating whether this style contains the local value of PointWidth property.
            </summary>
            <value>
            	<c>true</c> if this instance contains the local value of PointWidth property; otherwise, <c>false</c>.
            </value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.TextOffset">
            <summary>
            Gets or sets the offset of the text from the position of the <see cref="T:Syncfusion.Chart.ChartPoint"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetTextOffset">
            <summary>
            Reset TextOffset.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasTextOffset">
            <summary>
            Gets a value indicating whether this style contains the local value of TextOffset property.
            </summary>
            <value>
            	<c>true</c> if this instance contains the local value of TextOffset property; otherwise, <c>false</c>.
            </value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.RelatedPoints">
            <summary>
            Gets or sets the offset of the text from the position of the <see cref="T:Syncfusion.Chart.ChartPoint"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetRelatedPoints">
            <summary>
            Resets RelatedPoints.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasRelatedPoints">
            <summary>
            Gets a value indicating whether this instance has related points.
            </summary>
            <value>
            	<c>true</c> if this instance has related points; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.Url">
            <summary>
            Gets or sets the Url that is to be associated with a <see cref="T:Syncfusion.Chart.ChartPoint"/>. This Url will be applied to the point if
            EnableUrl and CalcRegion property is set to True.This property is applicable only for ChartWeb.
            </summary>
            <value>The Url.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ResetUrl">
            <summary>
            Resets Url information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfo.ShouldSerializeUrl">
            <summary>
            Should the serialize Url.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfo.HasUrl">
            <summary>
            Gets a value indicating whether Url information has been initialized for the current object.
            </summary>
            <value><c>true</c> if this instance has Url; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Chart.ChartStyleInfoCustomProperties">
            <summary>
            This class holds arbitrary style information.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartStyleInfoCustomProperties.style">
            <summary>
            The <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> object that holds and
            gets the data for this custom property object.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoCustomProperties.#ctor(Syncfusion.Chart.ChartStyleInfo)">
            <summary>
            Overloaded. Initializes the <see cref="T:Syncfusion.Chart.ChartStyleInfoCustomPropertiesCollection"/> object
            with a <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> that the properties of this
            class will belong to.
            </summary>
            <param name="style">The <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> object that holds and
            gets the data for this custom property object.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoCustomProperties.#ctor">
            <summary>
            Initializes the <see cref="T:Syncfusion.Chart.ChartStyleInfoCustomPropertiesCollection"/> object
            with an empty <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> object. When you later
            set the <see cref="P:Syncfusion.Chart.ChartStyleInfoCustomProperties.StyleInfo"/> property, the changes in this object
            will be copied over to the new <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> object.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfoCustomProperties.StyleInfo">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> that holds and
            gets the data for this custom property object. When you
            set the <see cref="P:Syncfusion.Chart.ChartStyleInfoCustomProperties.StyleInfo"/> property all prior changes in this object
            will be copied over to the new <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoCustomProperties._CreateStyleInfoProperty(System.Type,Syncfusion.Styles.StaticData,System.Type,System.String)">
            <summary>
            _s the create style info property.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="sd">The sd.</param>
            <param name="type">The type.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>Returns StyleInfoProperty object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoCustomProperties.CreateStyleInfoProperty(System.Type,System.Type,System.String)">
            <overload>
            Overloaded. Registers a new custom property.
            </overload>>
            <summary>
            Registers a new custom property.
            </summary>
            <param name="componentType">The type of your derived custom property class.</param>
            <param name="type">The type of the property.</param>
            <param name="propertyName">The name of the property. This must match a property member in your class.</param>
            <returns>A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> object that you should use for getting and setting
            values.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoCustomProperties.CreateStyleInfoProperty(System.Type,System.String)">
            <summary>
            Registers a new custom property.
            </summary>
            <param name="componentType">The type of your derived custom property class.</param>
            <param name="propertyName">The name of the property. This must match a property member in your class.</param>
            <returns>A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> object that you should use for getting and setting
            values.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Chart.ChartStyleInfoCustomPropertiesCollection">
            <summary>
            Implements a collection of custom property objects that have
            at least one initialized value. The primary purpose of this
            collection is to support design-time code serialization of
            custom properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoCustomPropertiesCollection.#ctor(Syncfusion.Styles.StyleInfoBase)">
            <summary>
            Initializes a <see cref="T:Syncfusion.Chart.ChartStyleInfoCustomPropertiesCollection"/> with a reference
            to the parent style object.
            </summary>
            <param name="styleInfo"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoCustomPropertiesCollection.Add(Syncfusion.Chart.ChartStyleInfoCustomProperties)">
            <summary>
            Copies the initialized properties of the specified custom property
            to the parent style object and attaches the custom property object
            with the parent style object.
            </summary>
            <param name="value">A ChartStyleInfoCustomProperties with
            custom properties.</param>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfoCustomPropertiesCollection.Count">
            <summary>
            Gets the number of objects in this collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoCustomPropertiesCollection.CopyTo(Syncfusion.Chart.ChartStyleInfoCustomProperties[],System.Int32)">
            <summary>
              <para>Copies the <see cref="T:Syncfusion.Chart.ChartStyleInfoCustomPropertiesCollection" /> elements to a one-dimensional <see cref="T:System.Array" /> at the specified index.</para>
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> which is the destination of the objects from the instance. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoCustomPropertiesCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfoCustomPropertiesCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoCustomPropertiesCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartStyleInfoSubObject">
            <summary>
            <see cref="T:Syncfusion.Chart.ChartStyleInfoSubObject"/> is an abstract base class for classes
            to be used as sub-objects in a <see cref="T:Syncfusion.Chart.ChartStyleInfo"/>.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Chart.ChartStyleInfoSubObject"/> is derived from <see cref="T:Syncfusion.Styles.StyleInfoBase"/>
            and thus provides the same easy way to provide properties that can inherit values
            from base styles at run-time.<para/>
            The difference is that <see cref="T:Syncfusion.Chart.ChartStyleInfoSubObject"/> supports this inheritance
            mechanism as a sub-object from a <see cref="T:Syncfusion.Chart.ChartStyleInfo"/>. A sub-object needs to
            have knowledge about its parent object and be able to walk the base styles from the
            parent object.<para/>
            Examples for implementation of <see cref="T:Syncfusion.Chart.ChartStyleInfoSubObject"/> is the font
            class in Essential Chart.<para/>
            Programmers can derive their own style classes from <see cref="T:Syncfusion.Chart.ChartStyleInfoSubObject"/>
            and add type-safe (and Intelli-sense)
            supported custom properties to the style class.
            <para/>
            See the overview of <see cref="T:Syncfusion.Styles.StyleInfoBase"/> for further discussion about style objects.
            </remarks>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoSubObject.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity,Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Chart.ChartStyleInfoSubObject"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.
            <param name="store">A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> that holds data for this object.</param>
            All changes made in this style object will be saved in the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoSubObject.#ctor(Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Chart.ChartStyleInfoSubObject"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            </summary>
            <param name="store">A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> that holds data for this object.
            All changes made in this style object will be saved in the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoSubObject.GetChartStyleInfo">
            <summary>
            Returns the <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> that this sub-object belongs to.
            </summary>
            <returns>The parent style object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoIdentity.#ctor(Syncfusion.Chart.ChartSeriesComposedStylesModel,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartStyleInfoIdentity"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="index">The index.</param>
            <param name="offLine">if set to <c>true</c> style is in offline.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoIdentity.GetBaseStyles(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Returns an array with base styles for the specified style object.
            </summary>
            <param name="thisStyleInfo">The style object.</param>
            <returns>
            An array of style objects that are base styles for the current style object.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoIdentity.OnStyleChanged(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Occurs when a property in the <see cref="T:Syncfusion.Styles.StyleInfoBase"/> has changed.
            </summary>
            <param name="style">The <see cref="T:Syncfusion.Styles.StyleInfoBase"/> instance that has changed.</param>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartStyleInfoStore">
            <summary>
            Implements the data store for the <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> object.
            </summary>
            <seealso cref="T:Syncfusion.Styles.StyleInfoStore"/>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfoStore.StaticData">
            <summary>
            Gets the static data.
            </summary>
            <value>The static data.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartStyleInfoStore.StaticDataStore">
            <summary>
            Static data must be declared static in derived classes (this avoids collisions
            when StyleInfoStore is used in the same project for different types of style
            classes).
            </summary>
            <value></value>
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoStore.#cctor">
            <summary>
            Initializes the <see cref="T:Syncfusion.Chart.ChartStyleInfoStore"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartStyleInfoStore"/> class.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoStore.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartStyleInfoStore"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoStore.InitializeStaticVariables">
            <summary>
            Internal method to initialize static variables of the object after disposing it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoStore.Dispose">
            <summary>
            Method to dispose ChartStyleInfoStore object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoStore.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns clone object of StyleInfoStore.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartStyleInfoStore.GetSchema">
            <summary>
            Returns the <see cref="T:System.Xml.Schema.XmlSchema"/> specifies the correct store.
            </summary>
            <returns>Returns new instance of XmlSchema object.</returns>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Chart.ChartBaseStylesMap">
            <summary>
            This class acts as a repository for common styles (base styles). Such styles are registered and held in this repository.
            This enables them to be referenced by their registered names. When changes are made to registered base styles, they are
            propagated through the system.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartBaseStylesMap.Item(System.String)">
            <summary>
            Returns the ChartBaseStyleInfo object registered with the specified name.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseStylesMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartBaseStylesMap"/> class.
            </summary>        
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseStylesMap.Register(Syncfusion.Chart.ChartBaseStyleInfo)">
            <summary>
                Registers the specified base style with the styles map.
            </summary>
            <param name="style" type="Syncfusion.Windows.Forms.Chart.ChartBaseStyleInfo">
                <para>
                The style that is to be registered. The <see cref="P:Syncfusion.Chart.ChartBaseStyleInfo.Name"/> property will be used as the registration name.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseStylesMap.Lookup(System.String)">
            <summary>
                Look ups and returns the base style with the specified name.
            </summary>
            <param name="name" type="string">
                <para>
                Name to look for.
                </para>
            </param>
            <returns>
                A base style if look up is successful; NULL otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseStylesMap.Remove(System.String)">
            <summary>
               Removes the base style registered under the specified name from this repository.
            </summary>
            <param name="name" type="string">
                <para>
                 Name of base style to remove.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseStylesMap.Clear">
            <summary>
             Remove references to all registered styles.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseStylesMap.GetBaseStyles(Syncfusion.Chart.ChartStyleInfo)">
            <summary>
            Gets the base styles.
            </summary>
            <param name="styleInfo">The style info.</param>
            <returns>Returns ChartStyleInfo array.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseStylesMap.GetSubBaseStyles(Syncfusion.Chart.ChartStyleInfo,Syncfusion.Chart.ChartStyleInfo)">
            <summary>
            Gets the sub base styles.
            </summary>
            <param name="styleInfo">The style info.</param>
            <param name="baseStyleInfo">The base style info.</param>
            <returns>Returns ChartStyleInfo array.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartBaseStylesMap.GetSubBaseStyles(Syncfusion.Chart.ChartStyleInfo,Syncfusion.Chart.ChartStyleInfo[])">
            <summary>
            Gets the sub base styles.
            </summary>
            <param name="styleInfo">The style info.</param>
            <param name="styles">The styles.</param>
            <returns>Returns ChartStyleInfo array.</returns>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.None">
            <summary>
            No symbol is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.Arrow">
            <summary>
            Arrow is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.InvertedArrow">
            <summary>
            Inverted Arrow is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.Circle">
            <summary>
            Circle is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.Plus">
            <summary>
            Cross is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.HorizLine">
            <summary>
            Horizontal Line is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.DowJonesLine">
            <summary>
            Dow Jones Line is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.VertLine">
            <summary>
            Vertical Line is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.Diamond">
            <summary>
            Diamond is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.Square">
            <summary>
            Square is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.Triangle">
            <summary>
            Triangle is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.InvertedTriangle">
            <summary>
            Inverted triangle is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.Cross">
            <summary>
            Cross is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.ExcelStar">
            <summary>
            Excel Star is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.Hexagon">
            <summary>
            Hexagon is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.Pentagon">
            <summary>
            Pentagon is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.Star">
            <summary>
            Star is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolShape.Image">
            <summary>
            Image specified in ImageIndex is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartCustomShape.Circle">
            <summary>
            Circle is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartCustomShape.Square">
            <summary>
            Square is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartCustomShape.Hexagon">
            <summary>
            Hexagon is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartCustomShape.Pentagon">
            <summary>
            Pentagon is displayed.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSymbolInfoStore">
            <summary>
            This class implements the data store for the <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/> object.
            </summary>
            <seealso cref="T:Syncfusion.Styles.StyleInfoStore"/>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolInfoStore.ShapeProperty">
            <internalonly/>
            <summary>
            Gets or sets the style of the symbol that is to be displayed.  
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolInfoStore.ImageIndexProperty">
            <internalonly/>
            <summary>
            Gets or sets the image index that is to be used to access the image from the associated ChartStyleInfo object's ImageList.  
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolInfoStore.ColorProperty">
            <internalonly/>
            <summary>
            Gets or sets the color that is to be used with the symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolInfoStore.HighlightColorProperty">
            <internalonly/>
            <summary>
            Gets a value indicating whether this instance has highlight color.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolInfoStore.DimmedColorProperty">
            <internalonly/>
            <summary>
            Gets or sets the color of the dimmed symbol. 
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolInfoStore.SizeProperty">
            <internalonly/>
            <summary>
            Gets or sets the size of the symbol. 
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolInfoStore.OffsetProperty">
            <internalonly/>
            <summary>
            Gets or sets the offset of the symbol. 
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolInfoStore.MarkerProperty">
            <summary>
            Gets or sets the marker of the symbol. 
            </summary>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartSymbolInfoStore.BorderProperty">
            <internalonly/>
            <summary>
            Gets or sets the information that is to be used for drawing border.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfoStore.StaticDataStore">
            <summary>
            Static data must be declared static in derived classes (this avoids collisions
            when StyleInfoStore is used in the same project for different types of style
            classes).
            </summary>
            <value></value>
            <override/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfoStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSymbolInfoStore"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfoStore.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSymbolInfoStore"/> class from a serialization stream.
            </summary>
            <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialized stream specified by info.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfoStore.InitializeStaticData">
            <summary>
            Internal method to initialize static variables of ChartSymbolInfoStore object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfoStore.Dispose">
            <summary>
            Method to dispose ChartSymbolInfoStore object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfoStore.Clone">
            <summary>
            Creates an exact copy of the current object.
            Base class implementation of this method calls Activator.CreateInstance to achieve the same result.
            I assume calling new directly is more efficient. Otherwise this override is obsolete.
            </summary>
            <returns>
            A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> with same data as the current object.
            </returns>
            <override/>
        </member>
        <member name="T:Syncfusion.Chart.ChartCalloutInfoStore">
            <summary>
            This class implements the data store for the <see cref="T:Syncfusion.Chart.ChartCalloutInfoStore"/> object.
            </summary>
            <seealso cref="T:Syncfusion.Styles.StyleInfoStore"/>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartCalloutInfoStore.EnableProperty">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartCalloutInfoStore.TextProperty">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartCalloutInfoStore.TextOffsetProperty">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartCalloutInfoStore.OffsetXProperty">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartCalloutInfoStore.OffsetYProperty">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartCalloutInfoStore.FontProperty">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartCalloutInfoStore.TextFormatProperty">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartCalloutInfoStore.PositionProperty">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartCalloutInfoStore.ColorProperty">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartCalloutInfoStore.TextColorProperty">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartCalloutInfoStore.BorderProperty">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfoStore.StaticDataStore">
            <summary>
            Static data must be declared static in derived classes (this avoids collisions
            when StyleInfoStore is used in the same project for different types of style
            classes).
            </summary>
            <value></value>
            <override/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfoStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartCalloutInfoStore"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfoStore.InitializeStaticData">
            <summary>
            Internal method to initialize static variables of ChartCalloutInfoStore object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfoStore.Dispose">
            <summary>
            Method to dispose ChartCalloutInfoStore object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfoStore.Clone">
            <summary>
            Creates an exact copy of the current object.
            Base class implementation of this method calls Activator.CreateInstance to achieve the same result.
            I assume calling new directly is more efficient. Otherwise this override is obsolete.
            </summary>
            <returns>
            A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> with same data as the current object.
            </returns>
            <override/>
        </member>
        <member name="F:Syncfusion.Chart.ChartCustomShapeInfoStore.ColorProperty">
            <internalonly/>
            <summary>
            Gets or sets border to the custom shape. 
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartCustomShapeInfoStore.ShapeTypeProperty">
            <internalonly/>
            <summary>
            Gets or sets the type of custom shape to be used.  
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartCustomShapeInfoStore.BorderProperty">
            <internalonly/>
            <summary>
            Gets or sets border to the custom shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartCustomShapeInfoStore.BorderWidthProperty">
            <internalonly/>
            <summary>
            Gets or sets border width to the custom shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartCustomShapeInfoStore.BorderColorProperty">
            <internalonly/>
            <summary>
            Gets or sets border color to the custom shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomShapeInfoStore.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Syncfusion.Chart.ChartCustomShapeInfoStore"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomShapeInfoStore.InitializeStaticVariables">
            <summary>
            Internal method to initialize static variables of this object after disposing it
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomShapeInfoStore.StaticDataStore">
            <summary>
            Static data must be declared static in derived classes (this avoids collisions
            when StyleInfoStore is used in the same project for different types of style
            classes).
            </summary>
            <value></value>
            <override/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomShapeInfoStore.Dispose">
            <summary>
            Method to dispose ChartCustomShapeInfoStore object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomShapeInfo.#cctor">
            <summary>
            Initializes the new instance of the <see cref="T:Syncfusion.Chart.ChartCustomShapeInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomShapeInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomShapeInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/>.
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomShapeInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity,Syncfusion.Chart.ChartCustomShapeInfoStore)">
            <summary>
            Initializes a new  instance of <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/>.
            <param name="store">A <see cref="T:Syncfusion.Chart.ChartSymbolInfoStore"/> that holds data for this <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/>.
            All changes made in this style object will be saved in the <see cref="T:Syncfusion.Chart.ChartSymbolInfoStore"/> object.</param>
            </param>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomShapeInfo.Default">
            <summary>
            Gets a default <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/> that is to be used with a default custom shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomShapeInfo.Color">
            <summary>
            Gets or sets the color that is to be used with the symbol.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomShapeInfo.Type">
            <summary>
            Gets or sets the style of the shape that is to be displayed.
            Default shape is square. 
            It will support the limitted shape(Square, Circle, Hexagon, Pentagon) draw around the custom point
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomShapeInfo.Border">
            <summary>
             Gets or sets border to the custom shape.
             </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomShapeInfo.BorderWidth">
            <summary>
             Gets or sets border to the custom shape.
             </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomShapeInfo.BorderColor">
            <summary>
             Gets or sets border to the custom shape.
             </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomShapeInfo.Dispose">
            <summary>
            Method to dispose ChartCustomShapeInfo object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomShapeInfo.GetDefaultStyle">
            <summary>
            Returns <see cref="P:Syncfusion.Chart.ChartCustomShapeInfo.Default"/>.
            </summary>
            <returns>A <see cref="T:Syncfusion.Chart.ChartCustomShapeInfo"/> object with default values.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Chart.ChartSymbolInfo">
            <summary>
            This class provides a <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> object for symbols associated with a ChartPoint.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.#cctor">
            <summary>
            Initializes the new instance of the <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/>.
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity,Syncfusion.Chart.ChartSymbolInfoStore)">
            <summary>
            Initializes a new  instance of <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/>.
            <param name="store">A <see cref="T:Syncfusion.Chart.ChartSymbolInfoStore"/> that holds data for this <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/>.
            All changes made in this style object will be saved in the <see cref="T:Syncfusion.Chart.ChartSymbolInfoStore"/> object.</param>
            </param>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.Default">
            <summary>
            Gets a default <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/> that is to be used with a default style.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.Shape">
            <summary>
            Gets or sets the style of the symbol that is to be displayed.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.ResetShape">
            <summary>
            Resets the symbol style.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.ShouldSerializeShape">
            <summary>
            Should the serialize shape.
            </summary>
            <returns>True if the element should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.HasShape">
            <summary>
            Gets a value indicating whether the style has been initialized.
            </summary>
            <value><c>true</c> if this instance has shape; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.ImageIndex">
            <summary>
            Gets or sets the image index that is to be used to access the image from the associated <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> object's ImageList.
            </summary>
            <value>The index of the image.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.ResetImageIndex">
            <summary>
            Resets the image index.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.ShouldSerializeImageIndex">
            <summary>
            Should the index of the serialize image.
            </summary>
            <returns>True if the element should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.HasImageIndex">
            <summary>
            Gets a value indicating whether the ImageIndex has been initialized.
            </summary>
            <value>
            	<c>true</c> if this instance has image index; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.Color">
            <summary>
            Gets or sets the color that is to be used with the symbol.
            </summary>
            <value>The color.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.ResetColor">
            <summary>
            Resets the symbol's color.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.ShouldSerializeColor">
            <summary>
            Should the color of the serialize.
            </summary>
            <returns>True if the element should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.HasColor">
            <summary>
            Gets a value indicating whether the symbol's color has been initialized.
            </summary>
            <value><c>true</c> if this instance has color; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.HighlightColor">
            <summary>
            Gets or sets the color of the highlighted symbol.
            </summary>
            <value>The color of the highlighted symbol.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.ResetHighlightColor">
            <summary>
            Resets the color of the highlighted symbol.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.ShouldSerializeHighlightColor">
            <summary>
            Shoulds the color of the serialize highlighted symbol.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.HasHighlightColor">
            <summary>
            Gets a value indicating whether this instance has highlight color.
            </summary>
            <value>
            	<c>true</c> if this instance has highlight color; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.DimmedColor">
            <summary>
            Gets or sets the color of the dimmed symbol.
            </summary>
            <value>The color of the dimmed symbol.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.ResetDimmedColor">
            <summary>
            Resets the color of the dimmed.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.ShouldSerializeDimmedColor">
            <summary>
            Shoulds the color of the serialize dimmed.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.HasDimmedColor">
            <summary>
            Gets a value indicating whether this instance has dimmed color.
            </summary>
            <value>
            	<c>true</c> if this instance has dimmed color; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.Size">
            <summary>
            Gets or sets the size of the symbol.
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.ResetSize">
            <summary>
            Resets the size.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.ShouldSerializeSize">
            <summary>
            Should the size of the serialize.
            </summary>
            <returns>True if the element should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.HasSize">
            <summary>
            Gets a value indicating whether the size of the symbol has been initialized.
            </summary>
            <value><c>true</c> if this instance has size; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.Offset">
            <summary>
            Gets or sets the offset of the symbol.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.ResetOffset">
            <summary>
            Resets the offset.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.ShouldSerializeOffset">
            <summary>
            Should the serialize offset.
            </summary>
            <returns>True if the element should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.HasOffset">
            <summary>
            Gets a value indicating whether the offset of the symbol has been initialized.
            </summary>
            <value>
            	<c>true</c> if this instance has offset; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.Border">
            <summary>
            Gets or sets the information that is to be used for drawing border.
            </summary>
            <value>The border.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.ResetBorder">
            <summary>
            Resets line information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.ShouldSerializeBorder">
            <summary>
            Should the serialize border.
            </summary>
            <returns>True if the element should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.HasBorder">
            <summary>
            Gets a value indicating whether line information has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.Marker">
            <summary>
            Gets or sets the marker of the symbol.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.ResetMarker">
            <summary>
            Resets the marker.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartSymbolInfo.HasMarker">
            <summary>
            Indicates whether the marker of the symbol has been initialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.Dispose">
            <summary>
            Method to dispose ChartSymbolInfo object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.CreateObject(Syncfusion.Styles.StyleInfoSubObjectIdentity,System.Object)">
            <summary>
            Creates the new <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/> class.
            </summary>
            <param name="identity">The identity.</param>
            <param name="store">The store.</param>
            <returns>Returns new ChartSymbolInfo instance. </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.CreateSubObjectIdentity(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Override this method to create a product-specific identity object for a sub object.
            </summary>
            <param name="sip"></param>
            <returns>
            An identity object for a subobject of this style.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.MakeCopy(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Makes an exact copy of the current object.
            </summary>
            <param name="newOwner">The new owner style object for the copied object.</param>
            <param name="sip">The identifier for this object.</param>
            <returns>
            A copy of the current object registered with the new owner style object.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolInfo.GetDefaultStyle">
            <summary>
            Returns <see cref="P:Syncfusion.Chart.ChartSymbolInfo.Default"/>.
            </summary>
            <returns>A <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/> object with default values.</returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartCalloutInfo">
            <summary>
            This class provides a <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> object for callout associated with a ChartPoint.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.#cctor">
            <summary>
            Initializes the new instance of the <see cref="T:Syncfusion.Chart.ChartCalloutInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartCalloutInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Chart.ChartCalloutInfo"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Chart.ChartCalloutInfo"/>.
            </param>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity,Syncfusion.Chart.ChartCalloutInfoStore)">
            <summary>
            Initializes a new  instance of <see cref="T:Syncfusion.Chart.ChartCalloutInfo"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Chart.ChartCalloutInfo"/>.
            <param name="store">A <see cref="T:Syncfusion.Chart.ChartCalloutInfoStore"/> that holds data for this <see cref="T:Syncfusion.Chart.ChartCalloutInfo"/>.
            All changes made in this style object will be saved in the <see cref="T:Syncfusion.Chart.ChartCalloutInfoStore"/> object.</param>
            </param>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.Default">
            <summary>
            Gets a default <see cref="T:Syncfusion.Chart.ChartCalloutInfo"/> that is to be used with a default style.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.Enable">
            <summary>
            Gets or sets the boolean value that is to be used with the callout.
            </summary>
            <value>The Enable.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ResetEnable">
            <summary>
            Resets enable calloutr.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ShouldSerializeEnable">
            <summary>
            Should the enable of the serialize.
            </summary>
            <returns>True if the element should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.HasEnable">
            <summary>
            Gets a value indicating whether the callout feature is enabled.
            </summary>
            <value><c>true</c> if this instance has boolean; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.Text">
            <summary>
            This is associated with a Text property and used for internal purpose.
            <see cref="P:Syncfusion.Chart.ChartCalloutInfo.Text"/> duplicate for displaytextandformat.
            </summary>
            <value>duplicate value.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.TextOffset">
            <summary>
            This is associated with a Text property and used for internal purpose.
            <see cref="P:Syncfusion.Chart.ChartCalloutInfo.TextOffset"/> offset for text.
            </summary>
            <value>TextOffset value.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ResetTextOffset">
            <summary>
            Resets TextOffset information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ShouldSerializeTextOffset">
            <summary>
            Should the serialize TextOffset.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.HasTextOffset">
            <summary>
            Gets a value indicating whether TextOffset information has been initialized for the current object.
            </summary>
            <value><c>true</c> if this instance has TextOffset; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.OffsetX">
            <summary>
            This is associated with a Text property and used for internal purpose.
            <see cref="P:Syncfusion.Chart.ChartCalloutInfo.OffsetX"/> offset for text.
            </summary>
            <value>OffsetX value.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ResetOffsetX">
            <summary>
            Resets OffsetX information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ShouldSerializeOffsetX">
            <summary>
            Should the serialize OffsetX.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.HasOffsetX">
            <summary>
            Gets a value indicating whether OffsetX information has been initialized for the current object.
            </summary>
            <value><c>true</c> if this instance has OffsetX; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.OffsetY">
            <summary>
            This is associated with a Text property and used for internal purpose.
            <see cref="P:Syncfusion.Chart.ChartCalloutInfo.OffsetY"/> offset for text.
            </summary>
            <value>OffsetY value.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ResetOffsetY">
            <summary>
            Resets OffsetY information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ShouldSerializeOffsetY">
            <summary>
            Should the serialize OffsetY.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.HasOffsetY">
            <summary>
            Gets a value indicating whether OffsetY information has been initialized for the current object.
            </summary>
            <value><c>true</c> if this instance has OffsetY; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.Font">
            <summary>
            Gets or sets the font that is to be associated with a <see cref="T:Syncfusion.Chart.ChartPoint"/>. This font will be rendered at a position near the point if
            <see cref="!:DisplayText"/> is set to True.
            </summary>
            <value>The font.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ResetFont">
            <summary>
            Resets Font information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ShouldSerializeFont">
            <summary>
            Should the serialize Font.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.HasFont">
            <summary>
            Gets a value indicating whether Font information has been initialized for the current object.
            </summary>
            <value><c>true</c> if this instance has text; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.DisplayTextAndFormat">
            <summary>
            Gets or sets the textFormat that is to be associated with a <see cref="T:Syncfusion.Chart.ChartPoint"/>. This text will be rendered with prefix or sufix text with the format of {0},{1},{2}
            <see cref="!:Callout.DisplayTextAndFormat"/> is set to True.
            </summary>
            <value>The text.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ResetDisplayTextAndFormat">
            <summary>
            Resets textFormat information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ShouldSerializeDisplayTextAndFormat">
            <summary>
            Should the serialize textFormat.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.HasDisplayTextAndFormat">
            <summary>
            Gets a value indicating whether textFormat information has been initialized for the current object.
            </summary>
            <value><c>true</c> if this instance has textFormat; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.Position">
            <summary>
            Gets or sets the Position of text that is to be displayed at this point.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ResetPosition">
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ShouldSerializePosition">
            <summary>
            Should the serialize text Position.
            </summary>
            <returns>True if the element should serialize otherwise false.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.HasPosition">
            <summary>
            Gets a value indicating whether this instance has text Position.
            </summary>
            <value>
            	<c>true</c> if this instance has text orientation; otherwise, <c>false</c>.
            </value>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.HiddenX">
            <summary>
            This is associated with the label position placement on mouse dragging.
            </summary>
            <value>duplicate value.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.HiddenY">
            <summary>
            This is associated with the label position placement on mouse dragging.
            </summary>
            <value>duplicate value.</value>
            
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.IsDragged">
            <summary>
            This is associated with the label placement on mouse dragging.
            </summary>
            <value>duplicate value.</value>
            
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.Color">
            <summary>
            Gets or sets the color that is to be used with the callout.
            </summary>
            <value>The color.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ResetColor">
            <summary>
            Resets the callout's color.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ShouldSerializeColor">
            <summary>
            Should the color of the serialize.
            </summary>
            <returns>True if the element should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.HasColor">
            <summary>
            Gets a value indicating whether the callout's color has been initialized.
            </summary>
            <value><c>true</c> if this instance has color; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.TextColor">
            <summary>
            Gets or sets the text color that is to be used with the callout.
            </summary>
            <value>The text color.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ResetTextColor">
            <summary>
            Resets the callout's text color.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ShouldSerializeTextColor">
            <summary>
            Should the text color of the serialize.
            </summary>
            <returns>True if the element should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.HasTextColor">
            <summary>
            Gets a value indicating whether the callout's text color has been initialized.
            </summary>
            <value><c>true</c> if this instance has color; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.Border">
            <summary>
            Gets or sets the information that is to be used for drawing border.
            </summary>
            <value>The border.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ResetBorder">
            <summary>
            Resets line information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.ShouldSerializeBorder">
            <summary>
            Should the serialize border.
            </summary>
            <returns>True if the element should serialize otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartCalloutInfo.HasBorder">
            <summary>
            Gets a value indicating whether line information has been initialized for the current object.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.Dispose">
            <summary>
            Method to dispose ChartCalloutInfo object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.CreateObject(Syncfusion.Styles.StyleInfoSubObjectIdentity,System.Object)">
            <summary>
            Creates the new <see cref="T:Syncfusion.Chart.ChartCalloutInfo"/> class.
            </summary>
            <param name="identity">The identity.</param>
            <param name="store">The store.</param>
            <returns>Returns new ChartCalloutInfo instance. </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.CreateSubObjectIdentity(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Override this method to create a product-specific identity object for a sub object.
            </summary>
            <param name="sip"></param>
            <returns>
            An identity object for a subobject of this style.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.MakeCopy(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Makes an exact copy of the current object.
            </summary>
            <param name="newOwner">The new owner style object for the copied object.</param>
            <param name="sip">The identifier for this object.</param>
            <returns>
            A copy of the current object registered with the new owner style object.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Chart.ChartCalloutInfo.GetDefaultStyle">
            <summary>
            Returns <see cref="P:Syncfusion.Chart.ChartCalloutInfo.Default"/>.
            </summary>
            <returns>A <see cref="T:Syncfusion.Chart.ChartCalloutInfo"/> object with default values.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Chart.IChartSeriesComposedStylesModel">
             <summary>
                 This interface represents the 'composed' state of styles for a single series. When composed, styles have all their attributes
                 initialized from their base styles and any other styles that forms a part of their inheritance structure. Composed styles are used
                 by the chart directly.
             </summary>
             <remarks>
            
             </remarks>
        </member>
        <member name="P:Syncfusion.Chart.IChartSeriesComposedStylesModel.Style">
            <summary>
             Returns the style object that is common to the series (for which this model holds style information).
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartSeriesComposedStylesModel.Item(System.Int32)">
            <summary>
            Gets the <see cref="!:Syncfusion.Windows.Forms.Chart.ChartStyleInfo"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesComposedStylesModel.GetOfflineStyle">
            <summary>
                Overloaded. Returns an 'offline' version of the series style. Offline styles do not propagate changes made, back to the data store.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesComposedStylesModel.GetOfflineStyle(System.Int32)">
            <summary>
            Returns an 'offline' version of the point style. Offline styles do not propagate changes made, back to the data store.
            </summary>
            <param name="index">Index value of the style.</param>
            <returns> Returns ChartStyleInfo object.</returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesComposedStylesModel.ResetCache">
            <summary>
                Removes any information that is cached.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesComposedStylesModel.GetBaseStyles(Syncfusion.Styles.IStyleInfo,System.Int32)">
            <summary>
            Looks up base style information for any <see cref="T:Syncfusion.Chart.ChartStyleInfo"/> object.
            <seealso cref="T:Syncfusion.Chart.ChartBaseStylesMap"/>
            </summary>
            <param name="chartStyleInfo">The style object for which base style information is to be retrieved.</param>
            <param name="index">The index value of the style.</param>
            <returns>Returns ChartStyleInfo array. </returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesComposedStylesModel.ChangeStyle(Syncfusion.Chart.ChartStyleInfo,System.Int32)">
            <summary>
              Changes the style stored at the specified index to be the same as the specified style. Affects the data store.
            </summary>
            <param name="style" type="Syncfusion.Windows.Forms.Chart.ChartStyleInfo">
                <para>
                Style object whose information is to be stored.
                </para>
            </param>
            <param name="index" type="int">
                <para>
                The index value of the style to be changed.
                </para>
            </param>
        </member>
        <member name="T:Syncfusion.Chart.IChartSeriesStylesHost">
            <summary>
            This interface is implemented by classes that host series specific style information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesStylesHost.GetStylesMap">
            <summary>
                A <see cref="T:Syncfusion.Chart.ChartBaseStylesMap"/> acts as a repository that is used to hold information on registered base styles.
                This information forms the core that is needed to apply base style information to styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartSeriesStylesHost.BackColor">
            <summary>
               Gets the back color hint from the host.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.IChartSeriesStylesModel">
            <summary>
               This interface represents the complete style information for a series in the chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.IChartSeriesStylesModel.Style">
            <summary>
                Gets the series style information.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesStylesModel.GetStyleAt(System.Int32)">
            <summary>
                Returns the style information at the specified index. This is the actual style information and not composed style information.
            </summary>
            <param name="index" type="int">
                <para>
                The index value of the point for which style information is needed.
                </para>
            </param>
            <returns>
                Style information at the specified index.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesStylesModel.ChangeStyleAt(Syncfusion.Chart.ChartStyleInfo,System.Int32)">
            <summary>
                Changes style information at the specified index.
            </summary>
            <param name="style" type="Syncfusion.Windows.Forms.Chart.ChartStyleInfo">
                <para>
                 Style whose attributes are to be stored.
                </para>
            </param>
            <param name="index" type="int">
                <para>
                 Index value where they need to be stored.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesStylesModel.ChangeStyle(Syncfusion.Chart.ChartStyleInfo)">
            <summary>
                Changes series style information.
            </summary>
            <param name="style" type="Syncfusion.Windows.Forms.Chart.ChartStyleInfo">
                <para>
                Style whose attributes are to be stored in the series style.
                </para>
            </param>
        </member>
        <member name="M:Syncfusion.Chart.IChartSeriesStylesModel.GetBaseStyles(Syncfusion.Styles.IStyleInfo,System.Int32)">
            <summary>
                Accesses base style information for the specified style.
            </summary>
            <param name="chartStyleInfo" type="Syncfusion.Styles.IStyleInfo">
                <para>
                 Style for which base style information is needed.
                </para>
            </param>
            <param name="index" type="int">
                <para>
                Index value where the style is stored.
                </para>
            </param>
        </member>
        <member name="P:Syncfusion.Chart.IChartSeriesStylesModel.ComposedStyles">
            <summary>
                Completely composed styles can be accessed using the interface returned by this property.
                Composed styles have all information initialized from base styles and any other styles along their
                inheritance hierarchy.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.IChartSeriesStylesModel.Changed">
            <summary>
            Event that is raised when style information is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.TrendlineType">
            <summary>
            The Trendline type  Enumerator.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.TrendlineType.Linear">
            <summary>
            Draws linear Trendline.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.TrendlineType.Polynomial">
            <summary>
            Draws Polynomial Trendline.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.TrendlineType.Exponential">
            <summary>
            Draws Exponential Trendline.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.TrendlineType.MovingAverage">
            <summary>
            Draws Moving Average Trendline. 
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.TrendlineType.Logarithmic">
            <summary>
            Draws Logarithmic Trendline.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.TrendlineType.Power">
            <summary>
            Draws Power Trendline. 
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Trendline.Name">
            <summary>
            Gets or sets the name of the trendline.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Trendline.Color">
            <summary>
            Gets or sets the color of the trendline.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Trendline.Style">
            <summary>
            Gets or sets the trendline style.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Trendline.Width">
            <summary>
            Gets or sets the width of the trendline.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Trendline.Visible">
            <summary>
            Gets or sets the visibility of  trendline.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Trendline.BackwardForecast">
            <summary>
            Gets or sets the Backward Forecast  of the trendline.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Trendline.ForwardForecast">
            <summary>
            Gets or sets the Forward Forecast of the trendline.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Trendline.PolynomialOrder">
            <summary>
            Gets or sets the Polynomial Order in the Polynomial Trendline
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.Trendline.Period">
            <summary>
            Gets or sets the Period in the Moving Average Trendline
            </summary>
            
        </member>
        <member name="P:Syncfusion.Chart.Trendline.Type">
            <summary>
            Gets or sets the  type of the trendline.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Trendline.UpdateElements(Syncfusion.Chart.ChartSeries)">
            <summary>
            Calculates the Trendline Elements  <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.
            </summary>
            <param name="series">The Chartseries<see cref="!:Series"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.Trendline.CheckTrendlineType(Syncfusion.Chart.ChartSeries)">
            <summary>
            Calculates the Trendline Elements  <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.
            </summary>
            <param name="series">The Chartseries<see cref="!:Series"/>.</param>
        </member>
        <member name="M:Syncfusion.Chart.Trendline.CalculatePolynomialTrendLine(Syncfusion.Chart.ChartSeries)">
            <summary>
            Calculate Polynomial Trendline with order
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Trendline.CreatePolynomialSegments(Syncfusion.Chart.ChartSeries)">
            <summary>
            Create the polynomial segments
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.Trendline.GetBezierControlPoints(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Double,System.Double,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@)">
            <summary>
            Returns the controlPoints of the curve
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <param name="ys1"></param>
            <param name="ys2"></param>
            <param name="controlPoint1"></param>
            <param name="controlPoint2"></param>
        </member>
        <member name="T:Syncfusion.Chart.ChartCustomPoint">
            <summary>
            The ChartCustomPoint class can be used to set text or symbols at a particular point on the chart area.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPoint.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Syncfusion.Chart.ChartCustomPoint"/> class.
            </summary>
        </member>
        <member name="E:Syncfusion.Chart.ChartCustomPoint.SettingsChanged">
            <summary>
            An event that is triggered when settings is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPoint.Images">
            <summary>
            Gets or sets the image list to be used.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPoint.Border">
            <summary>
            Gets or sets the border information that is to be associated with this custom point.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPoint.Interior">
            <summary>
            Gets or sets the interior brush information that is to be associated with this custom point.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPoint.Offset">
            <summary>
            Gets or sets the offset of text that is to be associated with this point, from the rendering position of this point.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPoint.PointIndex">
            <summary>
            Gets or sets the index of the point to be followed.
            <seealso cref="F:Syncfusion.Chart.ChartCustomPointType.PointFollow"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPoint.SeriesIndex">
            <summary>
            Gets or sets the index of the series that holds the point to be followed.
            <see cref="F:Syncfusion.Chart.ChartCustomPointType.PointFollow"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPoint.DateXValue">
            <summary>
            Gets or sets the X value of the custom point when the primary X axis of the chart is DateTime.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPoint.DateYValue">
            <summary>
            Gets or sets the Y value of the custom point when the primary Y axis of the chart is DateTime.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPoint.Symbol">
            <summary>
            Gets or sets the symbol information that is to be associated with the custom point.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPoint.ShowMarker">
            <summary>
            Gets or sets a value indicating whether marker is visible.
            </summary>
            <value><c>true</c> if marker is visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPoint.Color">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPoint.Font">
            <summary>
            Gets or sets the font of the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPoint.Alignment">
            <summary>
            Gets or sets the alignment of the text in relation to the point.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPoint.Text">
            <summary>
            Gets or sets the text of the custom point.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPoint.YValue">
            <summary>
            Gets or sets the X value of the custom point when the primary X axis of the chart is of type double.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPoint.XValue">
            <summary>
            Gets or sets the Y value of the custom point when the primary Y axis of the chart is of type double.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartCustomPoint.CustomType">
            <summary>
            Indicates how the XValue and YValue will be used.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPoint.Dispose">
            <summary>
            Method to dispose ChartCustomPoint object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPoint.AddShape(Syncfusion.Chart.DrawShape)">
            <summary>
            Assign the Shape class properties values to custom point to draw in the chartarea
            </summary>
            <param name="shape">The chart custom point shape</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPoint.Draw(Syncfusion.Chart.ChartArea,Syncfusion.Chart.ChartGraph,Syncfusion.Drawing.PointF)">
            <summary>
            Draws the specified graph.
            </summary>
            <param name="area">The chartarea</param>
            <param name="graph">The graph.</param>
            <param name="point">The point.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPoint.Draw(Syncfusion.Chart.ChartArea,Syncfusion.Chart.Graphics3D,Syncfusion.Chart.Vector3D)">
            <summary>
            Draws the specified graph.
            </summary>
            <param name="area">The chartarea</param>
            <param name="graph">The graph.</param>
            <param name="point">The point.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPoint.OnSettingsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:SettingsChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPoint.OnStyleChanged(System.Object,Syncfusion.Styles.StyleChangedEventArgs)">
            <summary>
            Called when border is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Syncfusion.Styles.StyleChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPoint.GetTextPoint(Syncfusion.Drawing.PointF,Syncfusion.Drawing.SizeF)">
            <summary>
            Gets the text point.
            </summary>
            <param name="basePoint">The base point.</param>
            <param name="textSize">Size of the text.</param>
            <returns>Returns the Text point.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartCustomPoint.GetShapePoint(Syncfusion.Drawing.PointF)">
            <summary>
            Gets the Rectangle point.
            </summary>
            <param name="basePoint">The base point.</param>
            <returns>Returns the Rectangle point.</returns>
            
        </member>
        <member name="T:Syncfusion.Chart.DrawShape">
            <summary>
            The DrawShape class can be used to set shape to particular custom point on the chart area.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.DrawShape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.DrawShape"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.DrawShape.Font">
            <summary>
            Gets or sets the font of the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.DrawShape.Type">
            <summary>
            Gets or sets the style of the shape that is to be displayed.
            Default shape is Square. 
            It will support the limitted shape(Square, Circle, Hexagon, Pentagon) draw around the custom point
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.DrawShape.Text">
            <summary>
            Gets or sets the text of the custom point.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.DrawShape.Color">
            <summary>
             Gets or sets background color to the Shape. 
             Default color is "White"
             </summary>
        </member>
        <member name="P:Syncfusion.Chart.DrawShape.TextColor">
            <summary>
             Gets or sets text color to the custom shape. 
             Default color is "White"
             </summary>
        </member>
        <member name="P:Syncfusion.Chart.DrawShape.Size">
            <summary>
             Gets or sets size to the Shape to draw around the custom points
             Default Size is (50, 50)
             </summary>
        </member>
        <member name="P:Syncfusion.Chart.DrawShape.Border">
            <summary>
             Gets or sets border to the custom shape.
             </summary>
        </member>
        <member name="P:Syncfusion.Chart.DrawShape.Position">
            <summary>
            Gets or sets the position of the shape in relation to the point.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.DrawShape.Dispose">
            <summary>
            Method to dispose DrawShape object.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ButtonBorderStyle.None">
            <!-- Failed to insert some or all of included XML --><include file="doc\ButtonBorderStyle.uex" path="docs/doc[@for=&quot;ButtonBorderStyle.None&quot;]/*" />
            <devdoc>
               <para>
                  No border.
               </para>
            </devdoc>
        </member>
        <member name="F:Syncfusion.Chart.ButtonBorderStyle.Dotted">
            <!-- Failed to insert some or all of included XML --><include file="doc\ButtonBorderStyle.uex" path="docs/doc[@for=&quot;ButtonBorderStyle.Dotted&quot;]/*" />
            <devdoc>
               <para>
                  A dotted-line border.
               </para>
            </devdoc>
        </member>
        <member name="F:Syncfusion.Chart.ButtonBorderStyle.Dashed">
            <!-- Failed to insert some or all of included XML --><include file="doc\ButtonBorderStyle.uex" path="docs/doc[@for=&quot;ButtonBorderStyle.Dashed&quot;]/*" />
            <devdoc>
               <para>
                  A dashed border.
               </para>
            </devdoc>
        </member>
        <member name="F:Syncfusion.Chart.ButtonBorderStyle.Solid">
            <!-- Failed to insert some or all of included XML --><include file="doc\ButtonBorderStyle.uex" path="docs/doc[@for=&quot;ButtonBorderStyle.Solid&quot;]/*" />
            <devdoc>
               <para>
                  A solid border.
               </para>
            </devdoc>
        </member>
        <member name="F:Syncfusion.Chart.ButtonBorderStyle.Inset">
            <!-- Failed to insert some or all of included XML --><include file="doc\ButtonBorderStyle.uex" path="docs/doc[@for=&quot;ButtonBorderStyle.Inset&quot;]/*" />
            <devdoc>
               <para>
                  A sunken border.
               </para>
            </devdoc>
        </member>
        <member name="F:Syncfusion.Chart.ButtonBorderStyle.Outset">
            <!-- Failed to insert some or all of included XML --><include file="doc\ButtonBorderStyle.uex" path="docs/doc[@for=&quot;ButtonBorderStyle.Outset&quot;]/*" />
            <devdoc>
               <para>
                  A raised border.
               </para>
            </devdoc>
        </member>
        <member name="F:Syncfusion.Chart.LeftRightAlignment.Left">
            <!-- Failed to insert some or all of included XML --><include file="doc\LeftRightAlignment.uex" path="docs/doc[@for=&quot;LeftRightAlignment.Left&quot;]/*" />
            <devdoc>
               <para>
                  The object or
                  text is aligned to the left of the reference
                  point.
               </para>
            </devdoc>
        </member>
        <member name="F:Syncfusion.Chart.LeftRightAlignment.Right">
            <!-- Failed to insert some or all of included XML --><include file="doc\LeftRightAlignment.uex" path="docs/doc[@for=&quot;LeftRightAlignment.Right&quot;]/*" />
            <devdoc>
               <para>
                  The object or text is aligned to the right of the reference point.
               </para>
            </devdoc>
        </member>
        <member name="F:Syncfusion.Chart.BorderStyle.None">
            <!-- Failed to insert some or all of included XML --><include file="doc\BorderStyle.uex" path="docs/doc[@for=&quot;BorderStyle.None&quot;]/*" />
            <devdoc>
               <para>
                  No border.
               </para>
            </devdoc>
        </member>
        <member name="F:Syncfusion.Chart.BorderStyle.FixedSingle">
            <!-- Failed to insert some or all of included XML --><include file="doc\BorderStyle.uex" path="docs/doc[@for=&quot;BorderStyle.FixedSingle&quot;]/*" />
            <devdoc>
               <para>
                  A single-line border.
               </para>
            </devdoc>
        </member>
        <member name="F:Syncfusion.Chart.BorderStyle.Fixed3D">
            <!-- Failed to insert some or all of included XML --><include file="doc\BorderStyle.uex" path="docs/doc[@for=&quot;BorderStyle.Fixed3D&quot;]/*" />
            <devdoc>
               <para>
                  A three-dimensional border.
               </para>
            </devdoc>
        </member>
        <member name="T:Syncfusion.Chart.DrawingMode">
            <summary>
            Specifies the drawing mode of chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.DrawingMode.Simple2D">
            <summary>
            Chart will be painted in 2D mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.DrawingMode.Pseudo3D">
            <summary>
            Chart will be painted in pseudo 3D mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.DrawingMode.Real3D">
            <summary>
            Chart will be painted in real 3D mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAreaAxesType">
            <summary>
            Specifies type of coordinate system.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAreaAxesType.None">
            <summary>
            Any coortinate sysytem isn't used.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAreaAxesType.Circular">
            <summary>
            The circular coordinate system is used.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAreaAxesType.Rectangular">
            <summary>
            The rectangular coordinate system is used.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxesLayoutMode">
            <summary>
            Lists the different ways in which multiple axes will be rendered on the same side (X or Y)
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxesLayoutMode.SideBySide">
            <summary>
            Multiple axes will be rendered one after the other, side-by-side.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxesLayoutMode.Stacking">
            <summary>
            Multiple axes will be rendered in parallel.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Skins.None">
            <summary>
            Represents No Skins.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Skins.Office2007Black">
            <summary>
            Represents Office2007Black Skin.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Skins.Office2007Blue">
            <summary>
            Represents Office2007Blue Skin.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Skins.Office2007Silver">
            <summary>
            Represents Office2007Silver Skin.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Skins.Almond">
            <summary>
            Represents Almond Skin.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Skins.Blend">
            <summary>
            Represents Blend Skin.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Skins.Blueberry">
            <summary>
            Represents Blueberry Skin.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Skins.Marble">
            <summary>
            Represents Marble Skin.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Skins.Midnight">
            <summary>
            Represents MidNight Skin.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Skins.Monochrome">
            <summary>
            Represents Monochrome Skin.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Skins.Olive">
            <summary>
            Represents Olive Skin.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Skins.Sandune">
            <summary>
            Represents Sandune Skin.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Skins.Turquoise">
            <summary>
            Represents Turquoise Skin.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Skins.Vista">
            <summary>
            Represents Vista Skin.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Skins.VS2010">
            <summary>
            Represents VS2010 Skin.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.Skins.Metro">
            <summary>
            Represents VS2010 Skin.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartPaintFlags">
            <summary>
            Specifies flags that control the elements painting.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPaintFlags.Background">
            <summary>
            Indicates visibility of background.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPaintFlags.Border">
            <summary>
            Indicates visibility of border.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPaintFlags.InteractiveCursors">
            <summary>
            Indicates visibility of interactive cursors.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPaintFlags.Axes">
            <summary>
            Indicates visibility of axes.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPaintFlags.All">
            <summary>
            All elements will be painted.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAccumulationLabelStyle">
            <summary>
            Lists the options available for rendering the labels in the Pyramid, Funnel, Pie or Doughnut Chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAccumulationLabelStyle.Disabled">
            <summary>
            Labels are not shown.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAccumulationLabelStyle.Inside">
            <summary>
            Labels are rendered inside the pie.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAccumulationLabelStyle.Outside">
            <summary>
            Lables are rendered outside the pie.In funnel or pyramid chart, if the label style is set to outside, then the label placement has be left or right.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAccumulationLabelStyle.OutsideInColumn">
            <summary>
            Labels are rendered outside the pie and in columns.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAccumulationLabelStyle.OutsideInArea">
            <summary>
            Labels are rendered outside the pie and in chart area.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAccumulationLabelPlacement">
            <summary>
            Lists the options for positioning the lables in an accumulation chart (Pyramid or Funnel)
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAccumulationLabelPlacement.Top">
            <summary>
            Renders the label on top of the block, when rendered Inside.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAccumulationLabelPlacement.Bottom">
            <summary>
            Renders the label at the bottom of the block, when rendered Inside.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAccumulationLabelPlacement.Left">
            <summary>
            Renders the label to the left of the block, when rendered Outside.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAccumulationLabelPlacement.Right">
            <summary>
            Renders the label to the right of the block, when rendered Outside.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAccumulationLabelPlacement.Center">
            <summary>
            Renders the label at the center of the block, when rendered Inside.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartFigureBase">
            <summary>
            Lists the options in which a pyramid base could be rendered in 3D mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartFigureBase.Square">
            <summary>
            Base is a square.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartFigureBase.Circle">
            <summary>
            Base is a circle.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartFunnelMode">
            <summary>
            Lists the funnel mode options.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartFunnelMode.YIsWidth">
            <summary>
            The specified Y value is used to compute the width of the corresponding block.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartFunnelMode.YIsHeight">
            <summary>
            The specified Y value is used to compute the height of the corresponding block.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartPyramidMode">
            <summary>
            Specifies the mode in which the Y values should be interpreted in the Pyramid chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPyramidMode.Linear">
            <summary>
            The Y values are proportional to the length of the sides of the pyramid.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPyramidMode.Surface">
            <summary>
            The Y values are proportional to the surface area of the corresponding blocks.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartUsedSpaceType">
            <summary>
            Specifies how much 3D space will be used by chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartUsedSpaceType.None">
            <summary>
            Chart type doesn't use the 3D space.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartUsedSpaceType.All">
            <summary>
            Chart type uses the all 3D space.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartUsedSpaceType.OneForOne">
            <summary>
            Chart type uses the single layer of 3D space for each series.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartUsedSpaceType.OneForAll">
            <summary>
            Chart type uses the single layer of 3D space for all series with the same type.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartDock">
            <summary>
            Specifies the Docking position of a control.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDock.Left">
            <summary>
            The control will be docked to the Left of its container
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDock.Right">
            <summary>
            The control will be docked to the Right of its container
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDock.Top">
            <summary>
            The control will be docked to the Top of its container
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDock.Bottom">
            <summary>
            The control will be docked to the Bottom of its container
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartDock.Floating">
            <summary>
            The control will not be docked inside the container
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAlignment">
            <summary>
            Specifies the alignment of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAlignment.Near">
            <summary>
            The control will be aligned Near.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAlignment.Center">
            <summary>
            The control will be aligned in the Center.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAlignment.Far">
            <summary>
            The control will be aligned Far.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartPlacement">
            <summary>
            Specifies the placement of element by the parent bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPlacement.Inside">
            <summary>
            Elements are located inside the parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPlacement.Outside">
            <summary>
            Elements are located outside the parent.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartOrientation">
            <summary>
            Specifies the orientation.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartOrientation.Horizontal">
            <summary>
            The chart element is oriented horizontally.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartOrientation.Vertical">
            <summary>
            The chart element is oriented vertically.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSetMode">
            <summary>
            Specifies the mode of drawing the edge labels.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSetMode.None">
            <summary>
            None of the edge label settings will be applied.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSetMode.AutoSet">
            <summary>
            The margin labels will be auto set.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSetMode.UserSet">
            <summary>
            The margin labels will be user set.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.VerticalAlignment">
            <summary>
            Specifies the vertical alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.VerticalAlignment.Top">
            <summary>
            The element will be aligned in Top.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.VerticalAlignment.Center">
            <summary>
            The element will be aligned in Center.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.VerticalAlignment.Bottom">
            <summary>
            The element will be aligned in Bottom.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartLabelIntersectionActionEffect">
            <summary>
                Specifies the options to control what happens if chart labels intersect each other due to lack of space. It is used in conjunction with
                <see cref="T:Syncfusion.Chart.ChartLabelIntersectAction"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLabelIntersectionActionEffect.All">
            <summary>
             <see cref="T:Syncfusion.Chart.ChartLabelIntersectAction"/> related changes affect all label text.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLabelIntersectionActionEffect.Specific">
            <summary>
             <see cref="T:Syncfusion.Chart.ChartLabelIntersectAction"/> related changes affect only specific labels that may need to be changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartLegendRepresentationType">
            <summary>
             Specifies the representation symbol that is to be used inside the legend box for a series.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendRepresentationType.None">
            <summary>
            A visual representation will be none.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendRepresentationType.SeriesType">
            <summary>
            A visual representation of the series type will be rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendRepresentationType.SeriesImage">
            <summary>
            The image associated with the series type will be rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendRepresentationType.Rectangle">
            <summary>
            A rectangle will be rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendRepresentationType.Line">
            <summary>
            A line will be rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendRepresentationType.StraightLine">
            <summary>
            A straight line will be rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendRepresentationType.Circle">
            <summary>
            A circle will be rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendRepresentationType.Diamond">
            <summary>
            A diamond will be rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendRepresentationType.Hexagon">
            <summary>
            A hexagon will be rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendRepresentationType.Pentagon">
            <summary>
            A pentagon will be rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendRepresentationType.Triangle">
            <summary>
            A triangle will be rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendRepresentationType.InvertedTriangle">
            <summary>
            An inverted triangle will be rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendRepresentationType.Cross">
            <summary>
            A cross will be rendered.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartCustomPointType">
            <summary>
            Specifies the options for how to position a custom point on the chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartCustomPointType.Percent">
            <summary>
            Coordinates of the custom point are taken as a percentage of the chart area.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartCustomPointType.Pixel">
            <summary>
            Coordinates of the custom point are taken to be in pixels.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartCustomPointType.ChartCoordinates">
            <summary>
            Coordinates of the custom point are taken as a percentage of the chart area.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartCustomPointType.PointFollow">
            <summary>
            The custom point will follow the regular point of any series it is assigned to.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartLabelIntersectAction">
            <summary>
             Specifies the options for the action that is to be taken when labels intersect each other.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLabelIntersectAction.None">
            <summary>
            No special action is taken. Labels may intersect.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLabelIntersectAction.Wrap">
            <summary>
            When labels would intersect each other, they are wrapped to avoid intersection.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLabelIntersectAction.MultipleRows">
            <summary>
            When labels would intersect each other, they are wrapped into multiple rows to avoid intersection.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLabelIntersectAction.Rotate">
            <summary>
            When labels would intersect each other, they are rotated to avoid intersection.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartTitleDrawMode">
            <summary>
            The ChartTitleDrawMode enumerator.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTitleDrawMode.None">
            <summary>
            No special mode is taken.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTitleDrawMode.Wrap">
            <summary>
            Wraps title.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTitleDrawMode.Ellipsis">
            <summary>
            Removes the end of trimmed lines, and replaces them with an ellipsis.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartLegendItemType">
            <summary>
                Specifies the actual symbol rendered inside the legend box for a series based on hints / specifications given with
                <see cref="T:Syncfusion.Chart.ChartLegendRepresentationType"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemType.None">
            <summary>
            Visual representation is empty.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemType.Line">
            <summary>
             Visual representation is a line.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemType.Rectangle">
            <summary>
             Visual representation is a rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemType.Spline">
            <summary>
             Visual representation is a spline.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemType.Area">
            <summary>
             Visual representation is an area chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemType.PieSlice">
            <summary>
             Visual representation is a pie slice.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemType.Image">
            <summary>
             Visual representation is an image.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemType.Circle">
            <summary>
             Visual representation is a circle.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemType.Diamond">
            <summary>
             Visual representation is a diamond.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemType.Hexagon">
            <summary>
             Visual representation is a hexagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemType.Pentagon">
            <summary>
             Visual representation is a pentagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemType.Triangle">
            <summary>
             Visual representation is a triangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemType.InvertedTriangle">
            <summary>
             Visual representation is an inverted triangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemType.Cross">
            <summary>
             Visual representation is a cross.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemType.SplineArea">
            <summary>
             Visual representation is a spline area.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartLegendItemType.StraightLine">
            <summary>
             Visual representation is a Straight area.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartTextPosition">
            <summary>
            Specifies the options for positioning of the Chart's text.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextPosition.Top">
            <summary>
             Text is positioned at the top of the chart area.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextPosition.Bottom">
            <summary>
             Text is positioned at the bottom of the chart area.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextPosition.Left">
            <summary>
             Text is positioned to the left of the chart area.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextPosition.Right">
            <summary>
             Text is positioned to the right of the chart area.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartValueType">
            <summary>
            Specifies the different values that are natively used.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartValueType.Double">
            <summary>
             Double value.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartValueType.DateTime">
            <summary>
             DateTime value.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartValueType.Custom">
            <summary>
             Custom value.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartValueType.Category">
            <summary>
             Category value.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartValueType.Logarithmic">
            <summary>
            Logarithmic value.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesBaseType">
            <summary>
             Specifies the representation classification. Generally used only when you are writing custom renderers.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesBaseType.Single">
            <summary>
            Values are single series rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesBaseType.SideBySide">
            <summary>
             Values are plotted side by side.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesBaseType.Independent">
            <summary>
             Values are independently rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesBaseType.Circular">
            <summary>
            Values are plotted by circular (Radar, Polar).
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesBaseType.Other">
            <summary>
             Other non-standard rendering.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesBaseStackingType">
            <summary>
             Specifies the representation classification. Generally used only when you are writing custom renderers.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesBaseStackingType.Stacked">
            <summary>
             Values are stacked.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesBaseStackingType.FullStacked">
            <summary>
             Values are stacked.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesBaseStackingType.NotStacked">
            <summary>
             Values are not stacked.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesSortingType">
            <summary>
             Specifies the different sort axis value types.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesSortingType.X">
            <summary>
             Sorts the ChartSeries based on X values.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesSortingType.Y">
            <summary>
             Sorts the ChartSeries based on Y values.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesSortingOrder">
            <summary>
             Specifies the different sort direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesSortingOrder.Ascending">
            <summary>
            Sorts the series in ascending order.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesSortingOrder.Descending">
            <summary>
            Sorts the series in descending order.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartSeriesType">
            <summary>
             Specifies the different chart types.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Line">
            <summary>
             Line chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Spline">
            <summary>
             Spline chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.RotatedSpline">
            <summary>
             Rotated spline chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Scatter">
            <summary>
             Scatter chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Column">
            <summary>
             Column chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Bar">
            <summary>
             Bar chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Gantt">
            <summary>
             Gantt chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.StackingBar">
            <summary>
             Stacking bar chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Area">
            <summary>
             Area chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.RangeArea">
            <summary>
            Range Area chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.SplineArea">
            <summary>
             Area chart with spline connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.StackingArea">
            <summary>
             Stacking area chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.StackingColumn">
            <summary>
             Stacking column chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.StackingArea100">
            <summary>
             Stacking area chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.StackingBar100">
            <summary>
             Stacking 100% bar chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.StackingColumn100">
            <summary>
             Stacking 100% column chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Pie">
            <summary>
             Pie chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Funnel">
            <summary>
             Funnel chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Pyramid">
            <summary>
             Pyramid chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.HiLo">
            <summary>
             HiLo chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.HiLoOpenClose">
            <summary>
             HiLoOpenClose chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Candle">
            <summary>
             Candle chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Bubble">
            <summary>
             Bubble chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.StepLine">
            <summary>
             StepLine chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.StepArea">
            <summary>
             StepArea chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Radar">
            <summary>
            Radar chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Kagi">
            <summary>
            Kagi chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Renko">
            <summary>
            Renko chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Polar">
            <summary>
            Polar chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.ColumnRange">
            <summary>
            ColumnRange chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.ThreeLineBreak">
            <summary>
            ThreeLineBreak chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.PointAndFigure">
            <summary>
            PointAndFigure chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.BoxAndWhisker">
            <summary>
             BoxAndWhisker chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Histogram">
            <summary>
             Histogram chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Tornado">
            <summary>
             This Chart is mainly used in sensitivity analysis.
             It shows how different random factors can influence
             the prognoses income.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.HeatMap">
            <summary>
            HeatMap chart
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartSeriesType.Custom">
            <summary>
             Custom chart. Rendering is done by user.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisRangeType">
            <summary>
                Specifies chart axis ranges configuration options.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisRangeType.Auto">
            <summary>
             Bounds are automatically calculated based on values.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisRangeType.Set">
            <summary>
             Bounds and intervals are explicitly set.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartTextOrientation">
            <summary>
             Specifies the orientation of text when rendered with a value point.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextOrientation.UpLeft">
            <summary>
            Text is rendered above and to the left of the point.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextOrientation.Up">
            <summary>
             Text is rendered above the point.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextOrientation.UpRight">
            <summary>
            Text is rendered above and to the right of the point.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextOrientation.Left">
            <summary>
             Text is rendered to the left of the point.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextOrientation.Center">
            <summary>
             Text is centered on the point.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextOrientation.Right">
            <summary>
             Text is rendered to the right of the point.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextOrientation.DownLeft">
            <summary>
            Text is rendered below and to the left of the point.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextOrientation.Down">
            <summary>
             Text is rendered below the point.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextOrientation.DownRight">
            <summary>
            Text is rendered below and to the right of the point.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextOrientation.Smart">
            <summary>
             Text is rendered in a manner that is appropriate for the situation.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextOrientation.RegionUp">
            <summary>
             Text is rendered above the region that represents the point (Example: above the bar in a bar chart).
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextOrientation.RegionDown">
            <summary>
             Text is rendered below the region that represents the point (Example: below the bar in a bar chart).
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextOrientation.RegionCenter">
            <summary>
             Text is centered in the region that represents the point (Example: centered inside the bar in a bar chart).
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextOrientation.RegionLeft">
            <summary>
             Text is left in the region only bar in a bar chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartTextOrientation.SymbolCenter">
            <summary>
             Text is centered to the symbol if one is associated with the point.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.LabelPosition">
            <summary>
             Specifies the Position of Callout data label when rendered with a value point.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.LabelPosition.Top">
            <summary>
             Text is rendered above the point.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.LabelPosition.Left">
            <summary>
             Text is rendered to the left of the point.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.LabelPosition.Right">
            <summary>
             Text is rendered to the right of the point.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.LabelPosition.Center">
            <summary>
             Text is centered on the point.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.LabelPosition.Bottom">
            <summary>
             Text is rendered below the point.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartRadarAxisStyle">
            <summary>
            Specifies the style of the radar chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartRadarAxisStyle.Polygon">
            <summary>
            Axes are rendered polygonal.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartRadarAxisStyle.Circle">
            <summary>
            Axes are rendered as circles.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartColumnWidthMode">
            <summary>
            Indicates the style of the radar chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColumnWidthMode.RelativeWidthMode">
            <summary>
            The width is specified in ChartPoint.YValues[1] in units of X-Axis range.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColumnWidthMode.FixedWidthMode">
            <summary>
            If width of columns aren't given in point YValues[1], in pixels.
            If not specified, the column will be rendered in DefaultWidthMode.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColumnWidthMode.DefaultWidthMode">
            <summary>
            The width of the columns will always be calculated to fill the space between columns.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartColumnDrawMode">
            <summary>
            Specifies the drawing mode of 3D column/bar charts
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColumnDrawMode.InDepthMode">
            <summary>
            Columns are drawn in depth.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColumnDrawMode.PlaneMode">
            <summary>
            Column are drawn side-by-side.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartColumnDrawMode.ClusteredMode">
            <summary>
            Columns are drawn in depth with the same size.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartGanttDrawMode">
            <summary>
            Specifies the mode of drawing the Gantt chart
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartGanttDrawMode.CustomPointWidthMode">
            <summary>
            Plots the Gantt chart as overlapped.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartGanttDrawMode.AutoSizeMode">
            <summary>
            Plots the Gantt chart as side-by-side.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartAxisTickLabelDrawingMode">
            <summary>
            Specifies the modes that is to be used for drawing tick labels on the axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisTickLabelDrawingMode.None">
            <summary>
            The ticks and tick labels aren't drawing;
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisTickLabelDrawingMode.AutomaticMode">
            <summary>
            The ticks and tick labels are distributed uniformly along the axis 
            with specified interval.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisTickLabelDrawingMode.UserMode">
            <summary>
            The user can specify the positions of labels and text of labels .
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartAxisTickLabelDrawingMode.BothUserAndAutomaticMode">
            <summary>
            The user can specify the positions of labels and text of labels.
            The Automatic labels are also drawn.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartPrintColorMode">
            <summary>
            Specifies how to print content that contains color or shades of gray. 
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPrintColorMode.GrayScale">
            <summary>
            The series Styles will be in monochrome scale during printing.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPrintColorMode.Color">
            <summary>
            The series Styles will be in colored scale during printing.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartPrintColorMode.CheckPrinter">
            <summary>
            The printer will be checked if it supports colors. If not then the GrayScale mode will be used.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ScatterConnectType">
            <summary>
            Specifies type of connection between scatter points.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ScatterConnectType.None">
            <summary>
            Connect type will be none. (Scatter chart)
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ScatterConnectType.Line">
            <summary>
            Connect type will be of line (ScatterLine chart)
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ScatterConnectType.Spline">
            <summary>
            Connect type will be spline (ScatterSpline chart)
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartOpenCloseDrawMode">
            <summary>
            Specifies that Open and Close lines are displayed. 
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartOpenCloseDrawMode.Both">
            <summary>
            Draws both open and close lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartOpenCloseDrawMode.Close">
            <summary>
            Draws only Close line.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartOpenCloseDrawMode.Open">
            <summary>
            Draws only Open line.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartHeatMapLayoutStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartHeatMapLayoutStyle.Rectangular">
            <summary>
            Renders rectangle layout for HeatMap series.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartHeatMapLayoutStyle.Vertical">
            <summary>
            Renders vertical layout for HeatMap series.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartHeatMapLayoutStyle.Horizontal">
            <summary>
            Renders horizontal layout for HeatMap series.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.InteractiveCursorOrientation">
            <summary>
            Specifies the Orientation of Interactive Cursor.
            </summary>    
        </member>
        <member name="F:Syncfusion.Chart.InteractiveCursorOrientation.Horizontal">
            <summary>
            Only Horizontal Cursor gets displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.InteractiveCursorOrientation.Vertical">
            <summary>
            Only Vertical Cursor gets displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.InteractiveCursorOrientation.Both">
            <summary>
            Both the Horizontal and Vertical Cursor gets displayed.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.PartialZoom">
            <summary>
            Specifies are zooming enabled only for single axis.
            </summary>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.PartialZoom.OnlyX">
            <summary>
            Zoomx XAxis only.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.PartialZoom.OnlyY">
            <summary>
            Zooms YAxis only.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.PartialZoom.None">
            <summary>
            None of the zooming will be applied.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.LineInfo">
            <summary>
            This class holds information on lines rendered as part of the chart's rendering system.
            </summary>
            <seealso cref="P:Syncfusion.Chart.ChartAxis.GridLineType"/>
            <seealso cref="P:Syncfusion.Chart.ChartAxis.LineType"/>
        </member>
        <member name="E:Syncfusion.Chart.LineInfo.SettingsChanged">
            <summary>
            An event that is triggered when properties are changed.
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.LineInfo.BackColor">
            <summary>
            Gets or sets the backcolor that is to be associated with the line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.LineInfo.Brush">
            <summary>
             Gets the brush information that is to be used with the line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.LineInfo.DashStyle">
            <summary>
            Gets or sets the style of the line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.LineInfo.ForeColor">
            <summary>
            Gets or sets the forecolor of the line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.LineInfo.Pen">
            <summary>
            Gets the pen used to render the line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.LineInfo.PenType">
            <summary>
            Gets or sets the type of pen that is to be used with the line.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.LineInfo.Width">
            <summary>
            Gets or sets the width of the line.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.LineInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.LineInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.LineInfo.OnSettingsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:SettingsChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.LineInfo.ResetBackColor">
            <summary>
            Resets the value of BackColor property.
            </summary>
            <internalonly/>
             <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.LineInfo.ResetForeColor">
            <summary>
            Resets the value of ForeColor property.
            </summary>
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.LineInfo.ShouldSerializeBackColor">
            <summary>
            Indicates whether the BackColor should be serialized.
            </summary>
            <returns>Returns true if the element should serialize otherwise false.</returns>
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.LineInfo.ShouldSerializeForeColor">
            <summary>
            Indicates whether the ForeColor property should be serialized
            </summary>
            <returns>Returns true if the element should serialize otherwise false.</returns>
            <internalonly/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Chart.LineInfo.RefreshPen">
            <summary>
            Refreshes the pen.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartMarker">
            <summary>
            ChartMarker is used in association with <see cref="T:Syncfusion.Chart.ChartSymbolInfo"/>.
            </summary>
            <seealso cref="T:Syncfusion.Chart.ChartSymbolInfo"/>
        </member>
        <member name="P:Syncfusion.Chart.ChartMarker.LineCap">
            <summary>
            Gets or sets the line cap that is to be used with this marker.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartMarker.LineInfo">
            <summary>
            Gets or sets the line information associated with this marker.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartMarker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartMarker"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartMarker.Dispose">
            <summary>
            Method to dispose ChartMarker object.
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartIndexedValues">
            <summary>
            ChartIndexedValues collects and sorts the X values of series.
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartIndexedValues.Count">
            <summary>
            Gets the count of indexed values.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartIndexedValues.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Double"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.ChartIndexedValues.#ctor(Syncfusion.Chart.ChartModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartIndexedValues"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartIndexedValues.GetIndex(System.Double)">
            <summary>
            Gets the indexed value by real value.
            </summary>
            <param name="value">The value.</param>
            <returns>Returns the Index.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartIndexedValues.GetValue(System.Double)">
            <summary>
            Gets the real value by indexed value.
            </summary>
            <param name="index">The index.</param>
            <returns>Returns double value for the given index.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartIndexedValues.EnsureValuesUpdated">
            <summary>
            Updates this values.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartIndexedValues.OnSeriesChanged(System.Object,Syncfusion.Chart.ChartSeriesCollectionChangedEventArgs)">
            <summary>
            Called when series changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="!:Syncfusion.Windows.Forms.Chart.ChartSeriesCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Chart.DoubleRange">
            <summary>
            Closed range.
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.DoubleRange.Start">
            <summary>
            Gets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Syncfusion.Chart.DoubleRange.End">
            <summary>
            Gets the end.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Syncfusion.Chart.DoubleRange.Delta">
            <summary>
            Gets the delta.
            </summary>
            <value>The delta.</value>
        </member>
        <member name="P:Syncfusion.Chart.DoubleRange.Median">
            <summary>
            Gets the median.
            </summary>
            <value>The median.</value>
        </member>
        <member name="P:Syncfusion.Chart.DoubleRange.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.DoubleRange.Empty">
            <summary>
            Gets the empty.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.DoubleRange"/> struct.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.op_Addition(Syncfusion.Chart.DoubleRange,Syncfusion.Chart.DoubleRange)">
            <summary>
            Union operator
            </summary>
            <param name="leftRange">First double range</param>
            <param name="rightRange">Second double range</param>
            <returns>Returns DoubleRange.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.op_Addition(Syncfusion.Chart.DoubleRange,System.Double)">
            <summary>
            Union operator
            </summary>
            <param name="range">First double range</param>
            <param name="value">Second double range</param>
            <returns>Returns DoubleRange.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.op_GreaterThan(Syncfusion.Chart.DoubleRange,System.Double)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="range">The range.</param>
            <param name="value">The value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.op_LessThan(Syncfusion.Chart.DoubleRange,System.Double)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="range">The range.</param>
            <param name="value">The value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.op_GreaterThanOrEqual(Syncfusion.Chart.DoubleRange,System.Double)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="range">The range.</param>
            <param name="value">The value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.op_LessThanOrEqual(Syncfusion.Chart.DoubleRange,System.Double)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="range">The range.</param>
            <param name="value">The value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.op_Equality(Syncfusion.Chart.DoubleRange,Syncfusion.Chart.DoubleRange)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="leftRange">The left range.</param>
            <param name="rightRange">The right range.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.op_Inequality(Syncfusion.Chart.DoubleRange,Syncfusion.Chart.DoubleRange)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="leftRange">The left range.</param>
            <param name="rightRange">The right range.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.FromMedian(System.Double,System.Double)">
            <summary>
            Create the <see cref="T:Syncfusion.Chart.DoubleRange"/> from the median.
            </summary>
            <param name="median">The median.</param>
            <param name="size">The size.</param>
            <returns>Returns DoubleRange.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.Union(System.Double[])">
            <summary>
            Create range by array of double.
            </summary>
            <param name="values"></param>
            <returns>Returns DoubleRange.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.Union(Syncfusion.Chart.DoubleRange,Syncfusion.Chart.DoubleRange)">
            <summary>
            Unions the specified left range with right range.
            </summary>
            <param name="leftRange">The left range.</param>
            <param name="rightRange">The right range.</param>
            <returns>Returns DoubleRange.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.Union(Syncfusion.Chart.DoubleRange,System.Double)">
            <summary>
            Unions the specified range with value.
            </summary>
            <param name="range">The range.</param>
            <param name="value">The value.</param>
            <returns>Returns DoubleRange.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.Scale(Syncfusion.Chart.DoubleRange,System.Double)">
            <summary>
            Scales the specified range by value.
            </summary>
            <param name="range">The range.</param>
            <param name="value">The value.</param>
            <returns>Returns DoubleRange.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.Multiply(Syncfusion.Chart.DoubleRange,System.Double)">
            <summary>
            Multiplies the specified range by value.
            </summary>
            <param name="range">The range.</param>
            <param name="value">The value.</param>
            <returns>Returns DoubleRange.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.Inflate(Syncfusion.Chart.DoubleRange,System.Double)">
            <summary>
            Inflates the specified range.
            </summary>
            <param name="range">The range.</param>
            <param name="value">The value.</param>
            <returns>Returns DoubleRange.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.Offset(Syncfusion.Chart.DoubleRange,System.Double)">
            <summary>
            Offsets the specified range by value.
            </summary>
            <param name="range">The range.</param>
            <param name="value">The value.</param>
            <returns>Returns DoubleRange.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.Intersect(Syncfusion.Chart.DoubleRange,Syncfusion.Chart.DoubleRange)">
            <summary>
            Intersects the specified left range.
            </summary>
            <param name="leftRange">The left range.</param>
            <param name="rightRange">The right range.</param>
            <returns>Returns DoubleRange.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.Exclude(Syncfusion.Chart.DoubleRange,Syncfusion.Chart.DoubleRange,Syncfusion.Chart.DoubleRange@,Syncfusion.Chart.DoubleRange@)">
            <summary>
            Excludes the specified range.
            </summary>
            <param name="range">The range.</param>
            <param name="excluder">The excluder.</param>
            <param name="leftRange">The left range.</param>
            <param name="rightRange">The right range.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.IsIntersects(Syncfusion.Chart.DoubleRange)">
            <summary>
            Checks whether intersection region of two ranges is not empty.
            </summary>
            <param name="range"></param>
            <returns> <b>true</b> if  intersection is not empty</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.IsIntersects(System.Double,System.Double)">
            <summary>
            Checks whether intersection region of two ranges is not empty.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns> true if  intersection is not empty</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.Inside(System.Double)">
            <summary>
            Check the value whether it lies inside the end value or not.
            </summary>
            <param name="value">The value.</param>
            <returns>True if the ChartRanges is not Empty otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.Inside(System.Double,System.Boolean)">
            <summary>
            Insides the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="equal">if set to <c>true</c> value can be equal with range.</param>
            <returns>True if the ChartRanges is not Empty otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.Inside(Syncfusion.Chart.DoubleRange)">
            <summary>
            Insides the specified range.
            </summary>
            <param name="range">The range.</param>
            <returns>True if the ChartRanges is not Empty otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.Interpolate(System.Double)">
            <summary>
            Interpolates the specified value.
            </summary>
            <param name="interpolator">The interpolator.</param>
            <returns>Returns Double.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.Extrapolate(System.Double)">
            <summary>
            Extrapolates the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>Returns Double.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.DoubleRange.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartInstanceConverter">
            <summary>
            Default type converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartInstanceConverter.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Syncfusion.Chart.ChartInstanceConverter"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartInstanceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartInstanceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="T:Syncfusion.Chart.IndexRange">
            <summary>
            Specifies a range of indices.
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.IndexRange.From">
            <summary>
            Gets or sets the first index of range.
            </summary>
            <value>From.</value>
        </member>
        <member name="P:Syncfusion.Chart.IndexRange.To">
            <summary>
            Gets or sets the last index of range.
            </summary>
            <value>To.</value>
        </member>
        <member name="M:Syncfusion.Chart.IndexRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.IndexRange"/> class.
            </summary>
            <param name="from">The first index of range.</param>
            <param name="to">The lase index of range.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartMarginsConverter">
            <summary>
            Converts instances of other types to and from a <see cref="T:Syncfusion.Chart.ChartMargins"/>. 
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartMarginsConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartMarginsConverter"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartMarginsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMarginsConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMarginsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Syncfusion.Chart.ChartMarginsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="M:Syncfusion.Chart.ChartMarginsConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"></see> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"></see> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"></see> representing the given <see cref="T:System.Collections.IDictionary"></see>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMarginsConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"></see> to create a new value, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <returns>
            true if changing a property on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"></see> to create a new value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMarginsConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"></see> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that are exposed for this data type, or null if there are no properties.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMarginsConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"></see> should be called to find the properties of this object; otherwise, false.
            </returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartMargins">
            <summary>
            Describes the margins of a frame around a rectangle. 
            Four float values describe the Left, Top, Right, and Bottom sides of the rectangle, respectively. 
            </summary>
            <internalonly/>
        </member>
        <member name="E:Syncfusion.Chart.ChartMargins.Changed">
            <summary>
            An event that is triggered when margin properties are changed.
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartMargins.Top">
            <summary>
            Gets or sets the top value of margin.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.ChartMargins.Left">
            <summary>
            Gets or sets the left value of margin.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.ChartMargins.Bottom">
            <summary>
            Gets or sets the bottom value of margin.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Chart.ChartMargins.Right">
            <summary>
            Gets or sets the right value of margin.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Chart.ChartMargins.#ctor">
            <summary>
            Overloaded constructor. Creates a new <see cref="T:Syncfusion.Chart.ChartMargins"/> instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartMargins.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Syncfusion.Chart.ChartMargins"/> instance.
            </summary>
            <param name="top">Top.</param>
            <param name="left">Left.</param>
            <param name="bottom">Bottom.</param>
            <param name="right">Right.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartMargins.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMargins.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMargins.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMargins.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMargins.OnChanged">
            <summary>
            Called when properties is changed.
            </summary>
            <internalonly/>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Chart.ChartThicknessConverter">
            <summary>
            Converts instances of other types to and from a <see cref="T:Syncfusion.Chart.ChartThickness"/>. 
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartThicknessConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThicknessConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThicknessConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThicknessConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThicknessConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThicknessConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThicknessConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThicknessConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartThickness">
            <summary>
            Describes the thickness of a frame around a rectangle. 
            Four float values describe the Left, Top, Right, and Bottom sides of the rectangle, respectively. 
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartThickness.Left">
            <summary>
            Gets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartThickness.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartThickness.Right">
            <summary>
            Gets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartThickness.Bottom">
            <summary>
            Gets the bottom.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartThickness.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartThickness"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartThickness.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartThickness"/> class.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartThickness.op_Equality(Syncfusion.Chart.ChartThickness,Syncfusion.Chart.ChartThickness)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThickness.op_Inequality(Syncfusion.Chart.ChartThickness,Syncfusion.Chart.ChartThickness)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThickness.Add(Syncfusion.Chart.ChartThickness,Syncfusion.Chart.ChartThickness)">
            <summary>
            Adds the specified x to the specified y.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThickness.Inflate(Syncfusion.Drawing.Rectangle)">
            <summary>
            Inflates the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThickness.Inflate(Syncfusion.Drawing.Size)">
            <summary>
            Inflates the specified size.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThickness.Inflate(Syncfusion.Drawing.RectangleF)">
            <summary>
            Inflates the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThickness.Inflate(Syncfusion.Drawing.SizeF)">
            <summary>
            Inflates the specified size.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThickness.Deflate(Syncfusion.Drawing.Rectangle)">
            <summary>
            Deflates the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThickness.Deflate(Syncfusion.Drawing.RectangleF)">
            <summary>
            Deflates the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThickness.Deflate(Syncfusion.Drawing.Size)">
            <summary>
            Deflates the specified size.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThickness.Deflate(Syncfusion.Drawing.SizeF)">
            <summary>
            Deflates the specified size.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThickness.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThickness.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThickness.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartThickness.Parse(System.String)">
            <summary>
            Parses the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartYValueUsage">
            <summary>
            Specifies the usege of Y values.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartYValueUsage.None">
            <summary>
            Point value will not used.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartYValueUsage.YValue">
            <summary>
            This value used Y value for types like Line, Spline, Column...
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartYValueUsage.LowValue">
            <summary>
            This value used as low value for types like HiLo, Range...
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartYValueUsage.HighValue">
            <summary>
            This value used as high value for types like HiLo, Range...
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartYValueUsage.OpenValue">
            <summary>
            This value used as open value for types like HiLoOpenClose, Candle...
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartYValueUsage.CloseValue">
            <summary>
            This value used as close value for types like HiLoOpenClose, Candle...
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartYValueUsage.ErrorBarValue">
            <summary>
            This value used as error bar value for types like Column, Line...
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartYValueUsage.PointSizeValue">
            <summary>
            This value used as size value for types like Column, Bubble...
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartPointFormatsRegistry">
            <summary>
            Specifies the registry of 
            </summary>
        </member>
        <member name="T:Syncfusion.Chart.ChartPointFormatsRegistry.ChartPointFormat">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointFormatsRegistry.ChartPointFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPointFormatsRegistry.ChartPointFormat"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointFormatsRegistry.ChartPointFormat.#ctor(Syncfusion.Chart.ChartYValueUsage[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPointFormatsRegistry.ChartPointFormat"/> class.
            </summary>
            <param name="usages">The usages.</param>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointFormatsRegistry.Item(Syncfusion.Chart.ChartSeriesType,Syncfusion.Chart.ChartYValueUsage)">
            <summary>
            Gets the index of necessary value with the specified type.
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointFormatsRegistry.Item(Syncfusion.Chart.ChartYValueUsage)">
            <summary>
            Gets the index of necessary value.
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Chart.ChartPointFormatsRegistry.YIndex">
            <summary>
            Gets the index of the Y value.
            </summary>
            <value>The index of the Y value.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointFormatsRegistry.#cctor">
            <summary>
            Initializes the <see cref="T:Syncfusion.Chart.ChartPointFormatsRegistry"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointFormatsRegistry.#ctor(Syncfusion.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartPointFormatsRegistry"/> class.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointFormatsRegistry.Dispose">
            <summary>
            Method to dispose ChartPointFormatsRegistry object
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointFormatsRegistry.Register(Syncfusion.Chart.ChartSeriesType,Syncfusion.Chart.ChartYValueUsage[])">
            <summary>
            Registers the points format for the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="usages">The usages.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPointFormatsRegistry.OnSeriesTypeChanged(Syncfusion.Chart.ChartSeriesType)">
            <summary>
            Called when series type changed.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartZooming">
            <summary>
            This class contains appearance information of interactive zooming.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartZooming.Opacity">
            <summary>
            Gets or sets the opacity of zooming selection.
            </summary>
            <value>The opacity.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartZooming.ShowBorder">
            <summary>
            Gets or sets a value indicating whether border is shown.
            </summary>
            <value><c>true</c> if border is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartZooming.Border">
            <summary>
            Gets or sets the information on line drawn during interactive zooming.
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartZooming.Interior">
            <summary>
            Gets or sets the interior of zooming selection.
            </summary>
            <value>The <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> instance.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartZooming.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Chart.ChartZooming"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartZooming.ShouldSerializeInterior">
            <summary>
            Should the serialize interior.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartCMYKColor">
            <summary>
            Describes the CMYK color.
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Chart.ChartCMYKColor.C">
            <summary>
            Gets the C component of color.
            </summary>
            <value>The C component.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartCMYKColor.M">
            <summary>
            Gets the M component of color.
            </summary>
            <value>The M component.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartCMYKColor.Y">
            <summary>
            Gets the Y component of color.
            </summary>
            <value>The Y component.</value>
        </member>
        <member name="P:Syncfusion.Chart.ChartCMYKColor.K">
            <summary>
            Gets the K component of color.
            </summary>
            <value>The K component.</value>
        </member>
        <member name="M:Syncfusion.Chart.ChartCMYKColor.ToRGBColor">
            <summary>
            Converts the CMYK color of the RGB.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartCMYKColor.FromRBG(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates the CMYK color by the RBG components.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartCMYKColor.FromCMYK(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates the CMYK color by the CMYK components.
            </summary>
            <param name="c">The C component.</param>
            <param name="m">The M component.</param>
            <param name="y">The Y component.</param>
            <param name="k">The K component.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartCMYKColor.ConvertRGBToCMYK(Syncfusion.Drawing.Color)">
            <summary>
            Converts the RGB to CMYK color.
            </summary>
            <param name="rgbColor">Color of the RGB.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartCMYKColor.ConvertCMYKToRGB(Syncfusion.Chart.ChartCMYKColor)">
            <summary>
            Converts the CMYK to RGB color.
            </summary>
            <param name="cmykColor">Color of the cmyk.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.RenderingHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawPointSymbol(Syncfusion.Chart.ChartGraph,Syncfusion.Chart.ChartStyleInfo,Syncfusion.Drawing.PointF)">
            <summary>
            Draws the point symbol.
            </summary>
            <param name="graph">The graph.</param>
            <param name="style">The style.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawPointSymbol(Syncfusion.Chart.ChartGraph,Syncfusion.Chart.ChartSymbolShape,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen,System.Int32,Syncfusion.Chart.ChartImageCollection,Syncfusion.Drawing.PointF,Syncfusion.Drawing.SizeF)">
            <summary>
            Draws the point symbol.
            </summary>
            <param name="graph">The graph.</param>
            <param name="shape">The shape.</param>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
            <param name="imgIndex">Index of the img.</param>
            <param name="images">The images.</param>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawMarker(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartMarker,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Draws the marker.
            </summary>
            <param name="g">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="marker">The marker.</param>
            <param name="p2">The p2.</param>
            <param name="p1">The p1.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawRelatedPointSymbol(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartRelatedPointSymbolInfo,Syncfusion.Chart.ChartRelatedPointLineInfo,Syncfusion.Chart.ChartImageCollection,Syncfusion.Drawing.PointF)">
            <summary>
            Draws the related point symbol.
            </summary>
            <param name="g">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="symbol">The symbol.</param>
            <param name="border">The border.</param>
            <param name="imgList">The img list.</param>
            <param name="pt">The pt.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawPointSymbol(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartStyleInfo,Syncfusion.Drawing.PointF,System.Boolean)">
            <summary>
            Draws the point symbol.
            </summary>
            <param name="g">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="style">The style.</param>
            <param name="pt">The pt.</param>
            <param name="drawMarker">if set to <c>true</c> marker will be drawn.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawPointSymbol(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartStyleInfo,Syncfusion.Drawing.PointF,System.Boolean,Syncfusion.Chart.Drawing.BrushInfo)">
            <summary>
            Draws the point symbol.
            </summary>
            <param name="g">The graphics object.</param>
            <param name="style">The style.</param>
            <param name="pt">The point.</param>
            <param name="drawMarker">if set to <c>true</c> [draw marker].</param>
            <param name="brushInfo">The brush info.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawPointSymbol(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartSymbolShape,Syncfusion.Chart.ChartMarker,Syncfusion.Drawing.Size,Syncfusion.Drawing.Size,System.Int32,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Chart.ChartImageCollection,Syncfusion.Drawing.PointF,System.Boolean)">
            <summary>
            Draws the point symbol.
            </summary>
            <param name="g">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <param name="symbolShape">The symbol shape.</param>
            <param name="symbolMarker">The symbol marker.</param>
            <param name="symbolSize">Size of the symbol.</param>
            <param name="symbolOffset">The symbol offset.</param>
            <param name="symbolImageIndex">Index of the symbol image.</param>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
            <param name="images">The images.</param>
            <param name="pt">The pt.</param>
            <param name="drawMarker">if set to <c>true</c> marker will be drawn.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawPointSymbol(Syncfusion.Chart.ChartGraph,Syncfusion.Chart.ChartSymbolShape,Syncfusion.Chart.ChartMarker,Syncfusion.Drawing.Size,Syncfusion.Drawing.Size,System.Int32,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Chart.ChartImageCollection,Syncfusion.Drawing.PointF,System.Boolean)">
            <summary>
            Draws the point symbol.
            </summary>
            <param name="graph">The graphics.</param>
            <param name="symbolShape">The symbol shape.</param>
            <param name="symbolMarker">The symbol marker.</param>
            <param name="symbolSize">Size of the symbol.</param>
            <param name="symbolOffset">The symbol offset.</param>
            <param name="imgIndex">Index of the img.</param>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
            <param name="images">The images.</param>
            <param name="point">The point.</param>
            <param name="drawMarker">if set to <c>true</c> marker will be drawn.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawImage(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.Image)">
            <summary>
            Draw Image symbol.
            </summary>
            <param name="g">The grapics.</param>
            <param name="bounds">Rectangle bound of the Symbol.</param>        
            <param name="image">The image.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawCircle(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Draw Circle symbol.
            </summary>
            <param name="g">The grapics.</param>
            <param name="bounds">Rectangle bound of the Symbol.</param>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawPlus(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.SkiaSharpHelper.Brush)">
            <summary>
            Draw Plus Line symbol.
            </summary>
            <param name="g">The grapics.</param>
            <param name="bounds">Rectangle bound of the Symbol.</param>
            <param name="brush">The brush.</param>        
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawCross(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.SkiaSharpHelper.Brush)">
            <summary>
            Draw Cross Line symbol.
            </summary>
            <param name="g">The grapics.</param>
            <param name="bounds">Rectangle bound of the Symbol.</param>
            <param name="brush">The brush.</param>        
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawExcelStar(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.SkiaSharpHelper.Brush)">
            <summary>
            Draw ExcelStar Line symbol.
            </summary>
            <param name="g">The grapics.</param>
            <param name="bounds">Rectangle bound of the Symbol.</param>
            <param name="brush">The brush.</param>        
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawHorizLine(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.SkiaSharpHelper.Brush)">
            <summary>
            Draw Horizontal Line symbol.
            </summary>
            <param name="g">The grapics.</param>
            <param name="bounds">Rectangle bound of the Symbol.</param>
            <param name="brush">The brush.</param>        
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawDowJonesLine(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.SkiaSharpHelper.Brush)">
            <summary>
            Draw Horizontal Line symbol.
            </summary>
            <param name="g">The grapics.</param>
            <param name="bounds">Rectangle bound of the Symbol.</param>
            <param name="brush">The brush.</param>        
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawVertLine(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Brush)">
            <summary>
            Draw Vertical Line symbol.
            </summary>
            <param name="g">The grapics.</param>
            <param name="bounds">Rectangle bound of the Symbol.</param>
            <param name="brush">The brush.</param>        
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawDiamond(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Draw Diamond symbol.
            </summary>
            <param name="g">The grapics.</param>
            <param name="bounds">Rectangle bound of the Symbol.</param>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawHexagon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Draw Hexagon symbol.
            </summary>
            <param name="g">The grapics.</param>
            <param name="bounds">Rectangle bound of the Symbol.</param>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawInvertedTriangle(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Draw inverted triangle symbol.
            </summary>
            <param name="g">The grapics.</param>
            <param name="bounds">Rectangle bound of the Symbol.</param>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawArrow(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Draw Arrow symbol.
            </summary>
            <param name="g">The grapics.</param>
            <param name="bounds">Rectangle bound of the Symbol.</param>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawInvertedArrow(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Draw Inverted Arrow symbol.
            </summary>
            <param name="g">The grapics.</param>
            <param name="bounds">Rectangle bound of the Symbol.</param>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawPentagon(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Draw Pentagon symbol.
            </summary>
            <param name="g">The grapics.</param>
            <param name="bounds">Rectangle bound of the Symbol.</param>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawStar(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Draw Star symbol.
            </summary>
            <param name="g">The grapics.</param>
            <param name="bounds">Rectangle bound of the Symbol.</param>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawSquare(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Draw Square symbol.
            </summary>
            <param name="g">The grapics.</param>
            <param name="bounds">Rectangle bound of the Symbol.</param>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawTriangle(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Draw Triangle Arrow symbol.
            </summary>
            <param name="g">The grapics.</param>
            <param name="bounds">Rectangle bound of the Symbol.</param>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawText(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartStyleInfo,Syncfusion.Drawing.PointF)">
            <summary>
            Draw text.
            </summary>
            <param name="g">The graphics.</param>
            <param name="style">Style of the text.</param>
            <param name="pt">The point.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.DrawText(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartStyleInfo,Syncfusion.Drawing.PointF,Syncfusion.Drawing.SizeF)">
            <summary>
            Draw text.
            </summary>
            <param name="g">The graphics.</param>
            <param name="style">Style of the text.</param>
            <param name="pt">The point.</param>
            <param name="sz">The size.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.AddTextPath(Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.StringFormat)">
            <summary>
            Adds the text path.
            </summary>
            <param name="gp">The gp.</param>
            <param name="g">The g.</param>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="rect">The rect.</param>
            <param name="strFormat">The STR format.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.AddTextPath(Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.RectangleF)">
            <summary>
            Adds the text gepmetry to <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath"/>.
            </summary>
            <param name="gp">The gp.</param>
            <param name="g">The g.</param>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="rect">The rect.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.GetFontSizeInPixels(Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Gets the font size in pixels.
            </summary>
            <param name="font">The font.</param>
            <param name="g">The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.Graphics"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.GetFontSizeInPixels(Syncfusion.Drawing.Font)">
            <summary>
            Gets the font size in pixels.
            </summary>
            <param name="font">The font.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.GetBounds(System.Int32,System.Int32,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the bounds.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="bounds">The bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.GetPieBounds(System.Int32,System.Int32,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the individual pie bounds.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="bounds">The bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.GetPieBounds(System.Int32,System.Int32,Syncfusion.Drawing.RectangleF,System.Double)">
            <summary>
            Gets the individual pie bounds.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="bounds">The bounds.</param>
            <param name="coeff">Doughnut Coefficient value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.CreateRoundRect(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SizeF)">
            <summary>
            Returns the <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath"/> by the specified rectangle.
            </summary>
            <param name="rect"><see cref="T:Syncfusion.Drawing.RectangleF"/> specified rectanle.</param>
            <param name="roundCorner">The radius of corners.</param>
            <returns>The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath"/>.</returns>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.CreateRoundRect(Syncfusion.Drawing.RectangleF,System.Single)">
            <summary>
            Returns the <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath"/> by the specified rectangle.
            </summary>
            <param name="rect"><see cref="T:Syncfusion.Drawing.RectangleF"/> specified rectanle.</param>
            <param name="radius">The radius.</param>
            <returns>The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath"/>.</returns>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.CreateRoundRect(Syncfusion.Drawing.RectangleF,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath"/> by the specified rectangle.
            </summary>
            <param name="rect"><see cref="T:Syncfusion.Drawing.RectangleF"/> specified rectanle.</param>
            <param name="tlRadius">The tl radius.</param>
            <param name="trRadius">The tr radius.</param>
            <param name="brRadius">The br radius.</param>
            <param name="blRadius">The bl radius.</param>
            <returns>The <see cref="T:Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath"/>.</returns>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.GetRendomBeziersPoints(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Gets the rendom beziers points.
            </summary>
            <param name="pt1">The PT1.</param>
            <param name="pt2">The PT2.</param>
            <param name="evr">The evr.</param>
            <param name="fault">The fault.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.GetRendomBeziersPoints(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Int32,System.Single)">
            <summary>
            Gets the rendom beziers points.
            </summary>
            <param name="pt1">The PT1.</param>
            <param name="pt2">The PT2.</param>
            <param name="count">The count.</param>
            <param name="fault">The fault.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.GetWaveBeziersPoints(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Gets the rendom beziers points.
            </summary>
            <param name="pt1">The PT1.</param>
            <param name="pt2">The PT2.</param>
            <param name="evr">The evr.</param>
            <param name="fault">The fault.</param>
        </member>
        <member name="M:Syncfusion.Chart.RenderingHelper.GetWaveBeziersPoints(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Int32,System.Single)">
            <summary>
            Gets the rendom beziers points.
            </summary>
            <param name="pt1">The PT1.</param>
            <param name="pt2">The PT2.</param>
            <param name="count">The count.</param>
            <param name="fault">The fault.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.DrawingHelper">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.DrawingHelper.CenteredFormat">
            <summary>
            Gets the centered format.
            </summary>
            <value>The centered format.</value>
        </member>
        <member name="M:Syncfusion.Chart.DrawingHelper.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.DrawingHelper.LeprColor(Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,System.Double)">
            <summary>
            Interpolates the colors.
            </summary>
            <param name="startColor">The start color.</param>
            <param name="endColor">The end color.</param>
            <param name="interpolator">The interpolator.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.DrawingHelper.ChangeBackColor(Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.Color)">
            <summary>
            Clones the specified <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> and changes <see cref="P:Syncfusion.Chart.Drawing.BrushInfo.BackColor"/> property by specified color.
            </summary>
            <param name="brInfo">Source of result.</param>
            <param name="color">Specified color for <see cref="P:Syncfusion.Chart.Drawing.BrushInfo.BackColor"/> property.</param>
            <returns>Cloned specified <see cref="T:Syncfusion.Chart.Drawing.BrushInfo"/> with the changed <see cref="P:Syncfusion.Chart.Drawing.BrushInfo.BackColor"/>.</returns>
        </member>
        <member name="M:Syncfusion.Chart.DrawingHelper.AddColor(Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="brInfo"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.DrawingHelper.AddColor(Syncfusion.Drawing.Color,Syncfusion.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="color1"></param>
            <param name="color2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.DrawingHelper.AddColor(Syncfusion.Chart.Drawing.BrushInfo,System.Int32)">
            <summary>
            
            </summary>
            <param name="brInfo"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.DrawingHelper.AddColor(Syncfusion.Drawing.Color,System.Int32)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.DrawingHelper.MedialColor(Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="brInfo"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.DrawingHelper.MedialColor(Syncfusion.Drawing.Color,Syncfusion.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="color1"></param>
            <param name="color2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.DrawingHelper.GetColorFromARGB(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.DrawingHelper.DrawBorder(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Color,System.Int32,Syncfusion.Drawing.Rectangle,Syncfusion.Chart.BorderStyle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="color"></param>
            <param name="width"></param>
            <param name="rect"></param>
            <param name="borderStyle"></param>
        </member>
        <member name="M:Syncfusion.Chart.DrawingHelper.BeginTransform(Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.DrawingHelper.EndTransform(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.SkiaSharpHelper.GraphicsContainer)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="cont"></param>
        </member>
        <member name="M:Syncfusion.Chart.DrawingHelper.DrawRectangleF(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.RectangleF)">
            <summary>
            Draws  rectangle with given <see cref="!:System.Drawing.Pen"/>.
            </summary>
            <param name="g">The <see cref="!:System.Drawing.Graphics"/> to render rectangle.</param>
            <param name="p">The <see cref="!:System.Drawing.Pen"/> to draw rectangle.</param>
            <param name="rect">Rectangle bounds to draw.</param>
        </member>
        <member name="M:Syncfusion.Chart.DrawingHelper.EllipsesText(Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.String,Syncfusion.Drawing.Font,System.Single)">
            <summary>
            Shortens the text.
            </summary>
            <param name="g">The graphics</param>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="width">The width.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartSymbolHelper">
            <summary>
            Represents the methods for creation of symbols geometry.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetBrushItem(Syncfusion.Chart.Drawing.BrushInfo,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the brush for specified BrushInfo instance
            </summary>
            <param name="info"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.DrawPointSymbol(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartStyleInfo,Syncfusion.Drawing.Point)">
            <summary>
            Draws the symbol with specified style at specified location
            </summary>
            <param name="g">Graphics instance</param>
            <param name="info">Style information for the symbol</param>
            <param name="location">Location of the symbol</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.FillAndDrawSymbol(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartSymbolShape,Syncfusion.Drawing.Rectangle,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.SkiaSharpHelper.Brush)">
            <summary>
            Draw filled <see cref="!:Syncfusion.Windows.Forms.Chart.ChartSymbolShape"/> with its border.
            </summary>
            <param name="g">The <see cref="!:System.Drawing.Graphics"/> to render shape.</param>
            <param name="symbol">The <see cref="!:Syncfusion.Windows.Forms.Chart.ChartSymbolShape"/> to render.</param>
            <param name="bounds">The bounds of the shape.</param>
            <param name="pen">The <see cref="!:System.Drawing.Pen"/> to draw shape border.</param>
            <param name="brush">The <see cref="!:System.Drawing.Brush"/> to fill symbol.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.DrawSymbol(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartSymbolShape,Syncfusion.Drawing.Rectangle,Syncfusion.Drawing.SkiaSharpHelper.Pen)">
            <summary>
            Draw <see cref="!:Syncfusion.Windows.Forms.Chart.ChartSymbolShape"/>.
            </summary>
            <param name="g">The <see cref="!:System.Drawing.Graphics"/> to render shape.</param>
            <param name="symbol">The <see cref="!:Syncfusion.Windows.Forms.Chart.ChartSymbolShape"/> to render.</param>
            <param name="bounds">The bounds of the shape.</param>
            <param name="pen">The <see cref="!:System.Drawing.Pen"/> to draw shape.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.FillSymbol(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Chart.ChartSymbolShape,Syncfusion.Drawing.Rectangle,Syncfusion.Drawing.SkiaSharpHelper.Brush)">
            <summary>
            Draw filled <see cref="!:Syncfusion.Windows.Forms.Chart.ChartSymbolShape"/>.
            </summary>
            <param name="g">The <see cref="!:System.Drawing.Graphics"/> to render symbol.</param>
            <param name="symbol">The symbol to render.</param>
            <param name="bounds">The bounds to render symbol.</param>
            <param name="brush">The <see cref="!:System.Drawing.Brush"/> to fill the symbol.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetPathSymbol(Syncfusion.Chart.ChartSymbolShape,Syncfusion.Drawing.Rectangle)">
            <summary>
            Creates symbol path for given shape.  
            </summary>
            <param name="symbol"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetPathCircle(Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates circle path for given rectangle.
            </summary>
            <param name="bounds">The rectangle to create path.</param>
            <returns>Circle path.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetPathDiamond(Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates diamond path for given rectangle.
            </summary>
            <param name="bounds">The rectangle to create diamond path.</param>
            <returns>Diamond path.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetPathSquare(Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates square <see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> for given rectangle.
            </summary>
            <param name="bounds">The rectangle to create path.</param>
            <returns>Square path.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetPathTriangle(Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates triangle <see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> for given rectangle.
            </summary>
            <param name="bounds">The bounds of the path.</param>
            <returns>Triangle path.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetPathInvertedTriangle(Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates inverted triangle <see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> for given rectangle.
            </summary>
            <param name="bounds">Bounds of the path.</param>
            <returns>Inverted triangle path.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetPathArrow(Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates Arrow <see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> for given rectangle.
            </summary>
            <param name="bounds">Bounds of the path.</param>
            <returns>Arrow path.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetPathInvertedArrow(Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates inverted arrow <see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> for given rectangle.
            </summary>
            <param name="bounds">Bounds of the path.</param>
            <returns>Inverted arrow path.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetPathHexagon(Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates hexagon <see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> for given rectangle.
            </summary>
            <param name="bounds">The bounds of the hexagon path.</param>
            <returns>Hexagon path.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetPathPentagon(Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates pentagon <see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> for given rectangle.
            </summary>
            <param name="bounds">The bounds of the path.</param>
            <returns>Pentagon path.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetPathPlus(Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates cross <see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> for given rectangle.
            </summary>
            <param name="bounds">The bounds of the path.</param>
            <returns>Plus path.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetPathCross(Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates cross <see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> for given rectangle.
            </summary>
            <param name="bounds">The bounds of the path.</param>
            <returns>Cross path.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetPathExcelStar(Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates Excel Star <see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> for given rectangle.
            </summary>
            <param name="bounds">The bounds of the path.</param>
            <returns>Cross path.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetPathStar(Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates star <see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> for given rectangle.
            </summary>
            <param name="bounds">The bounds of the path.</param>
            <returns>Star path.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetPathHorizLine(Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates horizontal line <see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> for given rectangle.
            </summary>
            <param name="bounds">The bounds of the path.</param>
            <returns>Horizontal line path.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetPathDowJonesLine(Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates horizontal line <see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> for given rectangle.
            </summary>
            <param name="bounds">The bounds of the path.</param>
            <returns>Horizontal line path.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartSymbolHelper.GetPathVertLine(Syncfusion.Drawing.RectangleF)">
            <summary>
            Creates vertical line <see cref="!:System.Drawing.Drawing2D.GraphicsPath"/> for given rectangle.
            </summary>
            <param name="bounds">The bounds of the path.</param>
            <returns>Vertical line path.</returns>
        </member>
        <member name="T:Syncfusion.Chart.LayoutHelper">
            <summary>
            Contains the layout methods.
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.LayoutHelper.AlignRectangle(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SizeF,Syncfusion.Drawing.SkiaSharpHelper.ContentAlignment)">
            <summary>
            Aligns the rectangle.
            </summary>
            <param name="bounds">The bounds area.</param>
            <param name="size">The size rectangle.</param>
            <param name="alignment">The alignment.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.LayoutHelper.AlignRectangle(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SizeF,Syncfusion.Chart.ChartAlignment,Syncfusion.Chart.ChartAlignment)">
            <summary>
            Aligns the rectangle.
            </summary>
            <param name="bounds">The bounds area.</param>
            <param name="size">The size rectangle.</param>
            <param name="horizontal">The horizontal alignment.</param>
            <param name="vertical">The vertical alignment.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.LayoutHelper.AlignRectangle(Syncfusion.Drawing.PointF,Syncfusion.Drawing.SizeF,Syncfusion.Drawing.SkiaSharpHelper.ContentAlignment)">
            <summary>
            Aligns the rectangle.
            </summary>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
            <param name="alignment">The alignment.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.LayoutHelper.AlignRectangle(Syncfusion.Drawing.PointF,Syncfusion.Drawing.SizeF,Syncfusion.Chart.ChartAlignment,Syncfusion.Chart.ChartAlignment)">
            <summary>
            Aligns the rectangle.
            </summary>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
            <param name="horizontal">The horizontal alignment.</param>
            <param name="vertical">The vertical alignment.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Chart.ChartMath">
            <summary>
            Provides constants and static methods for mathematical functions.
            </summary>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Chart.ChartMath.ToRadians">
            <summary>
            A ratio of radials to degrees.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartMath.ToDegrees">
            <summary>
            A ratio of degrees to radials.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartMath.DblPI">
            <summary>
            A double PI.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartMath.HlfPI">
            <summary>
            A half of PI.
            </summary>
        </member>
        <member name="F:Syncfusion.Chart.ChartMath.Epsilon">
            <summary>
            A the minimal value of <see cref="T:System.Double"/> (magical number).
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.ModAngle(System.Double,System.Double)">
            <summary>
            Mods the angle.
            </summary>
            <param name="angle">The angle.</param>
            <param name="modAngle">The mod angle.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.Round(System.Double,System.Double)">
            <summary>
            Rounds the specified value.
            </summary>
            <param name="value">The value to round.</param>
            <param name="div">The div.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.Round(System.Double,System.Double,System.Boolean)">
            <summary>
            Rounds the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="div">The div.</param>
            <param name="up">if set to <c>true</c> value will be rounded to greater value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.GetTwoClosestPoints(System.Double[],System.Double,System.Int32@,System.Int32@)">
            <summary>
            Gets the indices of two closest points by the specified value.
            </summary>
            <param name="xs">The array of double.</param>
            <param name="point">The specified value.</param>
            <param name="index1">The index of first point.</param>
            <param name="index2">The index of second point.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartMath.DoubleFunc">
            <summary>
            Represents the methods of double function.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.Bisection(Syncfusion.Chart.ChartMath.DoubleFunc,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Computes the bisections by the specified function.
            </summary>
            <param name="fnc">The function handler.</param>
            <param name="x1">The x1.</param>
            <param name="x2">The x2.</param>
            <param name="xAccuracy">The x accuracy.</param>
            <param name="maxIterationCount">The max iteration count.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.SmartBisection(Syncfusion.Chart.ChartMath.DoubleFunc,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Computes the bisections by the specified function.
            </summary>
            <param name="fnc">The function handler.</param>
            <param name="x1">The x1.</param>
            <param name="x2">The x2.</param>
            <param name="xAccuracy">The x accuracy.</param>
            <param name="maxIterationCount">The max iteration count.</param>
            <param name="tabulCount">The table count.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.LineSegmentIntersectionPoint(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Computes the point of lines intersection.
            </summary>
            <param name="a">The start point of first line.</param>
            <param name="b">The end point of first line.</param>
            <param name="c">The start point of second line.</param>
            <param name="d">The end point of second line.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.Determinant(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Computes the determinant by the specified matrix.
            </summary>
            <param name="p1">The first row of matrix.</param>
            <param name="p2">The second row of matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.RectanlgeIntersectsWithLine(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Indicates whether specified rectangle is intersects with the line.
            </summary>
            <param name="r">The rectangle.</param>
            <param name="a">The start of line.</param>
            <param name="b">The end of line.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.RectangleIntersectsWithLine(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Indicates whether specified rectangle is intersects with the line.
            </summary>
            <param name="r">The rectangle.</param>
            <param name="a">The start of line.</param>
            <param name="b">The end of line.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.MinMax(System.Double,System.Double,System.Double)">
            <summary>
            Checks whether specified value is inside of specified range.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimal value.</param>
            <param name="max">The maximal value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.MinMax(System.Single,System.Single,System.Single)">
            <summary>
            Checks whether specified value is inside of specified range.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimal value.</param>
            <param name="max">The maximal value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.MinMax(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks whether specified value is inside of specified range.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimal value.</param>
            <param name="max">The maximal value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.MinMax(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Mins the max.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.Min(System.Double[])">
            <summary>
            Returns the minimal value from array.
            </summary>
            <param name="values">The array of values.</param>
            <returns>The minimal value.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.Max(System.Double[])">
            <summary>
            Returns the maximal value from array.
            </summary>
            <param name="values">The array of values.</param>
            <returns>The maximal value.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.RotatedRectangleBounds(Syncfusion.Drawing.RectangleF,System.Double)">
            <summary>
            Compute the bounds of rotated rectangle.
            </summary>
            <param name="r">The rectangle.</param>
            <param name="angle">The rotation angle.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.LeftCenterRotatedRectangleBounds(Syncfusion.Drawing.RectangleF,System.Double)">
            <summary>
            Compute the bounds of left-center rotated rectangle.
            </summary>
            <param name="r">The rectangle.</param>
            <param name="angle">The rotation angle.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.CenterRotatedRectangleBounds(Syncfusion.Drawing.RectangleF,System.Double)">
            <summary>
            Compute the bounds of center rotated rectangle.
            </summary>
            <param name="r">The rectangle.</param>
            <param name="angle">The rotation angle.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.DistanceBetweenPoints(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Calculates distance between two points.
            </summary>
            <param name="p1">The point to calculate distance from.</param>
            <param name="p2">The point to calculate distance to.</param>
            <returns>Distance between to point.</returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.GetPointByAngle(Syncfusion.Drawing.RectangleF,System.Double,System.Boolean)">
            <summary>
            Gets the point by angle.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="isCircle">if set to <c>true</c> [is circle].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.GetRectByCenter(Syncfusion.Drawing.PointF,Syncfusion.Drawing.SizeF)">
            <summary>
            Creates the <see cref="T:Syncfusion.Drawing.RectangleF"/> by specified center and radius.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.GetCenter(Syncfusion.Drawing.RectangleF)">
            <summary>
            Returns the center of specified rectangle.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.GetRadius(Syncfusion.Drawing.RectangleF)">
            <summary>
            Returns the half size of rectangle.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.CorrectRect(Syncfusion.Drawing.RectangleF)">
            <summary>
            Corrects the size of the specified rectangle.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.CorrectRect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates the <see cref="T:Syncfusion.Drawing.RectangleF"/> by the specified points and corrects the size.
            </summary>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.AddPoint(Syncfusion.Drawing.PointF,Syncfusion.Drawing.SizeF)">
            <summary>
            Translates a given <see cref="T:Syncfusion.Drawing.PointF"/> by a specified <see cref="T:Syncfusion.Drawing.SizeF"/>.
            </summary>
            <param name="pt">The point.</param>
            <param name="sz">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.AddPoint(Syncfusion.Drawing.PointF,Syncfusion.Drawing.Size)">
            <summary>
            Translates a given <see cref="T:Syncfusion.Drawing.PointF"/> by a specified <see cref="T:Syncfusion.Drawing.Size"/>.
            </summary>
            <param name="pt">The point.</param>
            <param name="sz">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.GetNormal(Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D,Syncfusion.Chart.Vector3D)">
            <summary>
            Gets the normal.
            </summary>
            <param name="v1">The start point of plane.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.SolveQuadraticEquation(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            solves quadratic equation in form a*x^2 + b*x + c = 0
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="root1"></param>
            <param name="root2"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.SolveQuadraticEquation(System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            solves quadratic equation in form a*x^2 + b*x + c = 0
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="root1"></param>
            <param name="root2"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.InterpolateBezier(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Int32)">
            <summary>
            Interpolates the bezier.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.SplitBezierCurve(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Single,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@)">
            <summary>
            Splits the bezier curve.
            </summary>
            <param name="p0">The start point of curve.</param>
            <param name="p1">The first control point.</param>
            <param name="p2">The second control point.</param>
            <param name="p3">The end point of curve.</param>
            <param name="t0">The interpolator.</param>
            <param name="pb0">The start point of first output curve.</param>
            <param name="pb1">The first control point of first output curve.</param>
            <param name="pb2">The second control point of first output curve.</param>
            <param name="pb3">The end point of first output curve.</param>
            <param name="pe0">The start point of second output curve.</param>
            <param name="pe1">The first control point of second output curve.</param>
            <param name="pe2">The second control point of second output curve.</param>
            <param name="pe3">The end point of second output curve.</param>
        </member>
        <member name="M:Syncfusion.Chart.ChartMath.SplitBezierCurve(Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartPoint,Syncfusion.Chart.ChartPoint,System.Double,Syncfusion.Chart.ChartPoint@,Syncfusion.Chart.ChartPoint@,Syncfusion.Chart.ChartPoint@,Syncfusion.Chart.ChartPoint@,Syncfusion.Chart.ChartPoint@,Syncfusion.Chart.ChartPoint@,Syncfusion.Chart.ChartPoint@,Syncfusion.Chart.ChartPoint@)">
            <summary>
            Splits the bezier curve.
            </summary>
            <param name="p0">The start point of curve.</param>
            <param name="p1">The first control point.</param>
            <param name="p2">The second control point.</param>
            <param name="p3">The end point of curve.</param>
            <param name="t0">The interpolator.</param>
            <param name="pb0">The start point of first output curve.</param>
            <param name="pb1">The first control point of first output curve.</param>
            <param name="pb2">The second control point of first output curve.</param>
            <param name="pb3">The end point of first output curve.</param>
            <param name="pe0">The start point of second output curve.</param>
            <param name="pe1">The first control point of second output curve.</param>
            <param name="pe2">The second control point of second output curve.</param>
            <param name="pe3">The end point of second output curve.</param>
        </member>
        <member name="T:Syncfusion.Chart.ChartPlace">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPlace.SeriesType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPlace.PlaceIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Chart.ChartPlace.Series">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Chart.ChartPlace.#ctor(System.Int32,Syncfusion.Chart.ChartSeries)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPlace.Add(Syncfusion.Chart.ChartSeries)">
            <summary>
            
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPlace.SetSpaceSize(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Syncfusion.Chart.ChartPlace.CalculateSpace(Syncfusion.Chart.ChartSeriesCollection,System.Boolean,Syncfusion.Chart.IChartAreaHost)">
            <summary>
            
            </summary>
            <param name="series"></param>
            <param name="doManyAreas"></param>
            <param name="chart"></param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartSeriesFactory.isEntertedDirectCategoryValue">
            <summary>
            Enable EntertedDirectCategoryValue
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartSeriesFactory.RectangleSerieTypes">
            <summary>
            List contains the series in rectangle format
            </summary>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetChartPointsForHistogram(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,System.Collections.Generic.IList{Syncfusion.ChartToImageConverter.ChartPointInternal})">
            <summary>
            Returns the required observable collection for histogram chart
            </summary>
            <param name="serie">input chart series</param>        
            <param name="observableCollection">input observable collection</param>
            <returns>the modified observable collection for histogram</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetChartPointsByBinValues(System.Collections.Generic.IList{Syncfusion.ChartToImageConverter.ChartPointInternal},System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double,Syncfusion.OfficeChart.Implementation.Charts.HistogramAxisFormat)">
            <summary>
            Returns the modified observable collection respect to bin values
            </summary>
            <param name="modifiedProducts">the input modified observable collection</param>
            <param name="binwidth">the bin width value</param>
            <param name="numberOfBins">number of bins</param>
            <param name="min">minimum value</param>
            <param name="max">maximum value</param>
            <param name="overflowBin">the overflow bin value</param>
            <param name="underflowBin">the underflow bin value</param>
            <param name="axisFormat">input histogram axis format</param>
            <returns>the output modified observable collection</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.CalculateValuesFromFlowBins(System.Collections.Generic.IList{Syncfusion.ChartToImageConverter.ChartPointInternal},System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            returns the view model object
            </summary>
            <param name="modifiedProducts"> the modified observable collection</param>
            <param name="min">minimum value</param>
            <param name="max">maximum value</param>
            <param name="bintype">bin type to indicate underflow / overflow options
            -1 - underflow ,1 - overflow, 0 - both
            </param>
            <param name="count">bin count for axis</param>
            <param name="binWidth">the binwidth </param>
            <param name="isIntervalClosedInLeft">boolean value indicates whether the interval is closed left or not</param>
            <returns>the modified view model</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.ChangeFunnelItemsSourceToRangeColumn(System.Collections.Generic.IList{Syncfusion.ChartToImageConverter.ChartPointInternal})">
            <summary>
            the data points changed as funnel 
            </summary>
            <param name="data">input chart points data</param>
            <returns>the data points to represent in funnel</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetStandardDeviationValue(System.Collections.Generic.IList{Syncfusion.ChartToImageConverter.ChartPointInternal})">
            <summary>
            Calculate and returns the standard deviation value
            </summary>
            <param name="array">input observation collection value</param>
            <returns>the standard deviation value</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetAutomaticBinwidthValue(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate and returns the automatic bin width value as MS Excel
            </summary>
            <param name="stdev">input standard deviation value</param>
            <param name="length">chart points count</param>
            <param name="max">Maximum value</param>
            <param name="min">Minimum value</param>
            <returns>the bin width value</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetAverage(System.Collections.Generic.IList{Syncfusion.ChartToImageConverter.ChartPointInternal})">
            <summary>
            Calculate and return the average value from collection
            </summary>
            <param name="array">input array</param>
            <returns>the average value of array</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetViewModel(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl)">
            <summary>
            Check for series having reference or literal values and return view model object based on values type
            </summary>
            <param name="serie">input series need to check</param>        
            <returns>view model object</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetChartPointsValues(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,System.Boolean,System.Int32,System.Boolean,System.Collections.Generic.IList{Syncfusion.ChartToImageConverter.ChartPointInternal})">
            <summary>
            Get the chartpoints from the series values
            </summary>
            <param name="serie">input series</param>    
            <param name="serieBase">sfchart serie</param>
            <param name="isBubbles">boolean value denotes whether serie is bubble or not</param>
            <param name="values">input chart points to be updated</param>       
            <returns>the updated chart point collection</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetChartPointValueType(System.Boolean,System.Boolean,System.String,System.String,Syncfusion.OfficeChart.Implementation.Charts.ChartImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartCategoryAxisImpl)">
            <summary>
            Get the chart point X/Category value type based on the input values
            </summary>
            <param name="isBubbleOrScatter">boolean value indicates whether the chart is bubble or scatter</param>
            <param name="valueContainsAnyString">boolean value indicates whether the X/Category Value contain any string</param>
            <param name="labelNumFmt">cell or external range number format</param>
            <param name="axisNumFmt">axis numberformat</param>
            <param name="chart">parent chart</param>
            <param name="categoryAxis">category axis</param>
            <returns>teh chart point value type enum value</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.ValuesContainsAnyString(Syncfusion.OfficeChart.IRange,System.Object[],System.Collections.Generic.List{System.Int32},Syncfusion.OfficeChart.Implementation.WorksheetImpl)">
            <summary>
            Returns the boolean value by checking whether the cells or direct values contain any string
            </summary>
            <param name="categoryRanges">input category cells</param>
            <param name="directCategories">input direct category values</param>
            <param name="categoryIndexesArray">array denotes the category need to be skipped</param>
            <param name="worksheet">parent worksheet</param>
            <returns>the boolean value indicates whether the input contains string</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetValueFromCell(Syncfusion.OfficeChart.IRange,System.Object,Syncfusion.OfficeChart.Implementation.WorksheetImpl,System.Int32,Syncfusion.ChartToImageConverter.ChartPointValueType,System.String,System.String,System.Double,System.Boolean,System.Object@,System.String)">
            <summary>
            Returns the category value based on the input
            </summary>
            <param name="cell">input cell</param>
            <param name="categoryValue">input value</param>
            <param name="sheet">parent worksheet</param>
            <param name="index">current index</param>
            <param name="expectedType">the chart point value type expected for category</param>
            <param name="axisNumberFormat">axis NumberFormat</param>
            <param name="labelNumberFormat">cell/external range NumberFormat</param>
            <param name="categoryDisplayUnit">category axis display unit</param>
            <param name="isCategoryLabelsNeeded">boolean value indicates whether the data labels required for category</param>
            <param name="dataLabelResult">data label result value for category</param>
            <param name="dataLabelNumberFormat">dataLabel NumberFormat</param>
            <returns>the expected category value</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetdoubleValueFromCell(Syncfusion.OfficeChart.IRange,Syncfusion.OfficeChart.Implementation.WorksheetImpl,Syncfusion.OfficeChart.Implementation.WorksheetImpl.TRangeValueType@)">
            <summary>
            Get the double value from the cell
            </summary>
            <param name="cell">input range</param>
            <param name="sheet">parent worksheet</param>
            <param name="cellType">out cell value type</param>
            <returns>the double value</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SetDateTimeIntervalType(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,System.Collections.Generic.IList{Syncfusion.ChartToImageConverter.ChartPointInternal},System.Boolean)">
            <summary>
            Check and Sort the collection if X is datetime value
            </summary>
            <param name="serie">input chart serie</param>
            <param name="chartPoints">chartpoint collection</param>
            <param name="isStock">boolean value indicates whether the charts are stock or not</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetChartPointsValuesForStockChart(System.Boolean,Syncfusion.OfficeChart.Implementation.Charts.ChartImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,System.Collections.Generic.IList{Syncfusion.ChartToImageConverter.ChartPointInternal},System.Boolean)">
            <summary>
            Get the chartpoints from the series values only for stock chart
            </summary>
            <param name="chart">XlsIO chart</param>        
            <param name="serie">input series</param>       
            <param name="values">input chart points to be updated</param>
            <param name="isCandleChart">boolean value represent the candle chart</param>
            <returns>the updated chart point collection</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetValueForStockCharts(Syncfusion.OfficeChart.IRange,System.Object[],Syncfusion.OfficeChart.Implementation.WorksheetImpl,System.Int32,System.Double)">
            <summary>
            Returns the value for stock chart serie
            </summary>
            <param name="range">input range</param>
            <param name="directValues">input direct values</param>
            <param name="worksheet">parent worksheet</param>
            <param name="index">current index</param>
            <param name="displayUnit">display unit</param>
            <returns>teh double value</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfBarseries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfBar Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>BarSeries</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfBarseries3D(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfBar Serie3D.
            </summary>
            <param name="serie">chart serie</param>
            <returns>BarSeries3D</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfStackBar100Series(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfStackingBar100 Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>StackingBar100Series</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfAreaSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfArea Serie.
            </summary>
            <param name="serie">chart serie</param>        
            <returns>AreaSeries</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfAreaSeries3D(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfArea Serie3D.
            </summary>
            <param name="serie">chart serie</param>
            <returns>AreaSeries3D</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfColumnSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfColumn Serie.
            </summary>
            <param name="serie">chart serie</param>        
            <returns>ColumnSeries</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfColumnSeries3D(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfColumn Serie3D.
            </summary>
            <param name="serie">chart serie</param>       
            <returns>ColumnSeries3D</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfLineSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfLine Serie.
            </summary>
            <param name="serie">chart serie</param>        
            <returns>LineSeries</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfLineSeries3D(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfLine Series3D.
            </summary>
            <param name="serie">chart serie</param>        
            <returns>LineSeries3D</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfSplineSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfSpline Serie.
            </summary>
            <param name="serie">chart serie</param>        
            <returns>SplineSeries</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfPieSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfPie Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>PieSeries</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.ApplyPieConfiguration(Syncfusion.Chart.ChartSeries,Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl)">
            <summary>
            Apply the pie series rotation and explode value
            </summary>
            <param name="pieSerie"></param>
            <param name="serie"></param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfPieSeries3D(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfPie Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>PieSeries</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfDoughnutSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfDoughnut Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>DoughnutSeries</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfStackAreaSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfStackingArea Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>StackingAreaSeries</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfStackAreaSeries3D(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfStackingArea 3D Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>StackingAreaSeries 3D</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfStackArea100Series(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfStackingArea100 Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>StackingArea100Series</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfStackArea100Series3D(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfStackingArea100 3D Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>StackingArea100Series 3D</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfStackBarSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfStackingBar Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>StackingBarSeries</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfStackBar100Series3D(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfStackingBar100 Series3D.
            </summary>
            <param name="serie">chart serie</param>
            <returns>StackingBar100Series3D</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfStackedColumnSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfStackingColumn Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>StackingColumnSeries</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfStackedColumnSeries3D(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfStackingColumn Series3D.
            </summary>
            <param name="serie">chart serie</param>
            <returns>StackingColumnSeries3D</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfStackColum100Series(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfStackingColumn100 Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>StackingColumn100Series</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfStackColum100Series3D(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfStackingColumn100 Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>StackingColumn100Series</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfRadarSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfRadar Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>RadarSeries</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfScatterrSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfScatter Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>ScatterSeries</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfBubbleSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfBubble Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>BubbleSeries</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfCandleSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfCandle Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>CandleSeries</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfStockHiLoSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the SfHiLo Serie.
            </summary>
            <param name="serie">chart serie</param>
            <returns>HiLoOpenCloseSeries</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfFunnelSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            It returns the funnel Serie.
            </summary>
            <param name="serie">chart serie</param>       
            <returns>Funnel Series</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetFillOnWaterFallSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartSeries,Syncfusion.ChartToImageConverter.ViewModel)">
            <summary>
            Check and adds the required color brushes for waterfall series
            </summary>
            <param name="serie">input xlsio chart series</param>
            <param name="waterfall">input sfchart waterfall series</param>
            <param name="model">input view model object</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfHistogramOrPareto(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartImpl,Syncfusion.Chart.ChartSeries@,Syncfusion.Chart.ChartControl)">
            <summary>
            Returns the histogram equivalent column series and pareto equivalent line
            </summary>
            <param name="serie">input XlsIO chart series</param>
            <param name="_chart">input XlsIO chart</param>
            <param name="paretoLine">output pareto line if pareto series</param>
            <returns>the column series of sfchart</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.SfParetoLine(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartSeries,System.Collections.Generic.IList{Syncfusion.ChartToImageConverter.ChartPointInternal},Syncfusion.Chart.ChartControl)">
            <summary>
            Returns the pareto line formatted sfchart line series
            </summary>
            <param name="serie">input chart serie object</param>
            <param name="column">input column series</param>
            <param name="observableCollection">the observable collection argument for pareto line</param>
            <returns>the sfchart line series</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetCommonColorBrush(Syncfusion.Chart.ChartStyleInfoIndexer,System.Collections.Generic.List{System.Int32})">
            <summary>
            Get common brush by neglecting negatve brushes
            </summary>
            <param name="customBrushes">input custom brush list</param>
            <param name="customDptIndexes">list of negative indexes</param>
            <returns>common brush</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetFillOnCommonSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartSeries,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Assign the brush values for the common chart series
            like (Bar,column,Area(stacked or 100%stacked or clustered)),Bubble,
            </summary>
            <param name="serie">input Chart series</param>
            <param name="sfChartSerie">the ouput SfChart Serie object to be changed</param>
            <param name="negativeIndexes">negative indexes by values</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.TryParseNegativeIndexes(Syncfusion.Chart.ChartPointIndexer,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Gets the index of negative values serie data points. 
            </summary>
            <param name="items">Items to be checked</param>
            <param name="listIndexes">Index collection.</param>
            <returns>returns true if serie data points has negative value otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetFillOnPieDougnutSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartSeries,System.Boolean,Syncfusion.Chart.Drawing.BrushInfo@,System.Double@)">
            <summary>
            Assign the brush values for the pie and doughnut chart series
            </summary>
            <param name="serie">input Chart series</param>
            <param name="sfChartSerie">the ouput SfChart Serie object to be changed</param>
            <param name="isPie">Indicates whether the input serie is pie or doughnut</param>
            <param name="borderBrush">Get the border brush set on individual data point</param>
            <param name="borderThickness">Get the border thickness set on individual data point</param>
            <returns>the boolean value indicates whether the all datapoints have no fill</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetBorderOnCommonSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartBorderImpl,Syncfusion.Chart.ChartSeries)">
            <summary>
            Get the border thickness and color value from input border
            Set the values to the output serie
            </summary>
            <param name="border">the input series border</param>
            <param name="sfChartSerie">the ouput series to be changed</param>
            <returns>the boolean value indicates whether the default border is applied</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.GetBorderOnLineSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartSeries)">
             <summary>
             Get the border thickness and color value from input border
             Set the values to the output serie
             </summary>
            <param name="serie">Input series</param>
             <param name="sfChartSerie">the ouput series to be changed</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.TryAndUpdateSegmentsColorsInLineSeries(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartSeries,Syncfusion.Chart.Drawing.BrushInfo,System.Boolean)">
            <summary>
            Update the line series by segments if is vary color option is set
            </summary>
            <param name="serie">input xlsio/officechart serie object</param>
            <param name="sfChartSerie">input sfchart serie object</param>
            <param name="brush">common brush for the serie</param>
            <param name="isXMLVersion">boolean value indicates whether the chart is in XML file</param>
            <returns>the boolean value indicates whether the segment colors are changed</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.ChartSeriesCommon(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartSeries,System.Collections.Generic.IList{Syncfusion.ChartToImageConverter.ChartPointInternal},System.Boolean,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Common chart series settings.
            </summary>
            <param name="serie">XlsIo serie.</param>
            <param name="chartSeriesBase">SfChart series base</param>        
            <param name="values">Chart data points.</param>
            <param name="applyFill">Apply series fill settings</param>
            <param name="negativeIndexes">negative indexes by values</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.TryAndRemoveFirstEmptyPointsOnSeries(System.Boolean,Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartSeries,System.Collections.Generic.IList{Syncfusion.ChartToImageConverter.ChartPointInternal})">
            <summary>
            skip the first Empty Points
            </summary>
            <param name="isLine">Set true if it is line</param>
            <param name="serie">chart serie</param>
            <param name="chartSeriesBase">chart series base</param>
            <param name="values">values from chartpoint collections</param>
            <returns>Returns the chartpoint value collection</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.TryAnsEmptyPointDisplayInChart(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartSeries)">
            <summary>
            Check and set the blank value based on input
            </summary>
            <param name="serie">input chart serie</param>
            <param name="chartSeriesBase">sfchart serie base</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.ChartSeriesCommon(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartSeries,System.Collections.Generic.IList{Syncfusion.ChartToImageConverter.ChartPointInternal},System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Common chart series settings.
            </summary>
            <param name="serie">XlsIo serie.</param>
            <param name="chartSeriesBase">SfChart series base</param>        
            <param name="values">Chart data points.</param>
            <param name="negativeIndexes">negative indexes by values</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.ChartSeriesCommon(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartSeries)">
            <summary>
            Common chart series settings.
            </summary>
            <param name="serie">XlsIo serie.</param>
            <param name="chartSeriesBase">SfChart series base</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.ChartSeriesCommon(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartSeries,System.Boolean)">
            <summary>
            Common chart series settings.
            </summary>
            <param name="serie">XlsIo serie.</param>
            <param name="chartSeriesBase">SfChart series base</param>
            <param name="applyFill">Apply series fill settings</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.ChartSeriesCommon(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartSeries,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Common chart series settings.
            Stacked and Stacked100 Bar and column series
            </summary>
            <param name="serie">XlsIo serie.</param>
            <param name="chartSeriesBase">SfChart series base</param>
            <param name="negativeIndexes">negative indexes by values</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.DetachEventsForRadarAxes(Syncfusion.Chart.ChartControl)">
            <summary>
            Detach the attached events when the chart is Radar
            </summary>
            <param name="sfChart">input sfChart object</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartSeriesFactory.TryAndSortLegendItems(Syncfusion.Chart.ChartControl,System.Int32[])">
            <summary>
            Sort the legend items based on the input array indices
            </summary>
            <param name="sfChart">input sfchart object</param>
            <param name="sortedLegendOrders">the input array indices</param>
        </member>
        <member name="T:Syncfusion.ChartToImageConverter.ChartPointValueType">
            <summary>
            Enum values used for axis number format and type detection
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartPointValueType.ScatterXAxisValue">
            <summary>
            Scatter X axis values
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartPointValueType.ScatterDefaultIndexXValue">
            <summary>
            Scatter default index value
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartPointValueType.DefaultIndexValue">
            <summary>
            Default index value
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartPointValueType.DefaultIndexValueWithAxisNumFmt">
            <summary>
            Default index value with axis number format
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartPointValueType.DefaultIndexValueWithNumFmt">
            <summary>
            Default index value with source number format
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartPointValueType.DateTimeAxisValue">
            <summary>
            Date Time X axis value
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartPointValueType.TextAxisValue">
            <summary>
            Text axis Value
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartPointValueType.TextAxisValueWithNumFmt">
            <summary>
            Text axis value with axis number format
            </summary>
        </member>
        <member name="T:Syncfusion.ChartToImageConverter.ThemeColorNameEnum">
            <summary>
            Enum having the equivalent theme color with the integer indexes
            </summary>
        </member>
        <member name="T:Syncfusion.ChartToImageConverter.ChartElementsEnum">
            <summary>
            Enum values for the chart elements and required content
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.AxisLine">
            <summary>
            Axis Line color
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.ChartAreaLine">
            <summary>
            Chart area border color
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.ChartAreaFill">
            <summary>
            Chart area fill color
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.UpBarFill">
            <summary>
            Up Bar fill color
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.UpBarLine">
            <summary>
            Up Bar border color
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.DownBarFill">
            <summary>
            Down bar fill color
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.DownBarLine">
            <summary>
            Down bar border color
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.DataPointFill">
            <summary>
            Data Point or Serie fill color
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.DataPointLine">
            <summary>
            Data point or serie border color
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.FloorLine">
            <summary>
            Floor border color
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.FloorFill">
            <summary>
            Floor fill color
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.WallsFill">
            <summary>
            Walls fill color
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.DataPointLineThickness">
            <summary>
            Line/Scatter serie line thickness
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.MinorGridLines">
            <summary>
            Minor grid line color
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.MajorGridLines">
            <summary>
            Major grid line color
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.PlotAreaFill">
            <summary>
            Plot area fill color only for 2D
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.MarkerFill">
            <summary>
            Marker fill color 
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.MarkerThickness">
            <summary>
            Marker size
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartElementsEnum.OtherLines">
            <summary>
            Trendlines/hi-lo lines or other lines in the serie
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartToImageconverter._chart">
            <summary>
            Input chart
            </summary>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartToImageconverter.Is3DConversionSupported">
            <summary>
            Method used to check whether the input chart is 3D or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartToImageconverter.IsAutoChartTitle(Syncfusion.OfficeChart.Implementation.Charts.ChartImpl)">
            <summary>
            Boolean value indicates whether the chart have automatic title. 
            XlsIO specific as behavior is differs with Presentation Chart
            </summary>
            <param name="chartImpl">input chart</param>
            <returns>the boolean value</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartToImageconverter.GetChart(Syncfusion.OfficeChart.IOfficeChart)">
            Need to Implement
             <summary>
             Excel chart to sf Chart conversion.
             </summary>
             <param name="excelChart">Excel chart</param>
             <returns>SfChart</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartToImageconverter.SetBubbleSizeInCharts(Syncfusion.Chart.ChartControl,Syncfusion.OfficeChart.Implementation.Charts.ChartImpl,System.Boolean)">
            <summary>
            Set BubbleSize in charts where MS Office Chart equivalent calculations made in sfchart
            </summary>
            <param name="sfChart">input SfChart Object</param>
            <param name="chartImpl">input MS Office Chart impl object</param>
            <param name="isCombinationChart">boolean value indicates whether the chart is combination chart</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartToImageconverter.SetMaxMinRadiusForBubbles(Syncfusion.Chart.ChartControl,Syncfusion.OfficeChart.Implementation.Charts.ChartImpl,System.Boolean,System.Double)">
            <summary>
            Set minimum/maximum radius for bubbles per series
            </summary>
            <param name="sfChart">input SfChart Object</param>
            <param name="chartImpl">input MS Office Chart impl object</param>
            <param name="isPrimary">boolean value indicates whether the series is primary and secondary formats</param>
            <param name="expectedSize">expected size of the bubble</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartToImageconverter.GetChart3D(Syncfusion.OfficeChart.IOfficeChart)">
            Need to Implement
             <summary>
             Converts an Excel Chart instance into Syncfusion 3D Chart instance.
             </summary>
             <param name="excelChart">Excel chart</param>
             <returns>SfChart3D</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartToImageconverter.GetChartSerie(Syncfusion.OfficeChart.OfficeChartType,Syncfusion.Chart.ChartControl,Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean)">
            Need to Implement
             <summary>
             Get Sf chart serie for Excel Chart serie
             </summary>
             <param name="serieType">Represent the Series Type</param>
             <param name="sfChart">Sfchart</param>
             <param name="serie">Excel Serie</param>
             <param name="isPie">ispie boolean for piechart</param>
             <param name="isStock">isstock boolean for stockchart</param>
             <param name="isRadar">boolean value indicates whether the chart contains radar serie</param>
             <param name="isNullSerie">boolean value indicates whether series contains the null values or not</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartToImageconverter.GetChartSerie3D(Syncfusion.OfficeChart.OfficeChartType,Syncfusion.Chart.ChartControl,Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,System.Boolean@,System.Boolean@,System.Boolean)">
            Need to Implement
            <summary>
            Get Sf chart serie for Excel Chart serie
            </summary>
            <param name="serieType">Represent the Series Type</param>
            <param name="sfChart">Sfchart</param>
            <param name="serie">Excel Serie</param>
            <param name="isPie">ispie boolean for piechart</param>
            <param name="isStock">isstock boolean for stockchart</param>
            <param name="isNullSerie">boolean value indicates whether the series is empty or not</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartToImageconverter.SaveAsImage(Syncfusion.OfficeChart.IOfficeChart,System.IO.Stream)">
            <summary>
            Excel chart to sf Chart conversion.
            </summary>
            <param name="excelChart">Excel chart</param>
            <param name="imageAsStream">Output Stream</param>
            <returns>SfChart</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartToImageconverter.SaveAsImage(Syncfusion.OfficeChart.IOfficeChart,System.IO.Stream,Syncfusion.OfficeChart.ChartRenderingOptions)">
            <summary>
            Save the chart as image with specified file name
            </summary>
            <param name="stream">Stream to save the image</param>
            <param name="imageOptions">ImageOptions to save the image</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartToImageconverter.ResetChartCommonData">
            Need to Implement
             <summary>
             Reset the chart converter properties
             </summary>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartToImageconverter.GetOfficeChartSeries(Syncfusion.OfficeChart.IOfficeChartSeries)">
            <summary>
            Get OfficeChart serie collection after refreshing its data
            </summary>
            <param name="officeChartSeries">input OfficeChart serie collection</param>
            <returns>updated OfficeChart serie collection</returns>
        </member>
        <member name="T:Syncfusion.ChartToImageConverter.ViewModel">
            <summary>
            It's an chart data source. Collection of datapoint's.
            </summary>
        </member>
        <member name="T:Syncfusion.ChartToImageConverter.ChartPointInternal">
            <summary>
            It's represent the chart datapoint.
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.ChartPointInternal.X">
            <summary>
            axis values will be stored
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.ChartPointInternal.Value">
            <summary>
            series values will be stored
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.ChartPointInternal.Size">
            <summary>
            bubble size values will be stored
            </summary>
            <remarks>
            Used to store the data labels value with number format
            for category axis when axis is not linked to source (only for stock charts).
            </remarks>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.ChartPointInternal.High">
            <summary>
            stock high values will be stored
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.ChartPointInternal.Low">
            <summary>
            stock low values will be stored
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.ChartPointInternal.Open">
            <summary>
            stock open values will be stored
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.ChartPointInternal.Close">
            <summary>
            stock close values will be stored
            </summary>
            <remarks>
            Used to store the data labels value with number format
            for category axis when axis is not linked to source (except stock charts).
            </remarks>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.ChartPointInternal.IsSummary">
            <summary>
             boolean value for waterfall will be stored
            </summary>
            <remarks>Used to show the data labels and markers to be removed on data point 
            is an average on line/radar/scatter charts.
            </remarks>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartUtilities.DEF_BORDER_WIDTH_EXCEL">
            <summary>
            Border width constant in MS EXCEL
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartUtilities.parentWorkbook">
            <summary>
            Parent workbook internal object
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartUtilities.m_def_MarkerType_Array">
            <summary>
            Represents the marker type value in integer
            from enum ExcelChartType (XlsIO) and OfficeChartType (OfficeChart)
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartUtilities.DEF_LINE_THICKNESS_XML">
            <summary>
            Represents the default line thickness in XML workbook
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartUtilities.DEF_LINE_THICKNESS_BINARY">
            <summary>
            Represents the default line thickness in Binary workbook
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartUtilities.m_sfChart">
            <summary>
            Represent he chartControl object.
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartUtilities.m_itemSource">
            <summary>
            Represent ItemSource of chart series.
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartUtilities.m_hasNewSeries">
            <summary>
            True the new series is create and add to collection otherwise false.
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartUtilities.m_isSeriesReverseOrder">
            <summary>
            Represent the chart series are reverse order or not.
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartUtilities.m_newSeriesIndex">
            <summary>
            Represent the new line series add the collection index.
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartUtilities._fontList">
            <summary>
                Indicates the list of the fonts collections to which the fonts are need to substituted.
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartUtilities._excludefontList">
            <summary>
                Indicates the list of the fonts to exclude in SwitchFont
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartUtilities._latinfontList">
            <summary>
                Indicates the list of the fonts supported by latin font
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartUtilities.engine">
            <summary>
            Excel engine.
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartUtilities.m_isSeriesSorted">
            <summary>
            Indicates whether the series labels are sorted or not
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.ChartUtilities.Worksheet">
            <summary>
            Worksheet used for number format
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.ChartUtilities.SfChart">
            <summary>
            Gets and sets the chartControl object.
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.ChartUtilities.ItemSource">
            <summary>
            Gets and sets the ItemSource of the chart series.
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.ChartUtilities.HasNewSeries">
             <summary>
            Gets and sets the create a new line series or not.
             </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.ChartUtilities.NewseriesIndex">
            <summary>
            Gets and sets the new line series add the collection index.
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.ChartUtilities.IsSeriesReverseOrder">
            <summary>
            Gets and sets chart series is reverse or not.
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.ChartUtilities.IsSeriesSorted">
            <summary>
            Indicates whether the series labels are sorted or not
            </summary>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.#ctor">
            <summary>
            Constructor initialize the worksheet
            </summary>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.IntializeFonts">
            <summary>
            Intializes the fonts.
            </summary>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SetChartSize(Syncfusion.OfficeChart.IOfficeChart)">
            <summary>
            Set the chart size.
            </summary>
            <param name="_chart">input chart</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.ApplyNumberFormat(System.Object,System.String)">
            <summary>
            Apply a number format to value.
            </summary>
            <param name="value">Value.</param>
            <param name="numberFormat">number format to be applied</param>
            <returns>returns numberformat applied string.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.IsCategoryAxisAuto(Syncfusion.OfficeChart.Implementation.Charts.ChartAxisImpl)">
            <summary>
            Indicates whether the axis is category and it is not automatic
            </summary>
            <param name="axis">input axis</param>
            <returns>the boolean value</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.IsStacked100AxisFormat(Syncfusion.OfficeChart.Implementation.Charts.ChartAxisImpl)">
            <summary>
            Returns the boolean value indicates axis format is depends on the stacked 100 format
            </summary>
            <param name="axis">input chart object</param>
            <returns>the boolean value shows is stacked 100 format</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetSourceNumberFormat(Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl)">
            <summary>
            Get the referenced (first series and first cell) number format from axis
            </summary>
            <param name="axis">input axis</param>
            <returns>the referenced numberformat</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.TryAndGetFirstCellNumberFormat(Syncfusion.OfficeChart.IRange)">
            <summary>
            Identify the first visible cell from the input range and return the cell's numberformat
            </summary>
            <param name="range">input range</param>
            <returns>the numberformat</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckIfValidValueRange(Syncfusion.OfficeChart.IRange)">
            <summary>
            Cehck whether the range is valid (not null and not refers external range)
            </summary>
            <param name="range">input range</param>
            <returns>the boolean value</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.IsRowOrColumnIsHidden(Syncfusion.OfficeChart.IRange,Syncfusion.OfficeChart.Implementation.WorksheetImpl)">
            <summary>
            Ceheck whether the range's row is hidden or not
            </summary>
            <param name="valueCell">the input value cell</param>
            <param name="workSheet">parent worksheet</param>
            <returns>the boolean value</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetDisplayUnitValue(Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl)">
             <summary>
             Gets the dispaly unit numerical value.
             </summary>        
            <param name="valueAxis">Input chart value axis</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetAxisLayoutTransformForTitle(Syncfusion.OfficeChart.Implementation.Charts.ChartAxisImpl,System.Boolean@)">
            <summary>
            Get the rotation angle from the axis and returns proper transform
            </summary>
            <param name="axis">Input Chart Axis</param>
            <returns>the rotation angle</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.IsVerticalAxis(Syncfusion.OfficeChart.Implementation.Charts.ChartAxisImpl)">
            <summary>
            Check whether the axis is vertical or not 
            </summary>
            <param name="axis">axis to be checked</param>
            <returns>the boolean value, is vertical or not</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.IsVerticalCategoryAxis(Syncfusion.OfficeChart.Implementation.Charts.ChartAxisImpl)">
            <summary>
            Returns the boolean value indicates axis format is vertical
            </summary>
            <param name="axis">input chart axis object</param>
            <returns>the boolean value shows is vertical</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.IsVaryColorSupported(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl)">
            <summary>
            Check whether the series is single and its vary colors by point option is set to true
            </summary>
            <param name="serie">input chart serie</param>
            <returns>the boolean value indicates whether the serie supports is vary color</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfColor(System.Byte,System.Byte,System.Byte,System.Double)">
            <summary>
            Calculates the color from given rgb and transparency value
            </summary>
            <param name="R">input Red value</param>
            <param name="G">input Green value</param>
            <param name="B">input Blue value</param>
            <param name="transparency">input Transparency value</param>
            <returns>the output color</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfColor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Calculates the color from given rgb value
            </summary>
            <param name="R">input Red value</param>
            <param name="G">input Green value</param>
            <param name="B">input Blue value</param>        
            <returns>the output color</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfColor(Syncfusion.Drawing.Color)">
            <summary>
            It's convert the drawing color to Media color
            </summary>
            <param name="chartcolor">Drawing color</param>
            <returns>Media color</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.IsLine(Syncfusion.OfficeChart.OfficeChartType)">
            <summary>
            Checks whether the given chart type is line or not
            </summary>
            <param name="chartType">Chart Type</param>
            <returns>boolean value</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetSerieName(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl)">
            <summary>
            Get series name.
            </summary>
            <param name="serie">XlsIO chart series.</param>
            <returns>returns series name.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetBorderThickness(Syncfusion.OfficeChart.Implementation.Charts.ChartBorderImpl)">
            <summary>
            Get the border thickness from the input border
            </summary>
            <param name="border">input Border</param>
            <returns>the border thickness value</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.TryAndGetColorBasedOnElement(Syncfusion.ChartToImageConverter.ChartElementsEnum,Syncfusion.OfficeChart.Implementation.Charts.ChartImpl,Syncfusion.Drawing.Color@)">
            <summary>
             Gets the color value based on the input element name and style id. 
             A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="inputelement">input element enum</param>
            <param name="chart">the parent chart</param>
            <param name="color">the output color value</param>
            <returns>boolean value indicates whether the color getting is success or not</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.TryAndGetThicknessBasedOnElement(Syncfusion.ChartToImageConverter.ChartElementsEnum,Syncfusion.OfficeChart.Implementation.Charts.ChartImpl,System.Single@,System.Nullable{System.Int16})">
            <summary>
             Gets the thickness/marker size value based on the input element name and style id. 
             A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="inputelement">input element enum</param>
            <param name="chart">the parent chart</param>
            <param name="thickness">the output color value</param>
            <param name="value">nullable short value indicates the line thickness is set or not. only for marker size</param>
            <returns>boolean value indicates whether the thickness/marker size getting is success or not</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetPercentageTintOrShadeOfColor(Syncfusion.Drawing.Color,System.Double,Syncfusion.Drawing.Color)">
            <summary>
            Apply the input tint/shade value to the input color and returns the output color
            </summary>
            <param name="inputColor">the input color</param>
            <param name="percentValue">the input tint/shade color</param>
            <param name="mixColor">the mixing tint/shade color</param>
            <returns>the output color in which tint/shade is applied</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.TryAndGetFillOrLineColorBasedOnPattern(Syncfusion.OfficeChart.Implementation.Charts.ChartImpl,System.Boolean,System.Int32,System.Int32,Syncfusion.Drawing.Color@)">
            <summary>
             Gets the color value based on the input element name and style id for serie/data point line or fill
             A return value indicates whether the conversion succeeded or failed.
            </summary>       
            <param name="chart">the parent chart</param>
            <param name="formattingIndex">current formatting index of serie or data point</param>
            <param name="highFormattingIndex">highest formatting index of series or data point collection</param>
            <param name="isLine">boolean value indicates whether the color of fill or line is requeired</param>
            <param name="color">the output color value</param>
            <returns>boolean value indicates whether the color getting is success or not</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetWallBrush(Syncfusion.OfficeChart.Implementation.Charts.ChartImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartWallOrFloorImpl,System.Boolean)">
            <summary>
            Get brush from wall.
            </summary>
            <param name="wall">XlsIO wall.</param>
            <param name="isFloor">Boolean value indicates whether the wall is floor or not</param>
            <returns>BrushInfo</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetBrushFromBorder(Syncfusion.OfficeChart.Implementation.Charts.ChartBorderImpl)">
            <summary>
            Get the brush value from input border values
            </summary>
            <param name="border">input border value</param>
            <returns>the output brush</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetLineColorFromBorder(Syncfusion.OfficeChart.Implementation.Charts.ChartBorderImpl)">
            <summary>
            Get the brush value from input border values
            </summary>
            <param name="border">input border value</param>
            <returns>the output color</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetBrushFromDataFormat(Syncfusion.OfficeChart.IOfficeChartFillBorder)">
            <summary>
            get the brush with color and transparent values from input chartseriedataformat
            </summary>
            <param name="fillFormat">the input chartseriedataformat</param>
            <returns>the brush</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.ApplyGradientFill(Syncfusion.OfficeChart.Implementation.Charts.ChartFillImpl)">
            <summary>
            To Calculate the Gradient stops position and get the colors and to apply the Gradient fill
            </summary>
            <param name="fillObject"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetMaxGradientStop(Syncfusion.OfficeChart.Implementation.Shapes.GradientStops)">
            <summary>
            Get the maximum gradient style used from the input chart
            </summary>
            <param name="gradientStops">input gardient stop collection</param>
            <returns>maximum used gradient stop</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetTextFromDisplayUnits(Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl)">
            <summary>
            Returns the display unit text from the axis object
            </summary>
            <param name="axis">input axis object</param>
            <returns>the display unit text</returns>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.ChartUtilities.m_TextToMeasure">
            <summary>
            Text area collection to be used for measurement of the inidividual axis labels
            </summary>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfNumericalAxisCommon(Syncfusion.Chart.ChartAxis,Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl,System.Boolean)">
            <summary>
            It's assign the Excel chart numerical axis settings to Sf chart Axis
            </summary>
            <param name="sfaxis">SfAxis3D</param>
            <param name="serieValAxis">XlsIO value axis</param>
            <param name="oppositeAxis">XlsIO category axis</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CreateNewLineSeries(Syncfusion.Chart.ChartAxis,Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl)">
            <summary>
             Create the new line series and add to the collection.
            </summary>
            <param name="sfaxis">Sf numerical axis</param>
            <param name="serieValAxis">XlsIO value axis</param>
            <param name="oppositeAxis">XlsIO category axis</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SwitchFonts(System.String,System.String)">
            <summary>
                Modifies font name so as to render Unicode characters.
            </summary>
            <param name="testString">The sting in test for Unicode characters.</param>
            <param name="charSet">The Charset of the font.</param>
            <param name="fontName">The name of the font.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckUnicode(System.String)">
            <summary>
                Checks the unicode.
            </summary>
            <param name="unicodeText">The unicode text.</param>
            <returns>
                True if the text is an unicode else false will returned.
            </returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForGeneralPunctuationSegeoUI(System.String)">
            <summary>
            Checks for Segoe UI symbols characters in the Unicode string
            </summary>
            <param name="unicodeText">Input Unicode string</param>
            <returns>True if the Unicode string contain Segoe UI symbols characters. False otherwise</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForExtendedPlan(System.String)">
            <summary>
            Checks for Segoe UI Emoji symbols characters in the Unicode string
            </summary>
            <param name="unicodeText">Input Unicode string</param>
            <returns>True if the Unicode string contain Segoe UI Emoji Symbols characters. False otherwise</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForDingbats(System.String)">
            <summary>
            Checks for Segoe UI Emoji symbols characters in the Unicode string
            </summary>
            <param name="unicodeText">Input Unicode string</param>
            <returns>True if the Unicode string contain Segoe UI Emoji symbols characters. False otherwise</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForGeneralPunctuation(System.String)">
            <summary>
            Checks for Segoe UI Emoji symbols characters in the Unicode string
            </summary>
            <param name="unicodeText">Input Unicode string</param>
            <returns>True if the Unicode string contain Segoe UI Emoji symbols characters. False otherwise</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForAmharic(System.String)">
            <summary>
                Checks for amharic characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Amharic characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForKhmer(System.String)">
            <summary>
                Checks for khmer characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Khmer characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForThai(System.String)">
            <summary>
                Checks for thai characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Thai characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForSinhala(System.String)">
            <summary>
                Checks for sinhala characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Sinhala characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForMyanmar(System.String)">
            <summary>
                Checks for myanmar characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Myanmar characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForTamil(System.String)">
            <summary>
                Checks for tamil characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Tamil characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForTelugu(System.String)">
            <summary>
                Checks for telugu characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Telugu characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForPunjabi(System.String)">
            <summary>
                Checks for punjabi characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Punjabi characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForMalayalam(System.String)">
            <summary>
                Checks for malayalam characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Malayalam characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForKanndada(System.String)">
            <summary>
                Checks for kannada characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Kannada characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForGujarati(System.String)">
            <summary>
                Checks for gujarati characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Gujarati characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForMarathi(System.String)">
            <summary>
                Checks for marathi characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Marathi characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForLatin(System.String)">
            <summary>
                Checks for Latin characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string does not contain Latin characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForCJK(System.String)">
            <summary>
                Checks for CJK characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contains CJK characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckForArabicOrHebrew(System.String)">
            <summary>
                Checks for Hebrew or Arabic characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contains Arabic or Hebrew characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckforKorean(System.String)">
            <summary>
                Checks for Korean characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contains Korean characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfNumericalAxis(Syncfusion.Chart.ChartAxis,Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl,System.Boolean)">
            <summary>
            It's assign the Excel chart numerical axis 2D settings to Sf chart Axis 2D
            </summary>
            <param name="sfaxis">SfAxis</param>
            <param name="xlsiovalue">XlsIO value axis</param>
            <param name="categoryAxis">XlsIO category axis</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfNumericalAxis3D(Syncfusion.Chart.ChartAxis,Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartCategoryAxisImpl)">
            <summary>
            It's assign the Excel chart numerical axis 3D settings to Sf chart Axis 3D
            </summary>
            <param name="sfaxis">SfAxis3D</param>
            <param name="xlsiovalue">XlsIO value axis</param>
            <param name="categoryAxis">XlsIO category axis</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfGridLines(Syncfusion.OfficeChart.Implementation.Charts.ChartAxisImpl,Syncfusion.Chart.ChartAxis)">
            <summary>
            It's assign the Excel chart axis gridline settings to Sf chart axis gridline
            </summary>
            <param name="xlsioAxis">XlsIO axis.</param>
            <param name="sfAxis">Sf axis.</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfCategoryAxisCommon(Syncfusion.Chart.ChartAxis,Syncfusion.Chart.ChartAxis,Syncfusion.OfficeChart.Implementation.Charts.ChartCategoryAxisImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl,System.Boolean)">
             <summary>
             It's assign the Excel chart category axis settings to Sf chart Axis
             </summary>
            <param name="sfCatAxis">Sfchart category axis</param>
            <param name="xlsioCatAxis">XlsIO category axis</param>
            <param name="xlsioValAxis">XlsIO Value axis</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CreateNewLineSeries(Syncfusion.Chart.ChartAxis,Syncfusion.OfficeChart.Implementation.Charts.ChartCategoryAxisImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl)">
             <summary>
             Create the new line series and add to the collection.
             </summary>
            <param name="sfCatAxis">Sfchart category axis</param>
            <param name="xlsioCatAxis">XlsIO category axis</param>
            <param name="xlsioValAxis">XlsIO Value axis</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfCategoryAxis(Syncfusion.Chart.ChartAxis,Syncfusion.Chart.ChartAxis,Syncfusion.OfficeChart.Implementation.Charts.ChartCategoryAxisImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl,System.Boolean)">
            <summary>
            It's assign the Excel chart category axis settings to Sf chart Axis
            </summary>
            <param name="categoryAxis">SfChart category axis</param>
            <param name="xlsioCatAxis">XlsIO category axis</param>
            <param name="xlsioValAxis">XlsIO value axis</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfCategoryAxis3D(Syncfusion.Chart.ChartAxis,Syncfusion.OfficeChart.Implementation.Charts.ChartCategoryAxisImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl)">
            <summary>
            It's assign the Excel chart category axis settings to Sf chart Axis
            </summary>
            <param name="categoryAxis">SfChart category axis</param>
            <param name="xlsioCatAxis">XlsIO category axis</param>
            <param name="xlsioValAxis">XlsIO value axis</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfLogerthmicAxisCommon(Syncfusion.Chart.ChartAxis,Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartCategoryAxisImpl)">
            <summary>
            It's assign the Excel chart Logerthmi axis settings to Sf chart Axis
            </summary>
            <param name="sfaxis">Sf axis</param>
            <param name="xlsiovalue">XlsIO value axis</param>
            <param name="xlsiocat">XlsIO category axis</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfLogerthmicAxis(Syncfusion.Chart.ChartAxis,Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartCategoryAxisImpl)">
            <summary>
            It's assign the Excel chart Logerthmi axis settings to Sf chart Axis
            </summary>
            <param name="sfaxis">Sf axis</param>
            <param name="xlsiovalue">XlsIO value axis</param>
            <param name="xlsiocat">XlsIO category axis</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfLogerthmicAxis3D(Syncfusion.Chart.ChartAxis,Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartCategoryAxisImpl)">
            <summary>
            It's assign the Excel chart Logerthmi axis settings to Sf chart Axis
            </summary>
            <param name="sfaxis">Sf axis</param>
            <param name="xlsiovalue">XlsIO value axis</param>
            <param name="xlsiocat">XlsIO category axis</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfDateTimeAxis(Syncfusion.Chart.ChartAxis,Syncfusion.OfficeChart.Implementation.Charts.ChartCategoryAxisImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl)">
            <summary>
            It's assign the Excel chart DateTime axis settings to Sf chart Axis
            </summary>
            <param name="sfDateTimeAxis">Sf axis</param>
            <param name="xlsioCatAxis">XlsIO value axis</param>
            <param name="xlsioValAxis">XlsIO category axis</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfDateTimeAxis3D(Syncfusion.Chart.ChartAxis,Syncfusion.OfficeChart.Implementation.Charts.ChartCategoryAxisImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartValueAxisImpl)">
            <summary>
            It's assign the Excel chart DateTime3D axis settings to Sf chart Axis
            </summary>
            <param name="sfDateTimeAxis">Sf axis</param>
            <param name="xlsioCatAxis">XlsIO value axis</param>
            <param name="xlsioValAxis">XlsIO category axis</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfTickLines(Syncfusion.OfficeChart.Implementation.Charts.ChartAxisImpl,Syncfusion.Chart.ChartAxis)">
            <summary>
            It's assign the Excel chart axis tick line settings to Sf chart axis tick line
            </summary>
            <param name="xlsioAxis"></param>
            <param name="sfAxis"></param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfSecondaryAxis(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartImpl,Syncfusion.Chart.ChartSeries)">
            <summary>
            Set SfChart secondary axis settings.
            </summary>
            <param name="xlsioSerie">XlsIO serie.</param>
            <param name="xlsioChart">XlsIO chart.</param>
            <param name="chartSerie">SfChart serie.</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfSecondaryAxisCommon(Syncfusion.OfficeChart.Implementation.Charts.ChartImpl,Syncfusion.Chart.ChartAxis,Syncfusion.Chart.ChartAxis)">
            <summary>
            Set SfChart secondary axis common settings.
            </summary>
            <param name="xlsioChart">XlsIO chart.</param>
            <param name="sfXAxis">SfCategory axis.</param>
            <param name="sfYAxis">SfNumeric axis.</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CheckAndApplyAxisLineStyle(Syncfusion.OfficeChart.Implementation.Charts.ChartBorderImpl,Syncfusion.Chart.LineInfo@,Syncfusion.OfficeChart.Implementation.Charts.ChartImpl,Syncfusion.ChartToImageConverter.ChartElementsEnum)">
            <summary>
            Check and apply the axis line style from chart border object
            </summary>
            <param name="border">input chart border object</param>
            <param name="lineStyle">the line style</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetBrushForTextElements(Syncfusion.OfficeChart.Implementation.Charts.ChartBorderImpl,Syncfusion.Chart.ChartLineInfo)">
            <summary>
            Returns the UI border object from chart border object
            </summary>
            <param name="border">the chart border object</param>
            <returns>the border UI element</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetNumberFormatColorConverter(System.String,Syncfusion.Drawing.Color)">
            <summary>
            Returns the color converter object respect to number format
            </summary>
            <param name="numberFormat">input number format</param>
            <param name="defaultColor">input default color</param>
            <returns>the color converter object</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfChartDataLabel(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartSeries)">
            <summary>
            It's assign the chart data label property
            </summary>
            <param name="serie">chart serie</param>
            <param name="sfChartSeries">Sfchart serie base object</param>
            <returns>sfChart DataLabel</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SetMarkerFormattings(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,System.Collections.Generic.List{System.Int32},Syncfusion.OfficeChart.Implementation.Charts.ChartSerieDataFormatImpl,Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartStyleInfo)">
            <summary>
            Set Marker format on Chart adornment from Chart data format
            </summary>
            <param name="chartSerieImpl">input chart series object</param>
            <param name="dataFormat">input chart series data format</param>
            <param name="averageIndexes">the indexes of the chart points need to set invisible</param>
            <param name="info">the sfchart adornment info</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetMarkerSettings(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartSerieDataFormatImpl,Syncfusion.ChartToImageConverter.MarkerSetting,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the Marker settings from the marker format of Office Chart
            </summary>
            <param name="chartSerieImpl">Parent chart series</param>
            <param name="dataFormat">Data format of marker</param>
            <param name="parentMarkerSttings">Parent marker settings - series common</param>
            <returns>the marker settings for binding</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SetLabelPosition(Syncfusion.Chart.ChartSeries,System.Object,Syncfusion.OfficeChart.Implementation.Charts.ChartDataLabelsImpl)">
            <summary>
            Set sf chart data label position.
            </summary>
            <param name="sfChartSeries">SfChart serie.</param>
            <param name="info">SfChart data label.</param>
            <param name="label">XlsIO data label.</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetLabelPosition(Syncfusion.Chart.ChartSeries,Syncfusion.OfficeChart.Implementation.Charts.ChartDataLabelsImpl)">
            <summary>
            Get sf chart data label position.
            </summary>
            <param name="sfChartSeries">SfChart serie.</param>
            <param name="label">XlsIO data label.</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetMarkerSymbolShape(System.Int32)">
            <summary>
            Returns the Geometry based on the marker type and marker size
            </summary>
            <param name="markerTypeInInt">Marker Type in Integer</param>
            <param name="markerSize">Marker Size</param>
            <returns>the geometry for symbols</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SetGapWidthandOverlap(Syncfusion.Chart.ChartSeries,Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl)">
            <summary>
            Set GapWidth and Overlap for bar and column series.
            </summary>
            <param name="seriesBase">SfChart series base.</param>
            <param name="serie">XlsIO serie.</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.UpdateSpacing(Syncfusion.Chart.ChartSeries,Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl)">
            <summary>
            Updates the gapwidth of the chart series
            </summary>
            <param name="seriesBase">Chart control serie</param>
            <param name="serie">XlsIO serie</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.IsBarChartAxis(Syncfusion.OfficeChart.Implementation.Charts.ChartAxisImpl)">
            <summary>
            Returns the boolean value which indicates whether the axis is related to bar series or not.
            </summary>
            <param name="chartAxisImpl">input Axis</param>
            <returns>the boolean value</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SetGapWidthOnSingleSeries(Syncfusion.Chart.ChartSeries,Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,System.Single@,System.Boolean)">
            <summary>
            Check for single seies present column and bar series, if found set the equal gapwidth
            </summary>
            <param name="seriesBase">input sfchart series</param>
            <param name="serie">input XlsIO chart</param>
            <param name="overlap">output overlap value</param>
            <param name="isChart3D">boolean value indicates whether the chart is 3D</param>
            <returns>the boolean value indicates whether the spacing has been set or not</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfChartTrendLine(Syncfusion.OfficeChart.Implementation.Charts.ChartSerieImpl,Syncfusion.Chart.ChartSeries)">
            <summary>
            Add the trendlines to sfserie.
            </summary>
            <param name="serieImpl">XlsIO serie.</param>
            <param name="sfSerie">SfSerie.</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetStrokeDashArrayValues(Syncfusion.OfficeChart.OfficeChartLinePattern,Syncfusion.Drawing.DashStyle@)">
            <summary>
            Get the stroke pattern value from the border property
            </summary>
            <param name="LinePatternFlag">Input border pattern property</param>
            <param name="patternValues">Out stroke thickness</param>
            <returns>boolean value indicates whether the pattern values are present or not</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfPloatArea(Syncfusion.Chart.ChartControl,Syncfusion.OfficeChart.Implementation.Charts.ChartFrameFormatImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartImpl)">
            <summary>
            It's assign the chart plotArea settings
            </summary>
            <param name="sfChart">sfChart</param>        
            <param name="plotArea">XlsiO chartArea</param>
            <param name="chartType">chart type of the input chart</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfChartArea(Syncfusion.Chart.ChartControl,Syncfusion.OfficeChart.Implementation.Charts.ChartFrameFormatImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartImpl)">
            <summary>
            It's assign the chartAre settings
            </summary>
            <param name="sfChart">sfChart</param>
            <param name="chartArea">XlsiO chartArea</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfChartArea3D(Syncfusion.Chart.ChartControl,Syncfusion.OfficeChart.Implementation.Charts.ChartFrameFormatImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartImpl)">
            <summary>
            It's assign the chartAre settings
            </summary>
            <param name="sfChart">sfChart</param>
            <param name="chartArea">XlsiO chartArea</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfRotation3D(Syncfusion.OfficeChart.Implementation.Charts.ChartImpl,Syncfusion.Chart.ChartControl)">
            <summary>
            Rotate ChartControl.
            </summary>
            <param name="chartImpl">XlsIO chart</param>
            <param name="sfChart">SfChart</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfWall(Syncfusion.Chart.ChartControl,Syncfusion.OfficeChart.Implementation.Charts.ChartImpl)">
            <summary>
            Set XlsIO wall brush to SfChart wall brush.
            </summary>
            <param name="sfChart3D">ChartControl</param>
            <param name="backWall">XlsIo backwall</param>
            <param name="sideWall">XlsIO sidewall</param>
            <param name="floor">XlsIo floor</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfTextBlock(Syncfusion.Chart.ChartTitle,Syncfusion.OfficeChart.Implementation.Charts.ChartTextAreaImpl)">
            <summary>
            It's used assign the XlsIo textarea properties to sf TextBlock
            </summary>
            <param name="sfTextArea">Wpf TextBlock</param>
            <param name="textArea">Xlsio Text Area</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SetTransformAndBackGround(Syncfusion.Chart.ChartTitle,Syncfusion.OfficeChart.Implementation.Charts.ChartTextAreaImpl,Syncfusion.OfficeChart.Implementation.Charts.ChartAxisImpl)">
            <summary>
            Set the transform and the backgound color for text block
            </summary>
            <param name="sfTextArea">The WPF border object</param>
            <param name="textArea">The Chart textArea object</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfChartTitle(Syncfusion.OfficeChart.IOfficeChart,Syncfusion.Chart.ChartControl,Syncfusion.Drawing.RectangleF@)">
            <summary>
            It's assign the SfChart AxisTitle properties
            </summary>
            <param name="sfchart">sfChart</param>
            <param name="xlsioChart">Xlsio Chart</param>
            <returns>The calculated WPF border object</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SetTextBlockInlines(Syncfusion.OfficeChart.Implementation.Charts.ChartTextAreaImpl,Syncfusion.Chart.ChartTitle)">
            <summary>
            Set the rich text fromatting in text block from the text area object
            </summary>
            <param name="textArea">input text area object</param>
            <param name="title">input text block</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SetTitleBorder(Syncfusion.OfficeChart.Implementation.Charts.ChartBorderImpl,Syncfusion.Chart.ChartTitle)">
            <summary>
            Returns the UI border object from chart border object
            </summary>
            <param name="border">the chart border object</param>
            <returns>the border UI element</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SfLegend(Syncfusion.Chart.ChartControl,Syncfusion.OfficeChart.Implementation.Charts.ChartImpl,Syncfusion.Chart.ChartLegend,System.Int32[]@,System.Boolean,Syncfusion.Chart.ChartLegend@)">
            <summary>
            It's assign Sf chart Legend settings
            </summary>
            <param name="sfchart">SfChart</param>
            <param name="xlsioChart">Excel Chart</param>
            <param name="sortedLegendOrders">output array represents the legend items to be ordered</param>
            <param name="emptyLegend">Returns the empty legend for spacing if legend manual and outside</param>
            <param name="isPlotAreaManual">boolean value indicates wheter the plot area is manual</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GenerateStreamFromXamlContent(System.Text.StringBuilder)">
            <summary>
            Generate the Stream Xaml code
            </summary>
            <param name="sb">input string builder value</param>
            <returns>the stream</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CalculateLegendSize(Syncfusion.Chart.ChartLegend,System.Double@,System.Double@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            Calculate the legend width values from the input sfchart object
            </summary>
            <param name="sfChart2D">input sfchart 2D Object</param>
            <param name="sfChart3D">input sfchart 3D Object</param>
            <param name="block">the temporary text block used to measure the text</param>
            <param name="serieWidth">the serie text width</param>
            <param name="totalWidth">the total text width</param>
            <param name="serieHeight">maximum serie text height</param>
            <param name="totalCount">Total legend entry count</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.SetLegendPosition(Syncfusion.OfficeChart.IOfficeChart,Syncfusion.Chart.ChartLegend)">
            <summary>
            Set the legend position based on the input chart object
            </summary>
            <param name="xlsioChart">input chart object</param>
            <param name="leg">the SfChart legend object</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.GetOrderOfLegendItems(Syncfusion.Chart.ChartControl,Syncfusion.OfficeChart.IOfficeChart,Syncfusion.Chart.ChartLegend)">
            <summary>
            Returns the array of legend item's indexes as equivalent to MS
            </summary>
            <param name="sfchart">input sfchart</param>
            <param name="chart">input XlsIO/Office Chart</param>
            <param name="legend">input sfchart legend items</param>
            <returns>the modified array legened item indexes</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.UpdateOrderArray(System.Collections.Generic.IList{Syncfusion.Chart.ChartSeries},Syncfusion.Chart.ChartControl,System.Int32,System.Int32@,System.Int32[])">
            <summary>
            Update the array of legend items indexes
            </summary>
            <param name="seriesList">input series list</param>
            <param name="sfchart">input sfchart</param>
            <param name="i">input index value</param>
            <param name="index">output index value</param>
            <param name="orderResult">the order of indexes modified</param>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.CalculateManualLayout(Syncfusion.OfficeChart.Implementation.Charts.ChartManualLayoutImpl,System.Boolean@)">
            <summary>
            Calculate the manual layout rectangle value based from the input chart element object
            </summary>
            <param name="layoutImpl">input layoutimpl object</param>
            <param name="isInnerLayout">boolean value indicates whether the plot area layout target is inner.</param>
            <returns>the caluclated manual rectangle value</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.ChartUtilities.TryAndUpdateLegendItemsInWaterFall(Syncfusion.Chart.ChartControl,Syncfusion.OfficeChart.Implementation.Charts.ChartImpl)">
            <summary>
            Update the funnel chart legend 
            </summary>
            <param name="sfchart">input sfchart</param>
            <param name="xlsioChart">input XlsIO chart</param>
        </member>
        <member name="T:Syncfusion.ChartToImageConverter.DataLabelSetting">
            <summary>
            Reperesents the individual data label setting
            </summary>
        </member>
        <member name="T:Syncfusion.ChartToImageConverter.MarkerSetting">
            <summary>
            Class used to store the Marker Formattings
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.MarkerSetting.m_borderBrush">
            <summary>
            BrushInfo stores the border color
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.MarkerSetting.m_fillBrush">
            <summary>
            BrushInfo stores the fill color
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.MarkerSetting.m_markerSize">
            <summary>
            Size of the marker symbol
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.MarkerSetting.m_borderThickness">
            <summary>
            Thickness value Marker's Border
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.MarkerSetting.m_markerTypeInInt">
            <summary>
            Marker Style enum Value in integer
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.MarkerSetting.BorderBrush">
            <summary>
            Gets/Sets BrushInfo for the border
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.MarkerSetting.FillBrush">
            <summary>
            Gets/Sets BrushInfo for the fill
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.MarkerSetting.MarkerSize">
            <summary>
            Gets/Sets Size of the marker symbol
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.MarkerSetting.BorderThickness">
            <summary>
            Gets/Sets the thickness value Marker's Border
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.MarkerSetting.MarkerTypeInInt">
            <summary>
            Gets/Sets Marker Style enum Value in integer
            </summary>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.MarkerSetting.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="T:Syncfusion.ChartToImageConverter.LabelConvertor">
            <summary>
            Converts the data label values.
            </summary>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.LabelConvertor.SetStyle(Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartStyleInfo,System.Int32,System.Object,Syncfusion.Chart.ChartPoint)">
            <summary>
            Convets a value.
            </summary>
            <param name="value">Value</param>
            <param name="targetType">Target type</param>
            <param name="parameter">The converter parameter</param>
            <param name="culture">Culture</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.LabelConvertor.UpdateDataLabelText(System.String,System.Object,Syncfusion.ChartToImageConverter.DataLabelSetting,System.Int32,System.String)">
            <summary>
            Update datalabel text. 
            </summary>
            <param name="text">Data label text.</param>
            <param name="value">Series value.</param>
            <param name="setting">Datalabel setting</param>
            <param name="index">Index</param>
            <param name="dateTimeText">DataTimeText in datalabel.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.LabelConvertor.LabelSettings(System.Object,Syncfusion.ChartToImageConverter.DataLabelSetting,System.Int32,System.String)">
            <summary>
            Apply label settings.
            </summary>
            <param name="value">Label value.</param>
            <param name="dataLabelSetting">Data label setting.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.LabelConvertor.UpdateDataLabelValuesFromCells(System.String,Syncfusion.ChartToImageConverter.DataLabelSetting,System.Int32)">
            <summary>
            Update value form cells to datalabels.
            </summary>
            <param name="text">Datalabel text</param>
            <param name="dataLabelSetting">Data label setting</param>
            <param name="index">Index</param>
            <returns>Data label text</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.LabelConvertor.UpdateDataLabelSeriesName(System.String,Syncfusion.ChartToImageConverter.DataLabelSetting)">
            <summary>
            Update series name to datalabels.
            </summary>
            <param name="text">Datalabel text</param>
            <param name="dataLabelSetting">Datalabel setting.</param>
            <returns>Data label text</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.LabelConvertor.UpdateDataLabelCategoryName(System.String,Syncfusion.ChartToImageConverter.DataLabelSetting,System.Int32,System.String,System.Object)">
            <summary>
            Update Category name to datalabel text.
            </summary>
            <param name="text">Datalabel text</param>
            <param name="dataLabelSetting">Datalabel setting.</param>
            <param name="index">Index</param>
            <param name="catDateTimText">Category date time string</param>
            <param name="value">series value.</param>
            <returns>Datalabel text</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.LabelConvertor.UpdateDataLabelValue(System.String,System.Object,Syncfusion.ChartToImageConverter.DataLabelSetting)">
            <summary>
            Update series value to datalabel. 
            </summary>
            <param name="text">Datalabel text</param>
            <param name="value">Series value.</param>
            <param name="dataLabelSetting">Datalabel setting</param>
            <returns>Datalabel text</returns>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.LabelConvertor.UpdateDataLabelPercentange(System.String,System.Object,Syncfusion.ChartToImageConverter.DataLabelSetting)">
            <summary>
            Update precentage value to datalabel.
            </summary>
            <param name="text">Datalabel text</param>
            <param name="value">series value.</param>
            <param name="dataLabelSetting">Datalabels setting.</param>
            <returns>Datalabel text</returns>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.MarkerConverter.MarkerSettings">
            <summary>
            Used to store the marker formats of each marker in the series
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.MarkerConverter.CommonMarkerSetting">
            <summary>
            Used to store the Common marker format of the series
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.MarkerConverter.AverageMarkerIndexes">
            <summary>
            List of indexes of marker to be removed
            </summary>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.MarkerConverter.SetSymbolStyle(Syncfusion.Chart.ChartSeries,Syncfusion.Chart.ChartStyleInfo,System.Int32,System.Object,Syncfusion.Chart.ChartPoint)">
            <summary>
            Convert the value from object and returns formatted value
            </summary>
            <param name="value">input value</param>
            <param name="targetType">target type of input</param>
            <param name="parameter">The converter parameter</param>
            <param name="culture">Culture</param>
            <returns>the formatted output</returns>
        </member>
        <member name="T:Syncfusion.ChartToImageConverter.AxisLabelConverter">
            <summary>
            Converts the input data to axis data
            </summary>
        </member>
        <member name="F:Syncfusion.ChartToImageConverter.AxisLabelConverter.AxisTypeInByte">
            <summary>
            Indicates the axis type
            0 - vertical axis
            1 - category axis
            2 - stacked axis
            4 - date time axis
            8 - tickLabel none
            </summary>
        </member>
        <member name="P:Syncfusion.ChartToImageConverter.AxisLabelConverter.PreviousLabelValue">
            <summary>
            Used to store the previous value in the value axis
            </summary>
        </member>
        <member name="M:Syncfusion.ChartToImageConverter.AxisLabelConverter.GetLabelText(System.Double,System.String)">
            <summary>
            Convets a value.
            </summary>
            <param name="value">Value</param>
            <param name="targetType">Target type</param>
            <param name="parameter">The converter parameter</param>
            <param name="culture">Culture</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.ComponentModel.PropertyChangeEffect">
            <summary>
            Specifies the expected effect of the change in property of an object / Control.
            </summary>
            <remarks>
            <para>Used by the <see cref="T:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs"/> class.</para>
            </remarks>
        </member>
        <member name="F:Syncfusion.ComponentModel.PropertyChangeEffect.NeedRepaint">
            <summary>
            The Control needs a repaint due to change in property's value.
            </summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.PropertyChangeEffect.NeedLayout">
            <summary>
            The Control needs to be laid out due to change in a property's value.
            </summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.PropertyChangeEffect.None">
            <summary>
            No effect when there is change in a property's value.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs">
            <summary>
            Provides data for the <see cref="T:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventHandler"/> delegate.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs.PropertyChangeEffect">
            <summary>
            Gets / sets the <see cref="P:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs.PropertyChangeEffect"/> of this change in property value.
            </summary>
            <value>The <see cref="P:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs.PropertyChangeEffect"/>.</value>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs.#ctor(Syncfusion.ComponentModel.PropertyChangeEffect,System.String,System.Object,System.Object)">
            <summary>
            Creates an instance of the SyncfusionPropertyChangedEventArgs class.
            </summary>
            <param name="propertyChangeType">A PropertyChangeEffect value.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="oldValue">The old value cast into an object.</param>
            <param name="newValue">The new value cast into an object.</param>
        </member>
        <member name="T:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventHandler">
            <summary>
            Represents the method that will handle the PropertyChanged event of
            certain classes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs"/> object that 
            contains the event data.</param>
        </member>
        <member name="T:Syncfusion.ComponentModel.IChangeNotifyingItem">
            <summary>
            A class implements this interface to let it be known that it provides
            a <see cref="E:Syncfusion.ComponentModel.IChangeNotifyingItem.PropertyChanged"/> event.
            </summary>
            <remarks>
            The <see cref="!:Syncfusion.Collections.ArrayListExt"/> class makes use of this interface when the items
            in its list implement it. The <see cref="!:Syncfusion.Collections.ArrayListExt"/> listens to this event and
            forwards the event args using its own <see cref="E:Syncfusion.Collections.ArrayListExt.ItemPropertyChanged"/> event.
            </remarks>
        </member>
        <member name="E:Syncfusion.ComponentModel.IChangeNotifyingItem.PropertyChanged">
            <summary>
            Occurs when one of the object's property changes.
            </summary>
            <remarks>
            This event provides a generic way of notifying changes
            in an object's property, along with the old value, new value
            and the PropertyChangeEffect.
            </remarks>
        </member>
        <member name="T:Syncfusion.ComponentModel.NullableHelper">
            <summary>
            A framework independent utility class for the new Nullable type in .NET Framework 2.0
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.NullableHelper.ChangeType(System.Object,System.Type)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.ComponentModel.NullableHelper.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.ComponentModel.NullableHelper.FixDbNUllasNull(System.Object,System.Type)">
            <summary>
            Returns null if value is DBNull and specified type is a Nullable type. Otherwise the value is returned unchanged.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.ComponentModel.NullableHelper.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of a Nullable type. For .NET 1.0 and 1.1 this method will always return null.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.ComponentModel.TracePropertyAttribute">
            <summary>
            Specifies whether a property should be shown in the ToString result.
            </summary>
            <seealso cref="T:Syncfusion.ComponentModel.SyncfusionEventArgs"/>
        </member>
        <member name="F:Syncfusion.ComponentModel.TracePropertyAttribute.Yes">
            <summary>
              <para>Specifies that a property should be shown in the ToString result. 
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.TracePropertyAttribute.No">
            <summary>
              <para>Specifies that a property should not be shown in the ToString result. 
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.TracePropertyAttribute.Default">
            <summary>
            The default value for TracePropertyAttribute. (No)
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.TracePropertyAttribute.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:Syncfusion.ComponentModel.TracePropertyAttribute" /> class.</para>
            </summary>
            <param name="traceProperty">
              <see langword="True" /> if a property should be shown in ToString result; <see langword="False" /> otherwise. The default is <see langword="True" />.</param>
        </member>
        <member name="M:Syncfusion.ComponentModel.TracePropertyAttribute.IsDefaultAttribute">
            <override/>
        </member>
        <member name="M:Syncfusion.ComponentModel.TracePropertyAttribute.GetHashCode">
            <summary>
            Overridden. See <see cref="M:System.Attribute.GetHashCode"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.TracePropertyAttribute.Equals(System.Object)">
            <override/>
        </member>
        <member name="P:Syncfusion.ComponentModel.TracePropertyAttribute.TraceProperty">
            <summary>
              <para>Indicates whether a property is shown in the ToString result.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.TraceProperties">
            <summary>
            Helper class for creating a string concatenating the string representation of all properties in an object.
            </summary>
            <remarks>
            The static <see cref="M:Syncfusion.ComponentModel.TraceProperties.ToString(System.Object)"/> method of this helper class will loop through any property
            in a given object and check if the <see cref="T:Syncfusion.ComponentModel.TracePropertyAttribute"/> has been set. If it has
            been set, the string representation of the property will be appended to the resulting string.
            </remarks>
        </member>
        <member name="M:Syncfusion.ComponentModel.TraceProperties.IsTraceProperty(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.ComponentModel.TracePropertyAttribute"/> has been set for the property.
            </summary>
            <param name="info">A <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>True if property has a <see cref="T:Syncfusion.ComponentModel.TracePropertyAttribute"/>; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ComponentModel.TraceProperties.ToString(System.Object)">
            <summary>
            This method will loop through any property in a given object and append the
            string representation of the property if the <see cref="T:Syncfusion.ComponentModel.TracePropertyAttribute"/>
            has been set.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.SyncfusionEventArgs">
            <summary>
            This is a base class for events of the Syncfusion libraries. It supports writing
            properties in its ToString() method. 
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionEventArgs.ToString">
            <summary>
            This method will loop through all properties in a derived class and append the
            string representation of the property if the <see cref="T:Syncfusion.ComponentModel.TracePropertyAttribute"/>
            has been set.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.SyncfusionCancelEventArgs">
            <summary>
            Provides data for a cancellable event. 
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionCancelEventArgs.#ctor">
            <summary>
            Overloaded. Initializes a new instance of the SyncfusionCancelEventArgs class.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionCancelEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SyncfusionCancelEventArgs class with the Cancel property set to the given value.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.SyncfusionSuccessEventArgs">
            <summary>
            Provides data for an event that indicates success or failure. 
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionSuccessEventArgs.#ctor">
            <summary>
            Overloaded. Initializes a new instance of the SyncfusionSuccessEventArgs class with the Success property set to True.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionSuccessEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SyncfusionSuccessEventArgs class with the Success property set to the given value.
            </summary>
            <param name="success"> Indicates whether an operation was successful.</param>
        </member>
        <member name="P:Syncfusion.ComponentModel.SyncfusionSuccessEventArgs.Success">
            <summary>
            Indicates whether an operation was successful.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.SyncfusionHandledEventArgs">
            <summary>
            Provides data for a event that can be handled by a subscriber and overrides the event's default behavior.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionHandledEventArgs.#ctor">
            <summary>
            Overloaded. Initializes a new instance of the SyncfusionHandledEventArgs class with the Handled property set to False.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionHandledEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SyncfusionHandledEventArgs class with the Handled property set to the given value.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.SyncfusionHandledEventArgs.Handled">
            <summary>
            Indicates whether the event has been handled and no further processing of the event should happen.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.CachedStyleInfoSubObjectIdentity">
            <summary>
            Provides style identity information for nested expandable objects of the GridStyleInfo and TreeStyleInfo classes.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.CachedStyleInfoSubObjectIdentity.#ctor(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Creates a new <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> object and associates it with a <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.
            </summary>
            <param name="owner">The <see cref="T:Syncfusion.Styles.StyleInfoBase"/> that owns this subobject.</param>
            <param name="sip">The <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> descriptor for this expandable subobject.</param>
        </member>
        <member name="M:Syncfusion.Styles.CachedStyleInfoSubObjectIdentity.GetBaseStyles(Syncfusion.Styles.IStyleInfo)">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.CachedStyleInfoSubObjectIdentity.OnStyleChanged(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.Internal.FrugalMapBase.Search(System.Int32)">
            <summary>
            Looks for an entry that contains the given key, null is returned if the
            key is not found. 
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.Internal.FrugalMapBase.Sort">
            <summary> 
            A routine used by enumerators that need a sorted map
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.Internal.FrugalMapBase.GetKeyValuePair(System.Int32,System.Int32@,System.Object@)">
            <summary>
            A routine used by enumerators to iterate through the map 
            </summary> 
        </member>
        <member name="M:Syncfusion.Styles.Internal.FrugalMapBase.Iterate(System.Collections.ArrayList,Syncfusion.Styles.Internal.FrugalMapIterationCallback)">
            <summary>
            A routine used to iterate through all the entries in the map
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.Internal.FrugalMapBase.Promote(Syncfusion.Styles.Internal.FrugalMapBase)">
            <summary> 
            Promotes the key/value pairs in the current collection to the next larger 
            and more complex storage model.
            </summary> 
        </member>
        <member name="P:Syncfusion.Styles.Internal.FrugalMapBase.Count">
            <summary>
            Size of this data store 
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.Internal.SingleObjectMap">
            <summary>
            A simple class to handle a single key/value pair
            </summary> 
        </member>
        <member name="T:Syncfusion.Styles.Internal.ThreeObjectMap">
            <summary>
            A simple class to handle a single object with 3 key/value pairs.  The pairs are stored unsorted 
            and uses a linear search.  Perf analysis showed that this yielded better memory locality and
            perf than an object and an array. 
            </summary> 
            <remarks>
            This map inserts at the last position.  Any time we add to the map we set _sorted to false. If you need 
            to iterate through the map in sorted order you must call Sort before using GetKeyValuePair.
            </remarks>
        </member>
        <member name="T:Syncfusion.Styles.Internal.SixObjectMap">
            <summary>
            A simple class to handle a single object with 6 key/value pairs.  The pairs are stored unsorted 
            and uses a linear search.  Perf analysis showed that this yielded better memory locality and
            perf than an object and an array.
            </summary>
            <remarks> 
            This map inserts at the last position.  Any time we add to the map we set _sorted to false. If you need
            to iterate through the map in sorted order you must call Sort before using GetKeyValuePair. 
            </remarks> 
        </member>
        <member name="T:Syncfusion.Styles.Internal.ArrayObjectMap">
            <summary>
            A simple class to handle an array of between 6 and 12 key/value pairs.  It is unsorted 
            and uses a linear search.  Perf analysis showed that this was the optimal size for both 
            memory and perf.  The values may need to be adjusted as the CLR and Avalon evolve.
            </summary> 
        </member>
        <member name="T:Syncfusion.Styles.Internal.FrugalMapIterationCallback">
            <summary> 
                FrugalMapIterationCallback
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StaticDataFieldAttribute">
            <summary>
            Allows you to specify a custom name for the StaticData field
            in a <see cref="T:Syncfusion.Styles.StyleInfoStore"/>. 
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StaticDataFieldAttribute.Default">
            <summary>
            Specifies the default field name as "staticDataStore".
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StaticDataFieldAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Styles.StaticDataFieldAttribute"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StaticDataFieldAttribute.IsDefaultAttribute">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.StaticDataFieldAttribute.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.StaticDataFieldAttribute.Equals(System.Object)">
            <override/>
        </member>
        <member name="P:Syncfusion.Styles.StaticDataFieldAttribute.FieldName">
            <summary>
            Returns the field name in the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> class 
            that identifies the static data store.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Styles.StyleInfoBase.Changed"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleChangedEventArgs.#ctor(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Initializes the object with the property that has changed.
            </summary>
            <param name="sip">Identifies the property that has changed.</param>
        </member>
        <member name="P:Syncfusion.Styles.StyleChangedEventArgs.Sip">
            <summary>
            Returns the property that has changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleChangedEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.Styles.StyleInfoBase.Changed"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.Styles.StyleChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Styles.CreateSubObjectHandler">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Styles.IStyleInfo">
            <summary>
            Defines an interface implemented both by <see cref="T:Syncfusion.Styles.StyleInfoBase"/> and <see cref="T:Syncfusion.Styles.StyleInfoStore"/>
            that allows you to check the state of the object, read and write specific property and execute
            style operations with the <see cref="M:Syncfusion.Styles.IStyleInfo.ModifyStyle(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleModifyType)"/>. method.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.IStyleInfo.IsEmpty">
            <summary>
            Indicates whether the style is empty.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.IStyleInfo.IsChanged">
            <summary>
            Indicates whether any properties for this object have changed since it was applied last time.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.IStyleInfo.IsSubset(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Compares all properties with another style object and indicates whether
            the current set of initialized properties is a subset of
            the other style object.
            </summary>
            <param name="style">The other style to compare with.</param>
            <returns>True if this style object is a subset of the other style object.</returns>
        </member>
        <member name="M:Syncfusion.Styles.IStyleInfo.ModifyStyle(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleModifyType)">
            <summary>
            Applies changes to a style object as specified with <see cref="T:Syncfusion.Styles.StyleModifyType"/>.
            </summary>
            <param name="style">The style object to be applied on the current object.</param>
            <param name="mt">The actual operation to be performed.</param>
        </member>
        <member name="M:Syncfusion.Styles.IStyleInfo.MergeStyle(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Merges two styles. Resets all properties that differ among the two style object
            and keeps only those properties that are equal.
            </summary>
            <param name="style">The other style object this style object should merge with.</param>
        </member>
        <member name="P:Syncfusion.Styles.IStyleInfo.Store">
            <summary>
            Returns the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object that holds all the data for this style object.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.IStyleInfo.ParseString(System.String)">
            <summary>
            Parses a given string and applies the results to affected properties in this style object.
            </summary>
            <param name="s">The string to be interpreted.</param>
            <remarks>
            <see cref="M:Syncfusion.Styles.IStyleInfo.ParseString(System.String)"/> consumes strings previously generated with
            a <see cref="M:Syncfusion.Styles.StyleInfoBase.ToString(System.String,System.IFormatProvider)"/> method call.
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.IStyleInfo.HasValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Indicates whether a specific property has been initialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.IStyleInfo.GetValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Queries the value for a specific property that has been initialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="T:Syncfusion.Styles.IStyleInfoSubObject">
            <summary>
            <see cref="T:Syncfusion.Styles.IStyleInfoSubObject"/> defines an interface for classes
            used as sub-objects in a <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> implements this interface.
            </remarks>
        </member>
        <member name="P:Syncfusion.Styles.IStyleInfoSubObject.Sip">
            <summary>
            Returns a unique identifier for this sub object in the owner style object. 
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.IStyleInfoSubObject.Owner">
            <summary>
            Returns a reference to the owner style object.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.IStyleInfoSubObject.Data">
            <summary>
            Returns the data for this object. This is the StyleInfoStore from the constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.IStyleInfoSubObject.MakeCopy(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Makes an exact copy of the current object.
            </summary>
            <param name="newOwner">The new owner style object for the copied object.</param>
            <param name="sip">The identifier for this object.</param>
            <returns>A copy of the current object and registered with the new owner style object.</returns>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoBase">
            <summary>
            Provides a wrapper object for the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object with type
            safe access to all properties stored in the style object.
            <para/>
            Style objects provide a very user friendly way to modify data. It is very much like in Excel VBA.
            For example, to change the bold setting for a cell, you simply call grid[5,2].Font.Bold = True.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Styles.StyleInfoBase"/> is a wrapper around the <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            It provides type safe accessor properties to modify data of the underlying
            data store and can hold temporary information about the style object that
            does not need to be persisted.
            <para/>
            In Essential Grid for the example, the GridStyleInfo class holds extensive identity
            information about a style object such as cached base styles, row and column index,
            a reference to the grid model, and more. This is all the information that can be discarded
            when the style is no longer used (because maybe the cell is not visible anymore). Only
            the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> part needs to be kept alive.
            <para/>
            Style objects only exist temporarily and will be created as a weak reference in a
            volatile data store. Once Garbage Collection kicks in smart style objects that are not
            referenced any more will be garbage collected. The volatile data cache can also be
            cleared manually.
            <para/>
            Because Style objects know their identity they can notify their owner of changes or
            load base style information when the user interacts with the style object. This allows
            you to make changes to a style object directly, such as Cell.Font.Bold = True;
            <para/>
            Style objects support property inheritance from parent styles, e.g. in a grid a cell
            can inherit properties from a parent row, column, table or a collection of names styles
            in a base styles map.
            <para/>
            Style objects support subobjects. Subobjects can support inheritance (e.g. a Font.Bold
            can be inherited). Immutable subobjects like BrushInfo don't support inheritance of
            individual properties.
            <para/>
            <see cref="T:Syncfusion.Styles.StyleInfoStore"/> allows you to register any number of properties but keeps the data
            very memory efficient. Only properties that are actually used for a style
            object will be allocated for an object. The StyleObjectStore handles the storage of the object.
            For short integers, enums and Boolean values, the data will be stored in a BitVector32
            structure to save even more memory.
            <para/>
            Programmers can derive their own style classes from <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/>
            and add type-safe (and intellisense)
            supported custom properties to the style class. If you write, for example, your own
            SpinButton class that needs individual properties, simply add a “CellSpinButtonInfo”
            class as subobject. If you derive CellSpinButtonInfo from StyleInfoSubObjectBase,
            your new object will support property inheritance from base styles.
            <para/>
            Style objects can be written into a string (see <see cref="M:Syncfusion.Styles.StyleInfoBase.ToString(System.String,System.IFormatProvider)"/>) and later be recreated
            using the <see cref="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)"/> method. When writing the string you have the option to show
            default values (use the “d” format). Subobjects will be identified with a dot
            ‘.’, e.g. “Font.Bold”
            <para/>
            Style object support several operations how to combine information from two styles. Style operations
            include: apply changes, apply initialized properties, override initialized properties, exclude properties.
            See the <see cref="M:Syncfusion.Styles.StyleInfoBase.ModifyStyle(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleModifyType)"/> method.
            <para/>
            Style objects integrate with <see cref="!:System.Windows.Forms.PropertyGrid"/>. The property grid
            displays values that belong to a style object in bold. Values that are inherited from parent
            styles will be displayed as default values. The user can select several cells in a grid and
            the <see cref="M:Syncfusion.Styles.StyleInfoBase.MergeStyle(Syncfusion.Styles.IStyleInfo)"/> operation will show common settings in the property grid as bold.
            <para/>
            Style objects support BeginUpdate, EndUpdate mechanism. This allows users to batch several operations
            on a style object into one transaction.
            <para/>
            </remarks>
            <example>The following example shows how you can use the GridFontInfo class in Essential Grid:
            <code lang="C#">
                    standard.Font.Facename = "Helvetica";
                    model[1, 3].Font.Bold = true;
                    string faceName = model[1, 3].Font.Facename; // any cell inherits standard style
                    Console.WriteLIne(faceName); // will output "Helvetica"
                    Console.WriteLIne(model[1, 3].Font.Bold); // will output "true"
                    Console.WriteLIne(model[1, 3].Font.HasFaceName); // will output "False"
            </code>
            </example>
            <seealso cref="T:Syncfusion.Styles.StyleInfoIdentityBase"/>
            <seealso cref="T:Syncfusion.Styles.StyleInfoStore"/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the contents of this object into an XML stream.
            </summary>
            <param name="writer">Represents the XML stream.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Not implemented and returns NULL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the contents of this object from an XML stream.
            </summary>
            <param name="reader">Represents the XML stream.</param>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoBase.identity">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoBase.Identity">
            <summary>
            Gets / sets the identity information for the current <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoBase._store">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoBase.expandableObjects">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoBase.Store">
            <summary>
            The <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object that holds all the data for this style object.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.SetStore(Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Sets the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object that holds all the data for this style object.
            </summary>
            <param name="store"></param>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoBase.ExpandableObjects">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoBase.CacheValues">
            <summary>
            Gets or sets a value indicating whether this instance should cache values for resolved base style properties.
            </summary>
            <value><c>true</c> if instance should cache values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.ClearCache">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="E:Syncfusion.Styles.StyleInfoBase.Changed">
            <summary>
            Occurs when a property in the style object or in a sub object is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoBase.WeakReferenceChangedListeners">
            <summary>
            A list of listeners that will be referenced using a WeakReference. The
            listeners must implement the <see cref="T:Syncfusion.Styles.IStyleChanged"/> interface. When
            this style object <see cref="M:Syncfusion.Styles.StyleInfoBase.OnStyleChanged(Syncfusion.Styles.StyleInfoProperty)"/> method is called it
            will then loop through all objects in this list and call each objects
            <see cref="M:Syncfusion.Styles.IStyleChanged.StyleChanged(Syncfusion.Styles.StyleChangedEventArgs)"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Styles.StyleInfoBase.Changing">
            <summary>
            Occurs before a property in the style object or in a sub object is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.#ctor">
            <summary>
            Overloaded. Initializes a new style object with no identity and data initialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.#ctor(Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            </summary>
            <param name="store">A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> that holds data for this object.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.#ctor(Syncfusion.Styles.StyleInfoIdentityBase,Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoStore"/> and <see cref="T:Syncfusion.Styles.StyleInfoIdentityBase"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoIdentityBase"/> that holds the identity for this <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.</param>
            <param name="store">A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> that holds data for this object.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.#ctor(Syncfusion.Styles.StyleInfoIdentityBase,Syncfusion.Styles.StyleInfoStore,System.Boolean)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoStore"/> and <see cref="T:Syncfusion.Styles.StyleInfoIdentityBase"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoIdentityBase"/> that holds the identity for this <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.</param>
            <param name="store">A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> that holds data for this object.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object.</param>
            <param name="cacheValues">if set to <c>true</c> the style the resulting value of a property when inherited from a basestyle
            so that the property does not have to be evaluated multiple times when called repeatedly.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.Dispose">
            <summary>
            Releases all resources used by the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.Equals(System.Object)">
            <summary>
            Indicates whether two style objects are equal. Identity is left out with this comparison,
            only the data (<see cref="P:Syncfusion.Styles.StyleInfoBase.Store"/>) are compared.
            </summary>
            <param name="obj">The other style object to compare the current object with.</param>
            <returns>True if both objects have equal data; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.EqualsObject(System.Object,System.Object)">
            <summary>
            Compares two objects for equality. Works also with NULL references.
            </summary>
            <param name="obj1">The first object to compare.</param>
            <param name="obj2">The second object to compare.</param>
            <returns>True if both objects are equal.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.GetHashCode">
            <summary>
            Returns a hash code which is based on values inside the <see cref="P:Syncfusion.Styles.StyleInfoBase.Store"/>.
            </summary>
            <returns>An integer hash code.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.ToString">
            <summary>
            Overloaded. Creates a formatted string for this style object. This string can
            later be consumed by <see cref="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)"/>.
            </summary>
            <returns>A string with formatted style information.</returns>
            <remarks>
            Style objects can be formatted into a string that can be consumed 
            by <see cref="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)"/> to recreate style information.
            <para/>
            When writing the string, you have the option to show default values 
            (use the “d” format). <para/>
            Subobjects will be identified with a period ".", e.g. "Font.Bold".
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.ToString(System.String,System.IFormatProvider)">
            <summary>
            Creates a formatted string for this style object. This string can
            later be consumed by <see cref="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)"/>. You can specify
            "d" as format if you want to write out default values inherited from a base style.
            </summary>
            <param name="format">Use "d" if default values should be included; "G" and NULL are default.</param>
            <returns>A string with formatted style information.</returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> to be used
            for the <see cref="M:Syncfusion.Styles.StyleInfoBase.ToString(System.String,System.IFormatProvider)"/> operation. Can be NULL.</param>
            <remarks>
            Style objects can be formatted into a string that can be consumed 
            by <see cref="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)"/> to recreate style information.
            <para/>
            When writing the string you have the option to show default values 
            (use the "d" format) or not. <para/>
            Subobjects will be identified with a period ".", e.g. "Font.Bold".
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)">
            <summary>
            Parses a given string and applies it's results to affected properties in this style object.
            </summary>
            <param name="s">The string to be parsed.</param>
            <remarks>
            <see cref="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)"/> consumes strings previously generated with
            a <see cref="M:Syncfusion.Styles.StyleInfoBase.ToString(System.String,System.IFormatProvider)"/> method call.
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.BeginUpdate">
            <summary>
            Suspends raising <see cref="E:Syncfusion.Styles.StyleInfoBase.Changed"/> events until <see cref="M:Syncfusion.Styles.StyleInfoBase.EndUpdate"/> is called.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.EndUpdate">
            <summary>
            Suspends raising <see cref="E:Syncfusion.Styles.StyleInfoBase.Changed"/> events and if changes were
            made before the <see cref="M:Syncfusion.Styles.StyleInfoBase.EndUpdate"/> call, it will raise a changed
            notification immediately.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.GetDefaultStyle">
            <summary>
            Override this method to return a default style object for your derived class.
            </summary>
            <returns>A default style object.</returns>
            <remarks>
            You should cache the default style object in a static field.
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.CreateSubObjectIdentity(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Override this method to create a product-specific identity object for a sub object.
            </summary>
            <returns>An identity object for a subobject of this style.</returns>
            <example>
            The following code is an example how Essential Grid creates GridStyleInfoSubObjectIdentity:
            <code lange="C#">
            public override StyleInfoSubObjectIdentity CreateSubObjectIdentity(StyleInfoProperty sip)
            {
            	return new GridStyleInfoSubObjectIdentity(this, sip);
            }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.GetDefaultStyleInfoStore(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Locates the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> in the list of base styles that 
            provides a specific property.
            </summary>
            <param name="sip">Identifies the property to look for.</param>
            <returns>The style store object that has the specified property.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.IntGetDefaultStyleInfo(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Locates the base style that has the specified property and returns its instance.
            </summary>
            <param name="sip">Identifies the property to look for.</param>
            <returns>The style object that has the specified property.</returns>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoBase.inStyleChanged">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.OnStyleChanged(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Notifies the associated identity object that a specific property
            was changed and raises a <see cref="E:Syncfusion.Styles.StyleInfoBase.Changed"/> event.
            </summary>
            <param name="sip">Identifies the property to look for.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.OnStyleChanging(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Notifies the associated identity object that a specific property
            will be changed and raises a <see cref="E:Syncfusion.Styles.StyleInfoBase.Changing"/> event.
            </summary>
            <param name="sip">Identifies the property to look for.</param>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoBase.IsEmpty">
            <summary>
            Indicates whether the style is empty.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoBase.IsChanged">
            <summary>
            Indicates whether any properties for this object have changed since it was applied last time.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.IsSubset(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Compares all properties with another style object and indicates
            whether the current set of initialized properties is a subset of
            the other style object.
            </summary>
            <param name="istyle">The other style to compare with.</param>
            <returns>True if this style object is a subset of the other style object.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.ModifyStyle(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleModifyType)">
            <summary>
            Applies changes to a style object as specified with <see cref="T:Syncfusion.Styles.StyleModifyType"/>.
            </summary>
            <param name="istyle">The style object to be applied on the current object.</param>
            <param name="mt">The actual operation to be performed.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.MergeStyle(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Merges two styles. Resets all properties that differ among the two style objects
            and keeps only those properties that are equal.
            </summary>
            <param name="istyle">The other style object this style object should merge with.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.HasValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Indicates whether the specified property has been initialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.ResetValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Marks the specified property as uninitialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.GetValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Queries the value for the specified property that has been initialized for the current object
            or locates it in a base style.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.GetShortValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Queries the <see cref="T:System.Int16"/> value for the specified property that has been initialized for the current object
            or locates it in a base style.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.SetValue(Syncfusion.Styles.StyleInfoProperty,System.Object)">
            <summary>
            Overloaded. Initializes the value for the specified property.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <param name="value">The value to be saved for the property.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.SetValue(Syncfusion.Styles.StyleInfoProperty,System.Int16)">
            <summary>
            Initializes the <see cref="T:System.Int16"/> value for the specified property.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <param name="value">The value to be saved for the property.</param>
        </member>
        <member name="T:Syncfusion.Styles.SerializePropertyAttribute">
            <summary>
            Specifies whether a property should be serialized.
            </summary>
            <seealso cref="!:SyncfusionEventArgs"/>
        </member>
        <member name="F:Syncfusion.Styles.SerializePropertyAttribute.Yes">
            <summary>
              <para>Specifies that a property should be serialized. 
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.SerializePropertyAttribute.No">
            <summary>
              <para>Specifies that a property should not be serialized. 
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.SerializePropertyAttribute.Default">
            <summary>
            The default setting for this attribute.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.SerializePropertyAttribute.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:Syncfusion.Styles.SerializePropertyAttribute" /> class.</para>
            </summary>
            <param name="serializeProperty">
              <see langword="True" /> if a property should be serialized; <see langword="False" /> otherwise. The default is <see langword="True" />.</param>
        </member>
        <member name="M:Syncfusion.Styles.SerializePropertyAttribute.IsDefaultAttribute">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.SerializePropertyAttribute.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.SerializePropertyAttribute.Equals(System.Object)">
            <override/>
        </member>
        <member name="P:Syncfusion.Styles.SerializePropertyAttribute.SerializeProperty">
            <summary>
              <para>Indicates whether a property is shown in the ToString result.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.SerializePropertyAttribute.IsSerializeProperty(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Styles.SerializePropertyAttribute"/> has been set for the property.
            </summary>
            <param name="info">A <see cref="T:System.Reflection.PropertyInfo"/></param>
            <returns>True if property has a <see cref="T:Syncfusion.Styles.SerializePropertyAttribute"/>; False otherwise.</returns>
        </member>
        <member name="T:Syncfusion.Styles.CloneablePropertyAttribute">
            <summary>
            Specifies whether a property should be cloned.
            </summary>
            <seealso cref="!:SyncfusionEventArgs"/>
        </member>
        <member name="F:Syncfusion.Styles.CloneablePropertyAttribute.Yes">
            <summary>
              <para>Specifies that a property should be cloned if the assigned object implements ICloneable. 
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.CloneablePropertyAttribute.No">
            <summary>
              <para>Specifies that a property should never be cloned even if the assigned object implements ICloneable
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.CloneablePropertyAttribute.Default">
            <summary>
            The default setting for this attribute.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.CloneablePropertyAttribute.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:Syncfusion.Styles.CloneablePropertyAttribute" /> class.</para>
            </summary>
            <param name="cloneableProperty">
              <see langword="True" /> if a property should be should be cloned if the assigned object implements ICloneable; <see langword="False" /> otherwise. The default is <see langword="True"/></param>
        </member>
        <member name="M:Syncfusion.Styles.CloneablePropertyAttribute.IsDefaultAttribute">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.CloneablePropertyAttribute.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.CloneablePropertyAttribute.Equals(System.Object)">
            <override/>
        </member>
        <member name="P:Syncfusion.Styles.CloneablePropertyAttribute.CloneableProperty">
            <summary>
              <para>Indicates whether a property should be cloned if the assigned object implements ICloneable.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.CloneablePropertyAttribute.IsCloneableProperty(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Styles.CloneablePropertyAttribute"/> has been set for the property.
            </summary>
            <param name="info">A <see cref="T:System.Reflection.PropertyInfo"/></param>
            <returns>True if property has a <see cref="T:Syncfusion.Styles.CloneablePropertyAttribute"/>; false otherwise.</returns>
        </member>
        <member name="T:Syncfusion.Styles.DisposeablePropertyAttribute">
            <summary>
            Specifies whether a property should be disposed.
            </summary>
            <seealso cref="!:SyncfusionEventArgs"/>
        </member>
        <member name="F:Syncfusion.Styles.DisposeablePropertyAttribute.Yes">
            <summary>
              <para>Specifies that a property should be disposed if the assigned object implements IDisposeable. 
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.DisposeablePropertyAttribute.No">
            <summary>
              <para>Specifies that a property should never be disposed even if the assigned object implements IDisposeable
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.DisposeablePropertyAttribute.Default">
            <summary>
            The default setting for this attribute.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.DisposeablePropertyAttribute.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:Syncfusion.Styles.DisposeablePropertyAttribute" /> class.</para>
            </summary>
            <param name="disposeableProperty">
              <see langword="True" /> if a property should be should be disposed if the assigned object implements IDisposeable; <see langword="False" /> otherwise. The default is <see langword="True"/></param>
        </member>
        <member name="M:Syncfusion.Styles.DisposeablePropertyAttribute.IsDefaultAttribute">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.DisposeablePropertyAttribute.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.DisposeablePropertyAttribute.Equals(System.Object)">
            <override/>
        </member>
        <member name="P:Syncfusion.Styles.DisposeablePropertyAttribute.DisposeableProperty">
            <summary>
              <para>Indicates whether a property should be disposed if the assigned object implements IDisposeable.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.DisposeablePropertyAttribute.IsDisposeableProperty(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Styles.DisposeablePropertyAttribute"/> has been set for the property.
            </summary>
            <param name="info">A <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>True if property has a <see cref="T:Syncfusion.Styles.DisposeablePropertyAttribute"/>; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Styles.DisposeablePropertyAttribute.IsDisposableProperty(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Styles.DisposeablePropertyAttribute"/> has been set for the property.
            </summary>
            <param name="info">A <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>True if property has a <see cref="T:Syncfusion.Styles.DisposeablePropertyAttribute"/>; false otherwise.</returns>
        </member>
        <member name="T:Syncfusion.Styles.IStyleCloneable">
            <summary>
            Implement this interface if you want to assign this class to a <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object's
            property and you need to control whether the object should be cloned.
            </summary>
            <remarks>
            This interface is only considered if the <see cref="T:Syncfusion.Styles.CloneablePropertyAttribute"/> of
            <see cref="F:Syncfusion.Styles.StyleInfoProperty.IsCloneable"/> of the <seea cref="T:Syncfusion.Styles.StyleInfoProperty"/> is True. 
            (This is the default.) 
            </remarks>
            <seealso cref="F:Syncfusion.Styles.StyleInfoProperty.IsCloneable"/> 
            <seealso cref="T:Syncfusion.Styles.CloneablePropertyAttribute"/>
        </member>
        <member name="M:Syncfusion.Styles.IStyleCloneable.Clone">
            <summary>
            Clones this object.
            </summary>
            <returns>A reference to a clone of this object.</returns>
        </member>
        <member name="M:Syncfusion.Styles.IStyleCloneable.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.IStyleCloneable.ShouldClone">
            <summary>
            Returns True if this object should be cloned if you assign it to a <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object's
            property; false otherwise.
            </summary>
            <returns>True if this object should be cloned if you assign it to a <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object's
            property; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Styles.IStyleCloneable.ShouldDispose">
            <summary>
            Returns True if this object should be disposed if it is reset in a <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object's
            property; false otherwise.
            </summary>
            <returns>True if this object should be disposed if it is reset in a <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object's
            property; false otherwise.</returns>
        </member>
        <member name="T:Syncfusion.Styles.IStyleChanged">
            <summary>
            Implements the <see cref="M:Syncfusion.Styles.IStyleChanged.StyleChanged(Syncfusion.Styles.StyleChangedEventArgs)"/> method which is called from
            <see cref="M:Syncfusion.Styles.StyleInfoBase.OnStyleChanged(Syncfusion.Styles.StyleInfoProperty)"/> of a <see cref="T:Syncfusion.Styles.StyleInfoBase"/>
            if the object is in <see cref="P:Syncfusion.Styles.StyleInfoBase.WeakReferenceChangedListeners"/>
            collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.IStyleChanged.StyleChanged(Syncfusion.Styles.StyleChangedEventArgs)">
            <summary>
            Called from <see cref="M:Syncfusion.Styles.StyleInfoBase.OnStyleChanged(Syncfusion.Styles.StyleInfoProperty)"/> of a 
            <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object.
            </summary>
            <param name="e">The <see cref="!:Syncfusion.Windows.Styles.StyleChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoBaseConverter">
            <summary>
               <para>Provides a type converter to convert expandable objects to and from various
                  other representations.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBaseConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
               <para>Indicates whether this object supports properties using the
                  specified context.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBaseConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
               <para>Indicates whether this converter can
                  convert an object to the given destination type using the specified context.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBaseConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
               <para>Converts the given value object to
                  the specified destination type using the specified context and arguments.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBaseConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
               <para>Returns a collection of properties for
                  the type of array specified by the value parameter using the specified context and
                  attributes.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoIdentityBase">
            <summary>
            This is an abstract base class that provides identity information
            for <see cref="T:Syncfusion.Styles.StyleInfoBase"/>  objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoIdentityBase.InnerIdentity">
            <summary>
            Gets / sets another identity object to be used for determining base styles.
            GetBaseStyle will call InnerIdentity.GetBaseStyle if this object is not NULL.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoIdentityBase.GetBaseStyle(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Loops through all base styles until it finds a style that has a specific property initialized.
            </summary>
            <param name="thisStyleInfo"></param>
            <param name="sipSrc">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <returns>A <see cref="T:Syncfusion.Styles.StyleInfoBase"/> that has the property initialized.</returns>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoIdentityBase.IsDisposable">
            <summary>
            Gets or sets a value indicating whether this object is disposable.
            </summary>
            <value>
            	<c>true</c> if this object is disposable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoIdentityBase.Dispose">
            <summary>
            Releases all resources used by the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoIdentityBase.GetBaseStyleNotEmptyExpandable(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Loops through all base styles until it finds an expandable <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/>
            that has one or more properties initialized.
            </summary>
            <param name="thisStyleInfo">The style object.</param>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <returns>A <see cref="T:Syncfusion.Styles.StyleInfoBase"/> that has the property initialized.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoIdentityBase.GetBaseStyles(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Returns an array with base styles for the specified style object.
            </summary>
            <param name="thisStyleInfo">The style object.</param>
            <returns>An array of style objects that are base styles for the current style object.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoIdentityBase.OnStyleChanged(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Occurs when a property in the <see cref="T:Syncfusion.Styles.StyleInfoBase"/> has changed.
            </summary>
            <param name="style">The <see cref="T:Syncfusion.Styles.StyleInfoBase"/> instance that has changed.</param>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoIdentityBase.OnStyleChanging(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Occurs before a property in the <see cref="T:Syncfusion.Styles.StyleInfoBase"/> is changing.
            </summary>
            <param name="style">The <see cref="T:Syncfusion.Styles.StyleInfoBase"/> instance that is changed.</param>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoObjectStore">
            <internalonly/>    
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoProperty">
            <summary>
            Provides a unique identifier for a property in a style object and stores
            information about the associated property.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> is allocated once on the global heap for each
            property in a style object. Type safe <see cref="T:Syncfusion.Styles.StyleInfoBase"/> wrappers make
            use of StyleInfoProperty to query, set or reset specific properties.
            <para/>
            Holds information about the property: PropertyType, Name, how to load and save
            its state in StyleInfoStore, attributes, etc.
            </remarks>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.ComponentType">
            <summary>
            The type of the component this property is bound to.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.PropertyType">
            <summary>
            The type of the property.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.PropertyName">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.CreateObject">
            <summary>
            Represents a method that creates a Subobject of this type and associates it with a parent style object.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.IsExpandable">
            <summary>
            Indicates whether this is an object derived from <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.IsSerializable">
            <summary>
            Indicates whether this object supports being serialized. The value can be set
            with a <see cref="T:Syncfusion.Styles.SerializePropertyAttribute"/> in your class implementation.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.IsCloneable">
            <summary>
            Indicates whether this object should call ICloneable.Clone when an assigned object implements
            the ICloneable or <see cref="T:Syncfusion.Styles.IStyleCloneable"/> interface. The value can be set
            with a <see cref="T:Syncfusion.Styles.CloneablePropertyAttribute"/> in your class implementation.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.IsDisposable">
            <summary>
            Indicates whether this object should call ICloneable.Clone when an assigned object implements
            the IDisposable or <see cref="T:Syncfusion.Styles.IStyleCloneable"/> interface. The value can be set
            also with a <see cref="T:Syncfusion.Styles.DisposeablePropertyAttribute"/> in your class implementation.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.IsBrowsable">
            <summary>
            If property is marked with Browsable(true), custom attribute of this flag allows you
            to specify whether the property should appear in PropertyGrid. If property is marked
            with Browsable(false), then this setting will have no effect. Default is true.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.IsAnyObject">
            <summary>
            Indicates whether type information should be included when <see cref="E:Syncfusion.Styles.StyleInfoProperty.Format"/> is called. Use
            this if PropertyType is System.Obbject and you want to be able to parse written values.
            An example is GridStyleInfo.CellValue. Default is false.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.IsConvertibleToBase64">
            <summary>
            Indicates whether type information should be converted to Base64 if associated
            Type converter supports converting value to and from Base64. An example is a bitmap assigned to GridStyleInfo.CellValue.
            If IsConvertibleToBase64String is true, then the grid will convert the bitmap to a Base64 string
            and write out the information in the GridStyleInfo.ToString() method and also in the WriteXml method. Default is false.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.SerializeXmlBehavior">
            <summary>
            Defines how to serialize property when style data is serialized to or from an XML stream
            with <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoProperty.GetPropertyInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.PropertyInfo"/> of this property.
            </summary>
            <returns>Property info of this property.</returns>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.DataVectorIndex">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.DataVectorSection">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.MaxValue">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.ObjectStoreKey">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.ExpandableObjectStoreKey">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.PropertyKey">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.BitVectorMask">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.BitVectorIndex">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.Index">
            <exclude/>
        </member>
        <member name="E:Syncfusion.Styles.StyleInfoProperty.Parse">
            <summary>
            Handles parse requests for this property.
            </summary>
        </member>
        <member name="E:Syncfusion.Styles.StyleInfoProperty.Format">
            <summary>
            Handles formatting requests for this property.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoProperty.Dispose">
            <summary>
            Method to dispose StyleInfoProperty object
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoProperty.#ctor(System.Type,System.String,System.Int16,System.Type)">
            <summary>
            Initializes a new StyleInfoProperty.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoProperty.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoProperty.FormatValue(System.Object)">
            <summary>
            Formats a given value that is of the same type as the <see cref="F:Syncfusion.Styles.StyleInfoProperty.PropertyType"/>.
            </summary>
            <param name="value">The value to be formatted.</param>
            <returns>A string with formatted text.</returns>
            <remarks><see cref="M:Syncfusion.Styles.StyleInfoStore.ToString"/> calls this method.
            <para/>
            The <see cref="E:Syncfusion.Styles.StyleInfoProperty.Format"/> event lets you customize the formatting of this property but care
            should be taken that the formatted text can be consumed by the <see cref="M:Syncfusion.Styles.StyleInfoProperty.ParseValue(System.String)"/>
            method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoProperty.ParseValue(System.String)">
            <summary>
            Overloaded. Parses a given value that is of the same type as the <see cref="F:Syncfusion.Styles.StyleInfoProperty.PropertyType"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <returns>An object of the same type as the <see cref="F:Syncfusion.Styles.StyleInfoProperty.PropertyType"/> created from the parsed string information.</returns>
            <remarks>
            <see cref="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)"/> calls this method.
            <para/>
            The <see cref="E:Syncfusion.Styles.StyleInfoProperty.Parse"/> event lets you customize the parsing of this property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoProperty.ParseValue(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Parses a given value and converts it to a requested <see cref="T:System.Type"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="resultType">The <see cref="T:System.Type"/> for the resulting object.</param>
            <param name="provider">A format provider.</param>
            <returns>An object of type "resultType" created from the parsed string information.</returns>
            <remarks>
            The <see cref="E:Syncfusion.Styles.StyleInfoProperty.Parse"/> event lets you customize the parsing of this property.
            </remarks>
        </member>
        <member name="E:Syncfusion.Styles.StyleInfoProperty.WriteXml">
            <summary>
            Handles requests to serialize this property to an XML stream during an
            <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)"/> operation of the <see cref="T:System.Xml.Serialization.XmlSerializer"/>
            class.
            </summary>
            <remarks>
            This event allows you to implement a different serialization mechanism if many style objects
            reference and share the same object, (e.g. if you assign a DataSet to
            several objects DataSource property). With such a scenario, you could write out an
            identifier and when the property is deserialized from an XML stream, you could
            reconstruct a reference to a datasource object based on the identifier.
            </remarks>
        </member>
        <member name="E:Syncfusion.Styles.StyleInfoProperty.ReadXml">
            <summary>
            Handles requests to deserialize this property from an XML stream during an
            <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)"/> operation of the <see cref="T:System.Xml.Serialization.XmlSerializer"/>
            class.
            </summary>
            <remarks>
            This event allows you to implement a different serialization mechanism if many style objects
            reference and share the same object, (e.g. if you assign a DataSet to
            several objects DataSource property). With such a scenario, you could write out an
            identifier and when the property is deserialized from an XML stream you could
            reconstruct a reference to a datasource object based on the identifier.
            </remarks>
        </member>
        <member name="T:Syncfusion.Styles.SerializeXmlBehavior">
            <summary>
            Defines how to serialize property when style data is serialized to or from an XML stream.
            with <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.SerializeXmlBehavior.Default">
            <summary>
            Default. Serialize as string when type is simple. Using XmlSerializer for complex types
            or properties where the actual type is not known at compile-time (e.g. CellValue).
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.SerializeXmlBehavior.Skip">
            <summary>
            Skip this property. Do not serialize.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.SerializeXmlBehavior.SerializeAsString">
            <summary>
            Serialize this property as string using <see cref="M:Syncfusion.Styles.StyleInfoProperty.FormatValue(System.Object)"/> and
            <see cref="M:Syncfusion.Styles.StyleInfoProperty.ParseValue(System.String)"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.SerializeXmlBehavior.SerializeWithXmlSerializer">
            <summary>
            Serialize this property using <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoPropertyConvertEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Styles.StyleInfoProperty.Format"/> and <see cref="E:Syncfusion.Styles.StyleInfoProperty.Parse"/> events.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Styles.StyleInfoPropertyConvertEventArgs"/> is used to format and unformat values represented by
            a property in a <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object. The Format event occurs whenever a property
            is written out as string and the Parse event occurs whenever the value is read back in from a string.
            <para/>
            If you handle this event, store the resulting value into <see cref="P:Syncfusion.Styles.StyleInfoPropertyConvertEventArgs.Value"/> and
            set <see cref="P:Syncfusion.ComponentModel.SyncfusionHandledEventArgs.Handled"/> to True.
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoPropertyConvertEventArgs.#ctor(System.Object,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Styles.StyleInfoPropertyConvertEventArgs"/> class.
            </summary>
            <param name="value">An Object that contains the value of the current property.</param>
            <param name="desiredType">The Type of the value.</param>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyConvertEventArgs.Value">
            <summary>
            Gets / sets the value of the <see cref="T:Syncfusion.Styles.StyleInfoPropertyConvertEventArgs"/> object.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyConvertEventArgs.DesiredType">
            <summary>
            Returns the data type of the desired value.
            </summary>
            <remarks>
            The DesiredType property enables you to check the type of the property that the value is being converted to.
            </remarks>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoPropertyConvertEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.Styles.StyleInfoProperty.Format"/> or <see cref="E:Syncfusion.Styles.StyleInfoProperty.Parse"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.Styles.StyleInfoProperty.WriteXml"/> event of <see cref="T:Syncfusion.Styles.StyleInfoProperty"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Styles.StyleInfoProperty.WriteXml"/> event.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventArgs"/> is used to serialize a property of a
            <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object. The WriteXml event occurs whenever a property
            is serialized to an XML stream during an <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)"/> operation
            of the <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
            <para/>
            If you handle this event, you set <see cref="P:Syncfusion.ComponentModel.SyncfusionHandledEventArgs.Handled"/> to True.
            Handling this event allows you to customize the way the object is serialized or skip
            serialization.
            <para/>
            This event allows you to implement a different serialization mechanism if many style objects
            reference and share the same object, (e.g. if you assign a DataSet to
            several objects' DataSource property). With such a scenario, you could write out a
            identifier and when the property is deserialized from an XML stream, you could
            reconstruct a reference to a datasource object based on the identifier.
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventArgs.#ctor(System.Xml.XmlWriter,Syncfusion.Styles.StyleInfoStore,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventArgs"/> object.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> for the XML stream.</param>
            <param name="store">The style object that is being serialized.</param>
            <param name="sip">The property that is being serialized.</param>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventArgs.Writer">
            <summary>
            Returns the <see cref="T:System.Xml.XmlWriter"/> for the XML stream.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventArgs.Store">
            <summary>
            Returns the style object that is being serialized.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventArgs.Sip">
            <summary>
            Returns the property that is being serialized. Call <see cref="M:Syncfusion.Styles.StyleInfoStore.GetValue(Syncfusion.Styles.StyleInfoProperty)"/> of
            the <see cref="P:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventArgs.Store"/> to get the value for this property.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoPropertyReadXmlEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.Styles.StyleInfoProperty.ReadXml"/> event of <see cref="T:Syncfusion.Styles.StyleInfoProperty"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Styles.StyleInfoProperty.ReadXml"/> event.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs"/> is used to deserialize a property of a
            <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object. The ReadXml event occurs whenever a property
            is deserialized from an XML stream during an <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)"/>
            operation of the <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
            <para/>
            If you handle this event, you set <see cref="P:Syncfusion.ComponentModel.SyncfusionHandledEventArgs.Handled"/> to True.
            Call <see cref="M:Syncfusion.Styles.StyleInfoStore.SetValue(Syncfusion.Styles.StyleInfoProperty,System.Object)"/> of
            the <see cref="P:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs.Store"/> to save the value for this property into the style object.
            Handling this event allows you to customize the way the object is deserialized or skip
            serialization.
            <para/>
            This event allows you to implement a different serialization mechanism if many style objects
            reference and share the same object, (e.g. if you assign a DataSet to
            several objects DataSource property). With such a scenario, you could write out an
            identifier and when the property is deserialized from an XML stream you could
            reconstruct a reference to a datasource object based on the identifier.
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs.#ctor(System.Xml.XmlReader,Syncfusion.Styles.StyleInfoStore,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs"/> object.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> for the XML stream.</param>
            <param name="store">The style object that is deserialized.</param>
            <param name="sip">The property that is being deserialized.</param>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs.Reader">
            <summary>
            Returns the <see cref="T:System.Xml.XmlReader"/> for the XML stream.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs.Store">
            <summary>
            Returns the style object that is deserialized.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs.Sip">
            <summary>
            Returns the property that is being deserialized. Call <see cref="M:Syncfusion.Styles.StyleInfoStore.SetValue(Syncfusion.Styles.StyleInfoProperty,System.Object)"/> of
            the <see cref="P:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs.Store"/> to save the value for this property into the style object.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.CanResetValue(System.Object)">
            <exclude/>
            <summary>
               Indicates whether the component will allow its value to be reset.
            </summary>
            <param name="comp">The component to reset.</param>
            <returns>
               True if the component supports resetting of its value.
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
            </returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.GetValue(System.Object)">
            <exclude/>
            <summary>
               Retrieves the value of the property for the given component. This will
               throw an exception if the component does not have this property.
            </summary>
            <param name="comp">The component.</param>
            <returns>
               The value of the property. This can be cast
               to the property type.
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
            </returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.ResetValue(System.Object)">
            <exclude/>
            <summary>
               Resets the value of this property on the specified component to the default value.
            </summary>
            <param name="comp">The component whose property is to be reset.</param>
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.SetValue(System.Object,System.Object)">
            <exclude/>
            <summary>
               Sets the value of this property on the specified component.
            </summary>
            <param name="comp">The component whose property is to be set.</param>
            <param name="value">The new value of the property.</param>
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <exclude/>
            <summary>
               <para>Indicates whether this property should be persisted. A property is
                  to be persisted if it is marked as persistable through a
                  PersistableAttribute and if the property contains something other
                  than the default value. Note, however, that this method will
                  return True for design-time properties as well, so callers
                  should also check to see if a property is design-time only before
                  persisting to run-time storage.</para>
            </summary>
            <param name='comp'>The component on which the property resides.</param>
            <returns>
               <para>True if the property should be persisted to either
                  design-time or run-time storage.</para>
            </returns>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.ComponentType">
            <exclude/>
            <summary>
               Retrieves the type of the component this PropertyDescriptor is bound to.
            </summary>
            <returns>
               The type of component.
            </returns>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.DisplayName">
            <exclude/>
            <summary>
               Retrieves the display name of the property. This is the name that will
               be displayed in a property browser. This will be the same as the property
               name for most properties.
            </summary>
            <returns>
               A string containing the name to display in the property browser.
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
            </returns>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.IsReadOnly">
            <exclude/>
            <summary>
               Indicates whether the property can be written to.
            </summary>
            <returns>
               True if the property can be written to.
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
            </returns>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.PropertyType">
            <exclude/>
            <summary>
               Retrieves the data type of the property.
            </summary>
            <returns>
               A class representing the data type of the property.
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
            </returns>
        </member>
        <member name="T:Syncfusion.Styles.ValueConvert">
            <summary>
            <see cref="T:Syncfusion.Styles.ValueConvert"/> provides conversion routines for values
            to convert them to another type and routines for formatting values.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <overload>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </overload>
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="format">Format string.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Overloaded. Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String)">
            <summary>
            Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String[],System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="formats">A string array holding permissible formats used in a <see cref="M:System.Object.ToString"/> call. Right now
            formats is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)">
            <summary>
            Generates display text using the specified format, culture info and number format.
            </summary>
            <param name="value">The value to format.</param>
            <param name="valueType">The value type on which formatting is based. The original value will first be converted to this type.</param>
            <param name="format">The format like in ToString(string format).</param>
            <param name="ci">The <see cref="T:System.Globalization.CultureInfo"/> for formatting the value.</param>
            <param name="nfi">The <see cref="T:System.Globalization.NumberFormatInfo"/> for formatting the value.</param>
            <returns>The string with the formatted text for the value.</returns>
        </member>
        <member name="P:Syncfusion.Styles.ValueConvert.AllowFormatValueTrimEnd">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Styles.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)"/> should trim whitespace characters from
            the end of the formatted text.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.GetDefaultValue(System.Type)">
            <summary>
            Returns a representative value for any given type. Is useful to preview the
            result of a format in <see cref="!:System.Windows.Forms.PropertyGrid"/>. See <see cref="!:Syncfusion.Windows.Forms.Grid.GridStyleInfo.FormatPreview"/>
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>A value with the specified type.</returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@)">
            <summary>
            Overloaded. Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@,System.Boolean)">
            <summary>
            Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <param name="allowConvertFromBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.TryConvertFromBase64String(System.Type,System.String,System.Object@)">
            <summary>
            Indicates whether the TypeConverter associated with the type supports conversion to/from a byte array (e.g. an Image). 
            If that is the case the string is converted to a byte array from a base64 string.
            </summary>
            <param name="type"></param>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.FormatValueWithTypeInformation(System.Object)">
            <summary>
            Overloaded. Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.FormatValueWithTypeInformation(System.Object,System.Boolean)">
            <summary>
            Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <param name="allowConvertToBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.TryConvertToBase64String(System.Object)">
            <summary>
            Indicates whether the TypeConverter associated with the type supports conversion to/from a byte array (e.g. an Image). 
            If that is the case the string is converted to a base64 string from a byte array.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.GetTypeName(System.Type)">
            <summary>
            Returns the type name. If type is not in mscorlib, the assembly name is appended.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.IsEmpty(System.String)">
            <summary>
            Indicates whether string is null or empty.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Styles.StaticData">
            <summary>
            Holds all StyleInfoProperties used by derived classes.
            This should go in a product specific StaticData.<para/>
            The concrete Style class could provide a static memory StaticData that belongs
            to the process and library.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.Dispose">
            <summary>
            Method to dispose static data object internally for disposing Chart styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StaticData.StyleInfoType">
            <summary>
            Gets type of StyleInfo which is parent of store with current staticdata
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StaticData.StyleInfoProperties">
            <summary>
            Returns a collection with <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.#ctor(System.Type,System.Type,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Styles.StaticData"/> object with information about the parent style class.
            </summary>
            <param name="type"></param>
            <param name="styleInfoType">Will be used to access the PropertyInfo and its custom attributes for a property.</param>
            <param name="sortProperties"></param>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.CreatePropertyGridSortOrder(System.String[])">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Styles.StaticData.PropertyGridSortOrder">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.AllocateDataVectorSection(System.Int16,System.Int32@)">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Styles.StaticData.IsEmpty">
            <summary>
            Indicates whether properties have been registered. Returns True if not registered; False otherwise.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String)">
            <overload>
            Registers a <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> for the specified property.
            </overload>
            <summary>
            Registers a <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String,Syncfusion.Styles.StyleInfoPropertyOptions)">
            <summary>
            Registers a <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <param name="propertyOptions">Specifies options for the property.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String,System.Int16)">
            <summary>
            Registers a <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <param name="maxValue">The maximal possible Int16 value for the property.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String,System.Int16,System.Boolean)">
            <summary>
            Registers a <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <param name="maxValue">The maximal possible Int16 value for the property.</param>
            <param name="makeBitValue">Indicates whether this StyleInfoProperty should be registered as a member of the BitArray and not to allocate
            an object reference.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String,System.Int16,System.Boolean,Syncfusion.Styles.StyleInfoPropertyOptions)">
            <summary>
            Registers a <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <param name="maxValue">The maximal possible Int16 value for the property.</param>
            <param name="makeBitValue">Indicates whether this StyleInfoProperty should be registered as a member of the BitArray and not to allocate
            an object reference.</param>
            <param name="propertyOptions">Specifies options for the property.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String,System.Int16,System.Boolean,System.Type,Syncfusion.Styles.StyleInfoPropertyOptions)">
            <summary>
            Registers a <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <param name="maxValue">The maximal possible Int16 value for the property.</param>
            <param name="makeBitValue">Indicates whether this StyleInfoProperty should be registered as a member of the BitArray and not to allocate
            an object reference.</param>
            <param name="propertyOptions">Specifies options for the property.</param>
            <param name="componentType">The component type that hosts the property.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoStore">
             <summary>
             Provides storage for the <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object.
             </summary>
             <remarks>
             You cannot instantiate a <see cref="T:Syncfusion.Styles.StyleInfoStore"/> class directly. You have
             to derive a concrete class from this class that you can instantiate.<para/>
             In derived classes of <see cref="T:Syncfusion.Styles.StyleInfoBase"/>, you always need to
             implement a <see cref="T:Syncfusion.Styles.StyleInfoBase"/> / <see cref="T:Syncfusion.Styles.StyleInfoStore"/>
             pair. The <see cref="T:Syncfusion.Styles.StyleInfoStore"/> holds all the data that are specific
             to the style object and should be persisted.<para/>
             The <see cref="T:Syncfusion.Styles.StyleInfoBase"/> is a wrapper around the <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
             It provides type safe accessor properties to modify data of the underlying
             data store and can hold temporary information about the style object that
             does not need to be persisted.<para/>
            
             In Essential Grid for example, the GridStyleInfo class holds extensive identity
             information about a style object such as cached base styles, row and column index,
             a reference to the grid model and more. These are all the information that can be discarded
             when the style is no longer used (because maybe the cell is not visible anymore). Only
             the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> part needs to be kept alive.
             <para/>
             <see cref="T:Syncfusion.Styles.StyleInfoStore"/> allows you to register any number of properties but keeps the data
             very memory efficient. Only properties that are actually used for a style
             object will be allocated for an object. The StyleObjectStore handles the storage of objects.
             For short integers, enums and Boolean values the data will be stored in a BitVector32
             structure to save even more memory.
             <para/>
             See the overview for <see cref="T:Syncfusion.Styles.StyleInfoBase"/> for further discussion about style objects.
             </remarks>
             <seealso cref="T:Syncfusion.Styles.StyleInfoIdentityBase"/>
             <seealso cref="T:Syncfusion.Styles.StyleInfoBase"/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.FindStyleInfoProperty(System.String)">
            <summary>
            Searches the <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> with the given name.
            </summary>
            <param name="name">The name of the property to look for.</param>
            <returns>A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that is associated with the specified name.</returns>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoStore.StyleInfoProperties">
            <summary>
            Returns a collection with <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoStore.StaticDataStore">
            <summary>
            Static data must be declared static in derived classes (this avoids collisions
            when StyleInfoStore is used in the same project for different types of style
            classes).
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Styles.StyleInfoStore"/> from a serialization stream.
            </summary>
            <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialized stream specified by info. </param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.#ctor">
            <summary>
            Initializes an empty <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.Clone">
            <summary>
            Creates an exact copy of the current object.
            </summary>
            <returns>A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> with same data as the current object.</returns>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoStore.PropertyGridSortOrder">
            <summary>
            The <see cref="T:Syncfusion.Styles.StyleInfoBaseConverter"/> class checks this property
            to find out about the sort order of the properties in this <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.CopyTo(Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Copies all properties to another <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            </summary>
            <param name="target">The target to copy all properties to.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.Dispose">
            <summary>
            Releases all the resources used by the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.Equals(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ResetChangedBits">
            <summary>
            Resets all "Changed" bits that mark certain properties as modified.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.Clear">
            <summary>
            Clears out all properties for this <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.HasValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Indicates whether a specific property has been initialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.IsValueModified(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Indicates whether a specific property has been modified for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.SetValueModified(Syncfusion.Styles.StyleInfoProperty,System.Boolean)">
            <summary>
            Marks a specific property as modified or unmodified for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ResetValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Marks a specific property as uninitialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.GetValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Queries the value for a specific property that has been initialized for the current object.
            </summary>
            <param name="sipSrc">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.GetShortValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Queries the <see cref="T:System.Int16"/> value for a specific property that has been initialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.SetValue(Syncfusion.Styles.StyleInfoProperty,System.Object)">
            <summary>
            Overloaded. Initializes the value for a specific property.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <param name="value">The value to be saved for the property.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.SetValue(Syncfusion.Styles.StyleInfoProperty,System.Int16)">
            <summary>
            Initializes the <see cref="T:System.Int16"/> value for a specific property.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <param name="value">The value to be saved for the property.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.GetCurrentStorageSIP(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Gets sip from current storage by sip from another store
            </summary>
            <param name="sip"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ConversionSIP(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Checks SIP belonging to current store. If current store doesn't contain SIP than returns SIP from current store with identical PropertyName. 
            </summary>
            <param name="sipSrc"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore._AssignProperty(Syncfusion.Styles.StyleInfoProperty,Syncfusion.Styles.StyleInfoStore)">
            <summary>
            
            </summary>
            <param name="sip"></param>
            <param name="style"></param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore._EqualsProperty(Syncfusion.Styles.StyleInfoProperty,Syncfusion.Styles.StyleInfoStore)">
            <summary>
            
            </summary>
            <param name="sip"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore._ModifyProperty(Syncfusion.Styles.StyleInfoProperty,Syncfusion.Styles.StyleInfoStore,Syncfusion.Styles.StyleModifyType)">
            <summary>
            
            </summary>
            <param name="sip"></param>
            <param name="style"></param>
            <param name="mt"></param>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoStore.IsEmpty">
            <summary>
            Indicates whether this is an empty object and no properties have been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoStore.IsChanged">
            <summary>
            Indicates whether any properties have been changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.IsSubset(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Compares all properties with another style object and determines
            if the current set of initialized properties is a subset of
            the other style object.
            </summary>
            <param name="istyle">The other style to compare with.</param>
            <returns>True if this style object is a subset of the other style object.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ModifyStyle(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleModifyType)">
            <summary>
            Applies changes to a style object as specified with <see cref="T:Syncfusion.Styles.StyleModifyType"/>.
            </summary>
            <param name="istyle">The style object to be applied on the current object.</param>
            <param name="mt">The actual operation to be performed.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ModifyStyleKeepChanges(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleModifyType)">
            <summary>
            Applies changes to a style object as specified with <see cref="T:Syncfusion.Styles.StyleModifyType"/>. If a property is modified
            its Changed flag is set so that the parent style object can identify modified properties in a subsequent Changed notification.
            </summary>
            <param name="istyle">The style object to be applied on the current object.</param>
            <param name="mt">The actual operation to be performed.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.MergeStyle(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Merges two styles. Resets all properties that differ among the two style objects
            and keeps only those properties that are equal.
            </summary>
            <param name="istyle">The other style object this style object should merge with.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.InheritStyle(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleModifyType)">
            <summary>
            Applies changes to a style object as specified with
            </summary>
            <param name="istyle"> The other style object this style object should inherit with. </param>
            <param name="mt"> Style operation </param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.MultiModifyProperty(Syncfusion.Styles.StyleInfoProperty,Syncfusion.Styles.StyleInfoStore,Syncfusion.Styles.StyleModifyType)">
            <summary>
            Modifieds property from different stores
            </summary>
            <param name="sip"></param>
            <param name="style"></param>
            <param name="mt"></param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.MultiAssignProperty(Syncfusion.Styles.StyleInfoProperty,Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Assigns property with sipInfo from style
            </summary>
            <param name="sip"> </param>
            <param name="style"></param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.MultiResetValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            if sipSrc is different store with current store than find StyleInfoProperty in current store with identical PropertyName and reset property
            </summary>
            <param name="sipSrc"> sip from some  store</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.MultiModifyExpandableProperty(Syncfusion.Styles.StyleInfoProperty,Syncfusion.Styles.StyleInfoStore,Syncfusion.Styles.StyleModifyType)">
            <summary>
             Modifies expanded property
            </summary>
            <param name="sip"> sip from another storage </param>
            <param name="style"> style source </param>
            <param name="mt"> operation </param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ProcessWriteXml(System.Xml.XmlWriter,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Allows customization of serializing the StyleInfoProperty. Returns True if you override
            this method and do not want default serialization behavior for this property.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ProcessReadXml(System.Xml.XmlReader,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Allows customization of serializing the StyleInfoProperty. Returns True if you override
            this method and do not want default serialization behavior for this property.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes all properties of this object to XML.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.RegisterXmlSerializer(System.Type,System.Xml.Serialization.XmlSerializer)">
            <summary>
            Registers the XmlSerializer for a specific type. This XmlSerializer will
            be used when a object of the specified type is read back in from an xml stream. 
            You can for example register an "ImageHolder" serializer for a custom ImageHolder type
            and have that serializer be used when GridStyleInfo.CellValue contains an ImageHolder object.
            </summary>
            <param name="type"></param>
            <param name="xmlSerializer"></param>
            <example>
            <code>
            XmlSerializer imageHolderSerializer = new XmlSerializer(typeof(object), new Type[] { typeof(ImageHolder) });
            GridStyleInfoStore.RegisterXmlSerializer(typeof(ImageHolder), imageHolderSerializer);
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ReadXml(System.Xml.XmlReader)">
            <summary>
            Serializes all properties of this object from XML.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.GetSchema">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoPropertyOptions">
            <summary>
            Specifies the options for style properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoPropertyOptions.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoPropertyOptions.Serializable">
            <summary>
            The property supports serialization.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoPropertyOptions.Cloneable">
            <summary>
            The property should be cloned when the parent style object is copied.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoPropertyOptions.Disposable">
            <summary>
            The property should be disposed when the parent style object is disposed.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoPropertyOptions.CloneableAndDisposable">
            <summary>
            The property should be disposed when the parent style object is disposed
            and cloned when the parent style object is copied.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoPropertyOptions.All">
            <summary>
            All of the above.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoSubObjectBase">
            <summary>
            <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> is an abstract base class for classes
            to be used as subobjects in a <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> is derived from <see cref="T:Syncfusion.Styles.StyleInfoBase"/>
            and thus provides the same easy way to provide properties that can inherit values
            from base styles at run-time.<para/>
            The difference is that <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> supports this inheritance
            mechanism as a subobject from a <see cref="T:Syncfusion.Styles.StyleInfoBase"/>. A subobject needs to
            have knowledge about its parent object and be able to walk the base styles from the
            parent object.<para/>
            Examples for implementation of <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> are the font and border
            classes in Essential Grid.<para/>
            Programmers can derive their own style classes from <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> 
            and add type-safe (and Intelli-sense) 
            supported custom properties to the style class. If you write your own 
            SpinButton class that needs individual properties, simply add a "CellSpinButtonInfo" 
            class as subobject. If you derive CellSpinButtonInfo from StyleInfoSubObjectBase, 
            your new object will support property inheritance from base styles.
            <para/>
            See the overview for <see cref="T:Syncfusion.Styles.StyleInfoBase"/> for further discussion about style objects.
            </remarks>
            <example>The following example shows how you can use the GridFontInfo class in Essential Grid:
            <code lang="C#">
                    standard.Font.Facename = "Helvetica";
                    model[1, 3].Font.Bold = true;
                    string faceName = model[1, 3].Font.Facename; // any cell inherits standard style
                    Console.WriteLIne(faceName); // will output "Helvetica"
                    Console.WriteLIne(model[1, 3].Font.Bold); // will output "true"
                    Console.WriteLIne(model[1, 3].Font.HasFaceName); // will output "False"
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectBase.#ctor(Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Overloaded. Initializes a new <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            </summary>
            <param name="store">A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> that holds data for this object.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectBase.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity,Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.
            <param name="store">A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> that holds data for this object.</param>
            All changes in this style object will be saved in the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectBase.Dispose">
            <summary>
            Releases all the resources used by the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoSubObjectBase.Sip">
            <summary>
            Returns a unique identifier for this subobject in the owner style object. 
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoSubObjectBase.Data">
            <summary>
            Returns the data for this object. This is the StyleInfoStore from the constructor.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoSubObjectBase.Owner">
            <summary>
            Returns a reference to the owner style object.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectBase.OnStyleChanged(Syncfusion.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectBase.IntGetDefaultStyleInfo(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Locates the base style that has the specified property and returns its instance.
            </summary>
            <param name="sip">Identifies the property to look for.</param>
            <returns>The style object that has the specified property.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectBase.MakeCopy(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Makes an exact copy of the current object.
            </summary>
            <param name="newOwner">The new owner style object for the copied object.</param>
            <param name="sip">The identifier for this object.</param>
            <returns>A copy of the current object registered with the new owner style object.</returns>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoSubObjectIdentity">
            <summary>
            Provides style identity information for subobjects.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectIdentity.Dispose">
            <summary>
            Releases all the resources used by the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoSubObjectIdentity.Owner">
            <summary>
            Returns the owner style of the subobject.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoSubObjectIdentity.Sip">
            <summary>
            Returns the identifier of the subobject in the owner object.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectIdentity.#ctor(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Instantiates a new <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> for a 
            given owner and <see cref="T:Syncfusion.Styles.StyleInfoProperty"/>.
            </summary>
            <param name="owner">The owner style of the sub object.</param>
            <param name="sip">The identifier of the subobject in the owner object.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectIdentity.GetBaseStyles(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Returns an array with base styles for the specified style object.
            </summary>
            <param name="thisStyleInfo">The style object.</param>
            <returns>
            An array of style objects that are base styles for the current style object.
            </returns>
        </member>
        <member name="T:Syncfusion.Styles.StyleModifyType">
            <summary>
            StyleModifyType defines style operations for <see cref="M:Syncfusion.Styles.StyleInfoBase.ModifyStyle(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleModifyType)"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleModifyType.Override">
            <summary>
            Copies all initialized properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleModifyType.ApplyNew">
            <summary>
            Copies only properties that have not been initialized in the target style object.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleModifyType.Copy">
            <summary>
            Copies all properties and resets properties in the target style.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleModifyType.Exclude">
            <summary>
            Resets properties in the target style that have been marked as initialized in the source style.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleModifyType.Remove">
            <summary>
            Clears out all properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleModifyType.Changes">
            <summary>
            Copies and resets all properties in the target style when the property has been marked as changed in the source style.
            </summary>
        </member>
    </members>
</doc>
